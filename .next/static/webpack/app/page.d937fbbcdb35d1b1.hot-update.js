"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./hooks/useBlocksProgram.ts":
/*!***********************************!*\
  !*** ./hooks/useBlocksProgram.ts ***!
  \***********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PostRating: function() { return /* binding */ PostRating; },\n/* harmony export */   useBlocksProgram: function() { return /* binding */ useBlocksProgram; }\n/* harmony export */ });\n/* harmony import */ var _solana_wallet_adapter_react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @solana/wallet-adapter-react */ \"(app-pages-browser)/./node_modules/@solana/wallet-adapter-react/lib/esm/useConnection.js\");\n/* harmony import */ var _solana_wallet_adapter_react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @solana/wallet-adapter-react */ \"(app-pages-browser)/./node_modules/@solana/wallet-adapter-react/lib/esm/useWallet.js\");\n/* harmony import */ var _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @solana/web3.js */ \"(app-pages-browser)/./node_modules/@solana/web3.js/lib/index.browser.esm.js\");\n/* harmony import */ var borsh__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! borsh */ \"(app-pages-browser)/./node_modules/borsh/lib/index.js\");\n/* harmony import */ var borsh__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(borsh__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react_hot_toast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-hot-toast */ \"(app-pages-browser)/./node_modules/react-hot-toast/dist/index.mjs\");\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/config */ \"(app-pages-browser)/./config/index.ts\");\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"(app-pages-browser)/./node_modules/buffer/index.js\")[\"Buffer\"];\n\n\n\n\n\n// Your deployed program ID - configured from environment\nconst PROGRAM_ID = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(_config__WEBPACK_IMPORTED_MODULE_3__.config.solana.programId);\n// Add debug mode for testing without actual blockchain transactions\nconst DEBUG_MODE = \"development\" === \"development\";\nvar ContractInstruction;\n// Instruction enum matching your Rust contract\n(function(ContractInstruction) {\n    ContractInstruction[ContractInstruction[\"CreateProfile\"] = 0] = \"CreateProfile\";\n    ContractInstruction[ContractInstruction[\"UpdateProfile\"] = 1] = \"UpdateProfile\";\n    ContractInstruction[ContractInstruction[\"CreatePost\"] = 2] = \"CreatePost\";\n    ContractInstruction[ContractInstruction[\"LikePost\"] = 3] = \"LikePost\";\n    ContractInstruction[ContractInstruction[\"CommentOnPost\"] = 4] = \"CommentOnPost\";\n    ContractInstruction[ContractInstruction[\"FollowProfile\"] = 5] = \"FollowProfile\";\n    ContractInstruction[ContractInstruction[\"UnfollowProfile\"] = 6] = \"UnfollowProfile\";\n    ContractInstruction[ContractInstruction[\"CreateCommunity\"] = 7] = \"CreateCommunity\";\n    ContractInstruction[ContractInstruction[\"JoinCommunity\"] = 8] = \"JoinCommunity\";\n})(ContractInstruction || (ContractInstruction = {}));\nvar PostRating;\n(function(PostRating) {\n    PostRating[PostRating[\"None\"] = 0] = \"None\";\n    PostRating[PostRating[\"Bronze\"] = 1] = \"Bronze\";\n    PostRating[PostRating[\"Silver\"] = 2] = \"Silver\";\n    PostRating[PostRating[\"Gold\"] = 3] = \"Gold\";\n    PostRating[PostRating[\"Platinum\"] = 4] = \"Platinum\";\n    PostRating[PostRating[\"Diamond\"] = 5] = \"Diamond\";\n    PostRating[PostRating[\"Ace\"] = 6] = \"Ace\";\n    PostRating[PostRating[\"Conqueror\"] = 7] = \"Conqueror\";\n})(PostRating || (PostRating = {}));\n// Create Profile instruction data class\nclass CreateProfileInstruction {\n    constructor(fields){\n        this.username = fields.username;\n        this.bio = fields.bio;\n        this.profile_image = fields.profile_image;\n        this.cover_image = fields.cover_image;\n    }\n}\n// Create Post instruction data class\nclass CreatePostInstruction {\n    constructor(fields){\n        this.content = fields.content;\n        this.images = fields.images;\n    }\n}\n// Like Post instruction data class\nclass LikePostInstruction {\n    constructor(fields){\n        this.post_id = fields.post_id;\n    }\n}\n// Comment On Post instruction data class\nclass CommentOnPostInstruction {\n    constructor(fields){\n        this.content = fields.content;\n        this.parent_id = fields.parent_id;\n    }\n}\n// Bookmark Post instruction data class\nclass BookmarkPostInstruction {\n    constructor(fields){\n        this.post_id = fields.post_id;\n    }\n}\n// Profile struct for deserialization - matching Rust exactly\nclass ProfileAccount {\n    constructor(fields){\n        this.is_initialized = fields.is_initialized;\n        this.owner = fields.owner;\n        this.username = fields.username;\n        this.bio = fields.bio;\n        this.profile_image = fields.profile_image;\n        this.cover_image = fields.cover_image;\n        this.created_at = fields.created_at;\n        this.followers_count = fields.followers_count;\n        this.following_count = fields.following_count;\n        this.user_credit_rating = fields.user_credit_rating;\n        this.posts_count = fields.posts_count;\n        this.last_post_timestamp = fields.last_post_timestamp;\n        this.daily_post_count = fields.daily_post_count;\n        this.is_verified = fields.is_verified;\n    }\n}\n// Post struct for deserialization - matching Rust exactly\nclass PostAccount {\n    constructor(fields){\n        this.is_initialized = fields.is_initialized;\n        this.id = fields.id;\n        this.author = fields.author;\n        this.content = fields.content;\n        this.timestamp = fields.timestamp;\n        this.likes = fields.likes;\n        this.comments = fields.comments;\n        this.mirrors = fields.mirrors;\n        this.images = fields.images;\n        this.rating = fields.rating;\n        this.in_kill_zone = fields.in_kill_zone;\n    }\n}\n// Borsh schemas\nconst createProfileSchema = new Map([\n    [\n        CreateProfileInstruction,\n        {\n            kind: \"struct\",\n            fields: [\n                [\n                    \"username\",\n                    \"string\"\n                ],\n                [\n                    \"bio\",\n                    \"string\"\n                ],\n                [\n                    \"profile_image\",\n                    \"string\"\n                ],\n                [\n                    \"cover_image\",\n                    \"string\"\n                ]\n            ]\n        }\n    ]\n]);\nconst createPostSchema = new Map([\n    [\n        CreatePostInstruction,\n        {\n            kind: \"struct\",\n            fields: [\n                [\n                    \"content\",\n                    \"string\"\n                ],\n                [\n                    \"images\",\n                    [\n                        \"string\"\n                    ]\n                ]\n            ]\n        }\n    ]\n]);\nconst likePostSchema = new Map([\n    [\n        LikePostInstruction,\n        {\n            kind: \"struct\",\n            fields: [\n                [\n                    \"post_id\",\n                    \"u64\"\n                ]\n            ]\n        }\n    ]\n]);\nconst commentOnPostSchema = new Map([\n    [\n        CommentOnPostInstruction,\n        {\n            kind: \"struct\",\n            fields: [\n                [\n                    \"content\",\n                    \"string\"\n                ],\n                [\n                    \"parent_id\",\n                    \"u64\"\n                ]\n            ]\n        }\n    ]\n]);\nconst bookmarkPostSchema = new Map([\n    [\n        BookmarkPostInstruction,\n        {\n            kind: \"struct\",\n            fields: [\n                [\n                    \"post_id\",\n                    \"u64\"\n                ]\n            ]\n        }\n    ]\n]);\nconst profileAccountSchema = new Map([\n    [\n        ProfileAccount,\n        {\n            kind: \"struct\",\n            fields: [\n                [\n                    \"is_initialized\",\n                    \"u8\"\n                ],\n                [\n                    \"owner\",\n                    [\n                        32\n                    ]\n                ],\n                [\n                    \"username\",\n                    \"string\"\n                ],\n                [\n                    \"bio\",\n                    \"string\"\n                ],\n                [\n                    \"profile_image\",\n                    \"string\"\n                ],\n                [\n                    \"cover_image\",\n                    \"string\"\n                ],\n                [\n                    \"created_at\",\n                    \"u64\"\n                ],\n                [\n                    \"followers_count\",\n                    \"u64\"\n                ],\n                [\n                    \"following_count\",\n                    \"u64\"\n                ],\n                [\n                    \"user_credit_rating\",\n                    \"i64\"\n                ],\n                [\n                    \"posts_count\",\n                    \"u64\"\n                ],\n                [\n                    \"last_post_timestamp\",\n                    \"u64\"\n                ],\n                [\n                    \"daily_post_count\",\n                    \"u64\"\n                ],\n                [\n                    \"is_verified\",\n                    \"u8\"\n                ]\n            ]\n        }\n    ]\n]);\nconst postAccountSchema = new Map([\n    [\n        PostAccount,\n        {\n            kind: \"struct\",\n            fields: [\n                [\n                    \"is_initialized\",\n                    \"u8\"\n                ],\n                [\n                    \"id\",\n                    \"u64\"\n                ],\n                [\n                    \"author\",\n                    [\n                        32\n                    ]\n                ],\n                [\n                    \"content\",\n                    \"string\"\n                ],\n                [\n                    \"timestamp\",\n                    \"u64\"\n                ],\n                [\n                    \"likes\",\n                    \"u64\"\n                ],\n                [\n                    \"comments\",\n                    \"u64\"\n                ],\n                [\n                    \"mirrors\",\n                    \"u64\"\n                ],\n                [\n                    \"images\",\n                    [\n                        \"string\"\n                    ]\n                ],\n                [\n                    \"rating\",\n                    \"u8\"\n                ],\n                [\n                    \"in_kill_zone\",\n                    \"u8\"\n                ]\n            ]\n        }\n    ]\n]);\n// Community struct for deserialization\nclass CommunityAccount {\n    constructor(fields){\n        this.is_initialized = fields.is_initialized;\n        this.id = fields.id;\n        this.creator = fields.creator;\n        this.name = fields.name;\n        this.description = fields.description;\n        this.avatar = fields.avatar;\n        this.rules = fields.rules;\n        this.member_count = fields.member_count;\n        this.created_at = fields.created_at;\n        this.is_private = fields.is_private;\n    }\n}\n// Create Community instruction\nclass CreateCommunityInstruction {\n    constructor(fields){\n        this.name = fields.name;\n        this.description = fields.description;\n        this.avatar = fields.avatar;\n        this.rules = fields.rules;\n    }\n}\n// Follow Profile instruction\nclass FollowProfileInstruction {\n    constructor(fields){\n        this.profile_id = fields.profile_id.toBuffer();\n    }\n}\nconst createCommunitySchema = new Map([\n    [\n        CreateCommunityInstruction,\n        {\n            kind: \"struct\",\n            fields: [\n                [\n                    \"name\",\n                    \"string\"\n                ],\n                [\n                    \"description\",\n                    \"string\"\n                ],\n                [\n                    \"avatar\",\n                    \"string\"\n                ],\n                [\n                    \"rules\",\n                    [\n                        \"string\"\n                    ]\n                ]\n            ]\n        }\n    ]\n]);\nconst followProfileSchema = new Map([\n    [\n        FollowProfileInstruction,\n        {\n            kind: \"struct\",\n            fields: [\n                [\n                    \"profile_id\",\n                    [\n                        32\n                    ]\n                ]\n            ]\n        }\n    ]\n]);\nconst communityAccountSchema = new Map([\n    [\n        CommunityAccount,\n        {\n            kind: \"struct\",\n            fields: [\n                [\n                    \"is_initialized\",\n                    \"u8\"\n                ],\n                [\n                    \"id\",\n                    \"u64\"\n                ],\n                [\n                    \"creator\",\n                    [\n                        32\n                    ]\n                ],\n                [\n                    \"name\",\n                    \"string\"\n                ],\n                [\n                    \"description\",\n                    \"string\"\n                ],\n                [\n                    \"avatar\",\n                    \"string\"\n                ],\n                [\n                    \"rules\",\n                    [\n                        \"string\"\n                    ]\n                ],\n                [\n                    \"member_count\",\n                    \"u64\"\n                ],\n                [\n                    \"created_at\",\n                    \"u64\"\n                ],\n                [\n                    \"is_private\",\n                    \"u8\"\n                ]\n            ]\n        }\n    ]\n]);\n// Cache for profile lookups to avoid repeated blockchain calls\nconst profileCache = new Map();\nconst CACHE_DURATION = 60000 // 1 minute for memory cache (increased from 30 seconds)\n;\n// Posts cache\nlet postsCache = null;\nconst POSTS_CACHE_DURATION = 30000 // 30 seconds for posts cache (increased from 10 seconds)\n;\n// localStorage cache configuration - Updated to support multiple profiles\nconst LOCALSTORAGE_CACHE_PREFIX = \"blocks_profile_\";\nconst LOCALSTORAGE_CACHE_DURATION = 10 * 60 * 1000 // 10 minutes for localStorage cache (increased from 5 minutes)\n;\n// localStorage cache utilities - Updated to support multiple profiles\nconst saveProfileToLocalStorage = (walletAddress, profile)=>{\n    try {\n        const cacheKey = \"\".concat(LOCALSTORAGE_CACHE_PREFIX).concat(walletAddress);\n        const cacheData = {\n            profile,\n            timestamp: Date.now(),\n            walletAddress\n        };\n        localStorage.setItem(cacheKey, JSON.stringify(cacheData));\n        console.log(\"\\uD83D\\uDCBE Profile cached to localStorage for \".concat(walletAddress.slice(0, 8)));\n    } catch (error) {\n        console.warn(\"Failed to save profile to localStorage:\", error);\n    }\n};\nconst getProfileFromLocalStorage = (walletAddress)=>{\n    try {\n        const cacheKey = \"\".concat(LOCALSTORAGE_CACHE_PREFIX).concat(walletAddress);\n        const cached = localStorage.getItem(cacheKey);\n        if (!cached) return null;\n        const cacheData = JSON.parse(cached);\n        // Check if cache is expired\n        if (Date.now() - cacheData.timestamp > LOCALSTORAGE_CACHE_DURATION) {\n            console.log(\"⏰ Cache expired for \".concat(walletAddress.slice(0, 8), \", clearing\"));\n            localStorage.removeItem(cacheKey);\n            return null;\n        }\n        console.log(\"⚡ Using cached profile from localStorage for \".concat(walletAddress.slice(0, 8)));\n        return cacheData.profile;\n    } catch (error) {\n        console.warn(\"Failed to read profile from localStorage:\", error);\n        const cacheKey = \"\".concat(LOCALSTORAGE_CACHE_PREFIX).concat(walletAddress);\n        localStorage.removeItem(cacheKey);\n        return null;\n    }\n};\nconst clearProfileCache = (walletAddress)=>{\n    // Clear memory cache\n    if (walletAddress) {\n        profileCache.delete(walletAddress);\n        // Clear localStorage cache for specific user\n        const cacheKey = \"\".concat(LOCALSTORAGE_CACHE_PREFIX).concat(walletAddress);\n        localStorage.removeItem(cacheKey);\n    } else {\n        profileCache.clear();\n        // Clear all localStorage profile caches\n        const keys = Object.keys(localStorage);\n        keys.forEach((key)=>{\n            if (key.startsWith(LOCALSTORAGE_CACHE_PREFIX)) {\n                localStorage.removeItem(key);\n            }\n        });\n    }\n    // Clear posts cache\n    postsCache = null;\n    console.log(\"\\uD83D\\uDDD1️ Profile and posts cache cleared\");\n};\nfunction useBlocksProgram() {\n    const { connection } = (0,_solana_wallet_adapter_react__WEBPACK_IMPORTED_MODULE_4__.useConnection)();\n    const { publicKey, sendTransaction } = (0,_solana_wallet_adapter_react__WEBPACK_IMPORTED_MODULE_5__.useWallet)();\n    // Get profile PDA\n    const getProfilePDA = async (userPublicKey, username)=>{\n        const [profilePDA] = await _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey.findProgramAddress([\n            userPublicKey.toBuffer(),\n            Buffer.from(\"profile\"),\n            Buffer.from(username)\n        ], PROGRAM_ID);\n        return profilePDA;\n    };\n    // Get post PDA\n    const getPostPDA = async (userPublicKey, postId)=>{\n        const [postPDA] = await _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey.findProgramAddress([\n            userPublicKey.toBuffer(),\n            Buffer.from(\"post\"),\n            Buffer.from(postId.toString())\n        ], PROGRAM_ID);\n        return postPDA;\n    };\n    // Helper function to check if program exists\n    const checkProgramExists = async ()=>{\n        try {\n            const programInfo = await connection.getAccountInfo(PROGRAM_ID);\n            return programInfo !== null && programInfo.executable;\n        } catch (error) {\n            console.error(\"Error checking program existence:\", error);\n            return false;\n        }\n    };\n    // Helper function to check SOL balance\n    const checkSOLBalance = async ()=>{\n        if (!publicKey) return 0;\n        try {\n            const balance = await connection.getBalance(publicKey);\n            return balance / _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.LAMPORTS_PER_SOL;\n        } catch (error) {\n            console.error(\"Error checking SOL balance:\", error);\n            return 0;\n        }\n    };\n    // Convert ProfileAccount to Profile interface\n    const convertProfileAccount = (profileAccount)=>{\n        // Calculate UCR based on activity\n        const calculateUCR = (profile)=>{\n            const postsCount = Number(profile.posts_count);\n            const followersCount = Number(profile.followers_count);\n            const followingCount = Number(profile.following_count);\n            // Base UCR calculation algorithm\n            let ucr = 1.0 // Start with base rating\n            ;\n            // Posts factor (0.1 points per post, max 2.0 points)\n            const postsScore = Math.min(postsCount * 0.1, 2.0);\n            // Followers factor (0.05 points per follower, max 1.5 points)\n            const followersScore = Math.min(followersCount * 0.05, 1.5);\n            // Following/followers ratio (healthy ratio = bonus)\n            let ratioBonus = 0;\n            if (followersCount > 0 && followingCount > 0) {\n                const ratio = followersCount / followingCount;\n                if (ratio >= 0.5 && ratio <= 2.0) {\n                    ratioBonus = 0.3;\n                }\n            }\n            // Account age factor (older accounts get bonus)\n            const accountAge = Date.now() - Number(profile.created_at) * 1000;\n            const daysOld = accountAge / (1000 * 60 * 60 * 24);\n            const ageBonus = Math.min(daysOld / 30 * 0.2, 1.0) // 0.2 points per month, max 1.0\n            ;\n            // Verification bonus\n            const verificationBonus = profile.is_verified === 1 ? 0.5 : 0;\n            // Activity factor (posting regularly)\n            const lastPostAge = Date.now() - Number(profile.last_post_timestamp) * 1000;\n            const daysSinceLastPost = lastPostAge / (1000 * 60 * 60 * 24);\n            const activityBonus = daysSinceLastPost < 7 ? 0.3 : daysSinceLastPost < 30 ? 0.1 : 0;\n            ucr = ucr + postsScore + followersScore + ratioBonus + ageBonus + verificationBonus + activityBonus;\n            // Cap at 5.0 max\n            return Math.min(ucr, 5.0);\n        };\n        return {\n            isInitialized: profileAccount.is_initialized === 1,\n            owner: new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(profileAccount.owner),\n            username: profileAccount.username,\n            bio: profileAccount.bio,\n            profileImage: profileAccount.profile_image,\n            coverImage: profileAccount.cover_image,\n            createdAt: Number(profileAccount.created_at) * 1000,\n            followersCount: Number(profileAccount.followers_count),\n            followingCount: Number(profileAccount.following_count),\n            userCreditRating: calculateUCR(profileAccount),\n            postsCount: Number(profileAccount.posts_count),\n            lastPostTimestamp: Number(profileAccount.last_post_timestamp) * 1000,\n            dailyPostCount: Number(profileAccount.daily_post_count),\n            isVerified: profileAccount.is_verified === 1\n        };\n    };\n    // Convert PostAccount to Post interface\n    const convertPostAccount = (postAccount)=>{\n        return {\n            isInitialized: postAccount.is_initialized === 1,\n            id: Number(postAccount.id),\n            author: new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(postAccount.author),\n            content: postAccount.content,\n            timestamp: Number(postAccount.timestamp) * 1000,\n            likes: Number(postAccount.likes),\n            comments: Number(postAccount.comments),\n            mirrors: Number(postAccount.mirrors),\n            images: postAccount.images,\n            rating: postAccount.rating,\n            inKillZone: postAccount.in_kill_zone === 1\n        };\n    };\n    // Create user profile - REAL IMPLEMENTATION\n    const createProfile = async (username, bio, profileImage, coverImage)=>{\n        if (!publicKey) throw new Error(\"Wallet not connected\");\n        try {\n            console.log(\"\\uD83D\\uDD0D Running pre-flight checks...\");\n            const balance = await checkSOLBalance();\n            console.log(\"\\uD83D\\uDCB0 SOL Balance: \".concat(balance));\n            if (balance < 0.1) {\n                throw new Error(\"Insufficient SOL balance: \".concat(balance, \". You need at least 0.1 SOL for transaction fees and account creation.\"));\n            }\n            const programExists = await checkProgramExists();\n            console.log(\"\\uD83D\\uDCCB Program exists: \".concat(programExists));\n            if (!programExists) {\n                throw new Error(\"Program not found at address: \".concat(PROGRAM_ID.toString(), \". Make sure the program is deployed on \").concat(_config__WEBPACK_IMPORTED_MODULE_3__.config.solana.network, \".\"));\n            }\n            console.log(\"✅ Pre-flight checks passed\");\n            const profilePDA = await getProfilePDA(publicKey, username);\n            console.log(\"\\uD83D\\uDCCD Profile PDA: \".concat(profilePDA.toString()));\n            const instructionData = new CreateProfileInstruction({\n                username,\n                bio,\n                profile_image: profileImage,\n                cover_image: coverImage\n            });\n            const createProfileVariant = Buffer.from([\n                0\n            ]);\n            const serializedData = (0,borsh__WEBPACK_IMPORTED_MODULE_1__.serialize)(createProfileSchema, instructionData);\n            const fullInstructionData = Buffer.concat([\n                createProfileVariant,\n                Buffer.from(serializedData)\n            ]);\n            const instruction = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.TransactionInstruction({\n                keys: [\n                    {\n                        pubkey: publicKey,\n                        isSigner: true,\n                        isWritable: true\n                    },\n                    {\n                        pubkey: profilePDA,\n                        isSigner: false,\n                        isWritable: true\n                    },\n                    {\n                        pubkey: _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.SystemProgram.programId,\n                        isSigner: false,\n                        isWritable: false\n                    }\n                ],\n                programId: PROGRAM_ID,\n                data: fullInstructionData\n            });\n            const transaction = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.Transaction().add(instruction);\n            const { blockhash } = await connection.getLatestBlockhash(\"processed\");\n            transaction.recentBlockhash = blockhash;\n            transaction.feePayer = publicKey;\n            const simulation = await connection.simulateTransaction(transaction);\n            if (simulation.value.err) {\n                throw new Error(\"Transaction simulation failed: \".concat(JSON.stringify(simulation.value.err)));\n            }\n            const signature = await sendTransaction(transaction, connection, {\n                skipPreflight: false,\n                preflightCommitment: \"processed\",\n                maxRetries: 3\n            });\n            await connection.confirmTransaction({\n                signature,\n                blockhash,\n                lastValidBlockHeight: (await connection.getLatestBlockhash()).lastValidBlockHeight\n            }, \"processed\");\n            // Invalidate cache after profile creation\n            clearProfileCache(publicKey.toString());\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__.toast.success(\"Profile created successfully!\");\n            return signature;\n        } catch (error) {\n            console.error(\"❌ Profile creation error:\", error);\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__.toast.error(\"Transaction failed: \".concat(error.message || \"Unknown error\"));\n            throw error;\n        }\n    };\n    // Production-ready profile detection with localStorage caching - Improved for multiple users\n    const getProfile = async (userPublicKey)=>{\n        const cacheKey = userPublicKey.toString();\n        try {\n            // 1. Check localStorage cache first (fastest)\n            const cachedProfile = getProfileFromLocalStorage(cacheKey);\n            if (cachedProfile !== null) {\n                // Also update memory cache\n                profileCache.set(cacheKey, cachedProfile);\n                setTimeout(()=>profileCache.delete(cacheKey), CACHE_DURATION);\n                return cachedProfile;\n            }\n            // 2. Check memory cache\n            if (profileCache.has(cacheKey)) {\n                const cached = profileCache.get(cacheKey);\n                return cached !== null && cached !== void 0 ? cached : null;\n            }\n            // 3. Fetch from blockchain (slowest)\n            console.log(\"\\uD83D\\uDD0D Fetching profile from blockchain for: \".concat(userPublicKey.toString().slice(0, 8), \"...\"));\n            const accounts = await connection.getProgramAccounts(PROGRAM_ID);\n            console.log(\"\\uD83D\\uDCCA Found \".concat(accounts.length, \" program accounts to scan for profiles\"));\n            let profilesFound = 0;\n            // Scan through accounts to find user's profile\n            for (const { account, pubkey } of accounts){\n                try {\n                    if (account.data.length === 0) continue;\n                    // Try manual parsing first\n                    const profileAccount = manualParseProfile(account.data);\n                    if (!profileAccount) continue;\n                    profilesFound++;\n                    const accountOwner = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(profileAccount.owner);\n                    // Check if this profile belongs to the user we're looking for\n                    if (profileAccount.is_initialized === 1 && accountOwner.equals(userPublicKey)) {\n                        console.log('\\uD83C\\uDFAF FOUND PROFILE! Username: \"'.concat(profileAccount.username, '\" for ').concat(userPublicKey.toString().slice(0, 8)));\n                        console.log('\\uD83D\\uDCF8 Profile Image URL: \"'.concat(profileAccount.profile_image, '\"'));\n                        console.log('\\uD83D\\uDDBC️ Cover Image URL: \"'.concat(profileAccount.cover_image, '\"'));\n                        console.log(\"\\uD83D\\uDCCA Profile Data:\", {\n                            username: profileAccount.username,\n                            bio: profileAccount.bio,\n                            profileImage: profileAccount.profile_image,\n                            coverImage: profileAccount.cover_image,\n                            postsCount: Number(profileAccount.posts_count),\n                            followersCount: Number(profileAccount.followers_count),\n                            isVerified: profileAccount.is_verified === 1\n                        });\n                        const profile = convertProfileAccount(profileAccount);\n                        // Cache in both memory and localStorage\n                        profileCache.set(cacheKey, profile);\n                        setTimeout(()=>profileCache.delete(cacheKey), CACHE_DURATION);\n                        saveProfileToLocalStorage(cacheKey, profile);\n                        return profile;\n                    }\n                } catch (error) {\n                    continue;\n                }\n            }\n            console.log(\"\\uD83D\\uDCCA Scanned \".concat(profilesFound, \" profiles, no match found for user: \").concat(userPublicKey.toString().slice(0, 8)));\n            // No profile found - cache null result to avoid repeated scans\n            profileCache.set(cacheKey, null);\n            setTimeout(()=>profileCache.delete(cacheKey), CACHE_DURATION);\n            saveProfileToLocalStorage(cacheKey, null);\n            return null;\n        } catch (error) {\n            console.error(\"Error fetching profile for \".concat(userPublicKey.toString().slice(0, 8), \":\"), error);\n            return null;\n        }\n    };\n    // Get profile by username (for specific lookups)\n    const getProfileByUsername = async (userPublicKey, username)=>{\n        try {\n            const profilePDA = await getProfilePDA(userPublicKey, username);\n            const accountInfo = await connection.getAccountInfo(profilePDA);\n            if (!accountInfo || !accountInfo.data || accountInfo.data.length === 0) {\n                return null;\n            }\n            // Now try manual parsing\n            const profileAccount = manualParseProfile(accountInfo.data);\n            if (profileAccount) {\n                console.log(\"✅ Successfully manually parsed profile:\", {\n                    username: profileAccount.username,\n                    bio: profileAccount.bio,\n                    isInitialized: profileAccount.is_initialized === 1,\n                    owner: new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(profileAccount.owner).toString(),\n                    profileImage: profileAccount.profile_image,\n                    coverImage: profileAccount.cover_image,\n                    postsCount: Number(profileAccount.posts_count)\n                });\n                return convertProfileAccount(profileAccount);\n            } else {\n                console.log(\"❌ Manual parsing failed\");\n                return null;\n            }\n        } catch (error) {\n            return null;\n        }\n    };\n    // Get posts - REAL IMPLEMENTATION with manual parsing and caching\n    const getPosts = async ()=>{\n        try {\n            // Check cache first\n            if (postsCache && Date.now() - postsCache.timestamp < POSTS_CACHE_DURATION) {\n                console.log(\"⚡ Using cached posts\");\n                return postsCache.posts;\n            }\n            console.log(\"\\uD83D\\uDD0D Fetching posts from blockchain...\");\n            const accounts = await connection.getProgramAccounts(PROGRAM_ID);\n            const posts = [];\n            console.log(\"\\uD83D\\uDCCA Scanning \".concat(accounts.length, \" program accounts for posts...\"));\n            for (const { account, pubkey } of accounts){\n                try {\n                    if (account.data.length === 0) continue;\n                    // Try manual post parsing first\n                    const postAccount = manualParsePost(account.data);\n                    if (postAccount && postAccount.is_initialized === 1 && postAccount.content) {\n                        const post = convertPostAccount(postAccount);\n                        posts.push(post);\n                        console.log('\\uD83D\\uDCDD Found post: \"'.concat(post.content.substring(0, 50), '...\" by ').concat(post.author.toString()));\n                    }\n                } catch (error) {\n                    continue;\n                }\n            }\n            posts.sort((a, b)=>b.timestamp - a.timestamp);\n            console.log(\"✅ Loaded \".concat(posts.length, \" posts from blockchain\"));\n            // Cache the results\n            postsCache = {\n                posts,\n                timestamp: Date.now()\n            };\n            return posts;\n        } catch (error) {\n            console.error(\"Error fetching posts:\", error);\n            return [];\n        }\n    };\n    // Create post - REAL IMPLEMENTATION\n    const createPost = async function(content) {\n        let images = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];\n        if (!publicKey) throw new Error(\"Wallet not connected\");\n        try {\n            console.log(\"\\uD83D\\uDD0D Creating post with content:\", content);\n            // Check SOL balance\n            const balance = await checkSOLBalance();\n            if (balance < 0.05) {\n                throw new Error(\"Insufficient SOL balance: \".concat(balance, \". You need at least 0.05 SOL for transaction fees and account creation.\"));\n            }\n            // Get user's profile PDA - we need this for the instruction\n            const userProfile = await getProfile(publicKey);\n            if (!userProfile) {\n                throw new Error(\"You must create a profile before posting\");\n            }\n            // Get user's current post count to generate the correct post ID\n            // The Rust contract increments posts_count first, then uses that as the post ID\n            const postId = userProfile.postsCount + 1;\n            const postPDA = await getPostPDA(publicKey, postId);\n            console.log(\"\\uD83D\\uDCCD Post PDA: \".concat(postPDA.toString(), \" for post ID: \").concat(postId));\n            // Generate a new keypair for the post account\n            // The Rust contract uses invoke with system_instruction::create_account\n            // This means the post account MUST be a keypair that signs the transaction\n            const postKeypair = _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.Keypair.generate();\n            console.log(\"\\uD83D\\uDCCD Post Account: \".concat(postKeypair.publicKey.toString()));\n            // Get profile PDA for the user (we need the actual username)\n            // Try to find the profile account among all program accounts\n            const accounts = await connection.getProgramAccounts(PROGRAM_ID);\n            let userProfilePDA = null;\n            for (const { account, pubkey } of accounts){\n                try {\n                    const profileAccount = manualParseProfile(account.data);\n                    if (profileAccount && profileAccount.is_initialized === 1 && new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(profileAccount.owner).equals(publicKey)) {\n                        userProfilePDA = pubkey;\n                        console.log(\"\\uD83D\\uDCCD User Profile PDA: \".concat(userProfilePDA.toString()));\n                        break;\n                    }\n                } catch (error) {\n                    continue;\n                }\n            }\n            if (!userProfilePDA) {\n                throw new Error(\"Could not find your profile PDA. Please refresh and try again.\");\n            }\n            const instructionData = new CreatePostInstruction({\n                content,\n                images\n            });\n            const createPostVariant = Buffer.from([\n                2\n            ]) // CreatePost enum index\n            ;\n            const serializedData = (0,borsh__WEBPACK_IMPORTED_MODULE_1__.serialize)(createPostSchema, instructionData);\n            const fullInstructionData = Buffer.concat([\n                createPostVariant,\n                Buffer.from(serializedData)\n            ]);\n            console.log(\"\\uD83D\\uDD22 Instruction data length: \".concat(fullInstructionData.length, \" bytes\"));\n            const instruction = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.TransactionInstruction({\n                keys: [\n                    {\n                        pubkey: publicKey,\n                        isSigner: true,\n                        isWritable: true\n                    },\n                    {\n                        pubkey: postKeypair.publicKey,\n                        isSigner: true,\n                        isWritable: true\n                    },\n                    {\n                        pubkey: userProfilePDA,\n                        isSigner: false,\n                        isWritable: true\n                    },\n                    {\n                        pubkey: _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.SystemProgram.programId,\n                        isSigner: false,\n                        isWritable: false\n                    }\n                ],\n                programId: PROGRAM_ID,\n                data: fullInstructionData\n            });\n            console.log(\"\\uD83D\\uDCDD Transaction instruction created\");\n            console.log(\"\\uD83D\\uDD11 Keys:\", instruction.keys.map((k)=>({\n                    pubkey: k.pubkey.toString(),\n                    isSigner: k.isSigner,\n                    isWritable: k.isWritable\n                })));\n            const transaction = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.Transaction().add(instruction);\n            const { blockhash } = await connection.getLatestBlockhash(\"processed\");\n            transaction.recentBlockhash = blockhash;\n            transaction.feePayer = publicKey;\n            console.log(\"\\uD83D\\uDE80 Sending transaction...\");\n            // Sign transaction before simulation\n            transaction.partialSign(postKeypair);\n            // Simulate transaction \n            const simulation = await connection.simulateTransaction(transaction);\n            console.log(\"\\uD83C\\uDFAF Transaction simulation:\", simulation);\n            if (simulation.value.err) {\n                throw new Error(\"Transaction simulation failed: \".concat(JSON.stringify(simulation.value.err)));\n            }\n            // Send transaction with post keypair as additional signer\n            const signature = await sendTransaction(transaction, connection, {\n                skipPreflight: false,\n                preflightCommitment: \"processed\",\n                maxRetries: 3,\n                signers: [\n                    postKeypair\n                ]\n            });\n            console.log(\"\\uD83D\\uDCCB Transaction signature: \".concat(signature));\n            await connection.confirmTransaction({\n                signature,\n                blockhash,\n                lastValidBlockHeight: (await connection.getLatestBlockhash()).lastValidBlockHeight\n            }, \"processed\");\n            // Invalidate cache after post creation (profile post count changed)\n            clearProfileCache(publicKey.toString());\n            console.log(\"✅ Post created successfully!\");\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__.toast.success(\"Post created successfully!\");\n            return signature;\n        } catch (error) {\n            var _error_message, _error_message1;\n            console.error(\"❌ Post creation error:\", error);\n            if ((_error_message = error.message) === null || _error_message === void 0 ? void 0 : _error_message.includes(\"insufficient funds\")) {\n                const balance = await checkSOLBalance();\n                react_hot_toast__WEBPACK_IMPORTED_MODULE_2__.toast.error(\"Insufficient SOL: \".concat(balance.toFixed(4), \" SOL. Need at least 0.05 SOL for fees.\"));\n            } else if ((_error_message1 = error.message) === null || _error_message1 === void 0 ? void 0 : _error_message1.includes(\"simulation failed\")) {\n                react_hot_toast__WEBPACK_IMPORTED_MODULE_2__.toast.error(\"Transaction would fail: Check account setup and balance\");\n                console.error(\"Simulation error details:\", error.message);\n            } else {\n                react_hot_toast__WEBPACK_IMPORTED_MODULE_2__.toast.error(\"Failed to create post: \".concat(error.message || \"Unknown error\"));\n            }\n            throw error;\n        }\n    };\n    // Like post - REAL IMPLEMENTATION - Fixed to find actual post accounts\n    const likePost = async (postId, postAuthor)=>{\n        if (!publicKey) throw new Error(\"Wallet not connected\");\n        try {\n            console.log(\"\\uD83D\\uDD0D Attempting to like post ID \".concat(postId, \" by author \").concat(postAuthor.toString().slice(0, 8), \"...\"));\n            // Check SOL balance first\n            const balance = await checkSOLBalance();\n            console.log(\"\\uD83D\\uDCB0 Current SOL balance: \".concat(balance));\n            if (balance < 0.01) {\n                throw new Error(\"Insufficient SOL balance: \".concat(balance, \". Need at least 0.01 SOL for transaction fees.\"));\n            }\n            // Find the actual post account by scanning all program accounts\n            // Since posts are stored at random keypairs, not PDAs, we need to find the right one\n            console.log(\"\\uD83D\\uDD0D Searching for post ID \".concat(postId, \" by author \").concat(postAuthor.toString().slice(0, 8), \"...\"));\n            const accounts = await connection.getProgramAccounts(PROGRAM_ID);\n            let postAccountAddress = null;\n            let postAccount = null;\n            for (const { account, pubkey } of accounts){\n                try {\n                    const parsedPost = manualParsePost(account.data);\n                    if (parsedPost && parsedPost.is_initialized === 1 && Number(parsedPost.id) === postId && new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(parsedPost.author).equals(postAuthor)) {\n                        postAccountAddress = pubkey;\n                        postAccount = parsedPost;\n                        console.log(\"\\uD83C\\uDFAF Found post ID \".concat(postId, \" at address: \").concat(pubkey.toString()));\n                        break;\n                    }\n                } catch (error) {\n                    continue;\n                }\n            }\n            if (!postAccountAddress || !postAccount) {\n                throw new Error(\"Post ID \".concat(postId, \" by author \").concat(postAuthor.toString().slice(0, 8), \" not found on blockchain\"));\n            }\n            console.log('\\uD83D\\uDCDD Post data verified: \"'.concat(postAccount.content.slice(0, 30), '...\" with ').concat(Number(postAccount.likes), \" likes\"));\n            // Find the author's profile account\n            console.log(\"\\uD83D\\uDD0D Searching for author profile: \".concat(postAuthor.toString().slice(0, 8), \"...\"));\n            let authorProfileAddress = null;\n            for (const { account, pubkey } of accounts){\n                try {\n                    const parsedProfile = manualParseProfile(account.data);\n                    if (parsedProfile && parsedProfile.is_initialized === 1 && new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(parsedProfile.owner).equals(postAuthor)) {\n                        authorProfileAddress = pubkey;\n                        console.log(\"\\uD83C\\uDFAF Found author profile at address: \".concat(pubkey.toString()));\n                        break;\n                    }\n                } catch (error) {\n                    continue;\n                }\n            }\n            if (!authorProfileAddress) {\n                throw new Error(\"Author profile for \".concat(postAuthor.toString().slice(0, 8), \" not found on blockchain\"));\n            }\n            const instructionData = new LikePostInstruction({\n                post_id: BigInt(postId)\n            });\n            const likePostVariant = Buffer.from([\n                3\n            ]) // LikePost instruction variant\n            ;\n            const serializedData = (0,borsh__WEBPACK_IMPORTED_MODULE_1__.serialize)(likePostSchema, instructionData);\n            const fullInstructionData = Buffer.concat([\n                likePostVariant,\n                Buffer.from(serializedData)\n            ]);\n            console.log(\"\\uD83D\\uDD22 Instruction data: variant [3], serialized length: \".concat(serializedData.length, \", total: \").concat(fullInstructionData.length, \" bytes\"));\n            const instruction = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.TransactionInstruction({\n                keys: [\n                    {\n                        pubkey: publicKey,\n                        isSigner: true,\n                        isWritable: false\n                    },\n                    {\n                        pubkey: postAccountAddress,\n                        isSigner: false,\n                        isWritable: true\n                    },\n                    {\n                        pubkey: authorProfileAddress,\n                        isSigner: false,\n                        isWritable: true\n                    }\n                ],\n                programId: PROGRAM_ID,\n                data: fullInstructionData\n            });\n            console.log(\"\\uD83D\\uDD11 Transaction accounts:\");\n            console.log(\"  User (liker): \".concat(publicKey.toString(), \" (signer, readonly)\"));\n            console.log(\"  Post: \".concat(postAccountAddress.toString(), \" (not signer, writable)\"));\n            console.log(\"  Author Profile: \".concat(authorProfileAddress.toString(), \" (not signer, writable)\"));\n            console.log(\"  Program: \".concat(PROGRAM_ID.toString()));\n            const transaction = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.Transaction().add(instruction);\n            const { blockhash } = await connection.getLatestBlockhash(\"processed\");\n            transaction.recentBlockhash = blockhash;\n            transaction.feePayer = publicKey;\n            // Simulate transaction before sending\n            console.log(\"\\uD83C\\uDFAF Simulating transaction...\");\n            const simulation = await connection.simulateTransaction(transaction);\n            console.log(\"\\uD83D\\uDCCA Simulation result:\", simulation);\n            if (simulation.value.err) {\n                throw new Error(\"Transaction simulation failed: \".concat(JSON.stringify(simulation.value.err)));\n            }\n            console.log(\"✅ Transaction simulation successful\");\n            console.log(\"\\uD83D\\uDE80 Sending transaction...\");\n            const signature = await sendTransaction(transaction, connection, {\n                skipPreflight: false,\n                preflightCommitment: \"processed\",\n                maxRetries: 3\n            });\n            console.log(\"\\uD83D\\uDCCB Transaction sent with signature: \".concat(signature));\n            console.log(\"⏳ Confirming transaction...\");\n            await connection.confirmTransaction({\n                signature,\n                blockhash,\n                lastValidBlockHeight: (await connection.getLatestBlockhash()).lastValidBlockHeight\n            }, \"processed\");\n            console.log(\"✅ Transaction confirmed! Post liked successfully!\");\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__.toast.success(\"Post liked!\");\n            return signature;\n        } catch (error) {\n            var _error_message, _error_message1, _error_message2;\n            console.error(\"❌ Like post error:\", error);\n            // More specific error messages\n            if ((_error_message = error.message) === null || _error_message === void 0 ? void 0 : _error_message.includes(\"insufficient funds\")) {\n                const balance = await checkSOLBalance();\n                react_hot_toast__WEBPACK_IMPORTED_MODULE_2__.toast.error(\"Insufficient SOL: \".concat(balance.toFixed(4), \" SOL. Need at least 0.01 SOL for fees.\"));\n            } else if ((_error_message1 = error.message) === null || _error_message1 === void 0 ? void 0 : _error_message1.includes(\"simulation failed\")) {\n                react_hot_toast__WEBPACK_IMPORTED_MODULE_2__.toast.error(\"Transaction would fail: Check post exists and wallet has permission\");\n                console.error(\"Simulation error details:\", error.message);\n            } else if ((_error_message2 = error.message) === null || _error_message2 === void 0 ? void 0 : _error_message2.includes(\"not found on blockchain\")) {\n                react_hot_toast__WEBPACK_IMPORTED_MODULE_2__.toast.error(\"Post not found on blockchain\");\n            } else {\n                react_hot_toast__WEBPACK_IMPORTED_MODULE_2__.toast.error(\"Failed to like post: \".concat(error.message || \"Unknown error\"));\n            }\n            throw error;\n        }\n    };\n    // Check specific profile PDA - for debugging profile detection issues\n    const checkProfileAtPDA = async (pdaAddress)=>{\n        try {\n            console.log(\"\\uD83D\\uDD0D Checking specific PDA: \".concat(pdaAddress));\n            const pda = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(pdaAddress);\n            const accountInfo = await connection.getAccountInfo(pda);\n            if (!accountInfo) {\n                console.log(\"❌ No account found at PDA: \".concat(pdaAddress));\n                return;\n            }\n            console.log(\"✅ Account exists! Owner: \".concat(accountInfo.owner.toString(), \", Size: \").concat(accountInfo.data.length, \" bytes\"));\n            // Inspect raw data\n            console.log(\"\\uD83D\\uDD0D Raw data (first 100 bytes):\", Array.from(accountInfo.data.slice(0, 100)));\n            if (accountInfo.owner.equals(PROGRAM_ID)) {\n                console.log(\"✅ Account is owned by our program\");\n                try {\n                    // Try manual parsing to understand the structure\n                    let offset = 0;\n                    const is_initialized = accountInfo.data[offset];\n                    offset += 1;\n                    console.log(\"\\uD83D\\uDCCA is_initialized: \".concat(is_initialized));\n                    const owner = accountInfo.data.slice(offset, offset + 32);\n                    offset += 32;\n                    console.log(\"\\uD83D\\uDCCA owner: \".concat(new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(owner).toString()));\n                    // Try to read the username length (Borsh string format: 4 bytes length + string)\n                    const usernameLength = accountInfo.data.readUInt32LE(offset);\n                    offset += 4;\n                    console.log(\"\\uD83D\\uDCCA username length: \".concat(usernameLength));\n                    if (usernameLength > 0 && usernameLength < 100) {\n                        const username = accountInfo.data.slice(offset, offset + usernameLength).toString(\"utf8\");\n                        console.log('\\uD83D\\uDCCA username: \"'.concat(username, '\"'));\n                    }\n                    // Now try manual parsing\n                    const profileAccount = manualParseProfile(accountInfo.data);\n                    if (profileAccount) {\n                        console.log(\"✅ Successfully manually parsed profile:\", {\n                            username: profileAccount.username,\n                            bio: profileAccount.bio,\n                            isInitialized: profileAccount.is_initialized === 1,\n                            owner: new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(profileAccount.owner).toString(),\n                            profileImage: profileAccount.profile_image,\n                            coverImage: profileAccount.cover_image,\n                            postsCount: Number(profileAccount.posts_count)\n                        });\n                    } else {\n                        console.log(\"❌ Manual parsing failed\");\n                    }\n                    // Also try Borsh for comparison\n                    try {\n                        const profileAccount = (0,borsh__WEBPACK_IMPORTED_MODULE_1__.deserialize)(profileAccountSchema, ProfileAccount, accountInfo.data);\n                        console.log(\"✅ Borsh deserialization also worked:\", {\n                            username: profileAccount.username,\n                            bio: profileAccount.bio,\n                            isInitialized: profileAccount.is_initialized === 1,\n                            owner: new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(profileAccount.owner).toString()\n                        });\n                    } catch (error) {\n                        console.log(\"❌ Borsh deserialization still fails:\", error);\n                    }\n                } catch (error) {\n                    console.log(\"❌ Error checking PDA:\", error);\n                }\n            } else {\n                console.log(\"❌ Account is owned by different program: \".concat(accountInfo.owner.toString()));\n            }\n        } catch (error) {\n            console.log(\"❌ Error checking PDA:\", error);\n        }\n    };\n    // Manual profile parser - bypasses Borsh deserialization issues\n    const manualParseProfile = (data)=>{\n        try {\n            // Basic validation - profiles should have a minimum size\n            if (data.length < 150) return null // Profiles need at least 150 bytes for basic structure\n            ;\n            let offset = 0;\n            // Parse each field manually\n            const is_initialized = data[offset];\n            if (is_initialized !== 1) return null // Must be initialized\n            ;\n            offset += 1;\n            const owner = data.slice(offset, offset + 32);\n            offset += 32;\n            // Validate we have enough data for username length\n            if (offset + 4 > data.length) return null;\n            // String fields (username, bio, profile_image, cover_image)\n            const usernameLength = data.readUInt32LE(offset);\n            offset += 4;\n            // Validate username length is reasonable\n            if (usernameLength > 100 || usernameLength === 0) return null;\n            if (offset + usernameLength > data.length) return null;\n            const username = data.slice(offset, offset + usernameLength).toString(\"utf8\");\n            offset += usernameLength;\n            // Validate we have enough data for bio length\n            if (offset + 4 > data.length) return null;\n            const bioLength = data.readUInt32LE(offset);\n            offset += 4;\n            // Validate bio length is reasonable\n            if (bioLength > 1000) return null;\n            if (offset + bioLength > data.length) return null;\n            const bio = data.slice(offset, offset + bioLength).toString(\"utf8\");\n            offset += bioLength;\n            // Validate we have enough data for profile image length\n            if (offset + 4 > data.length) return null;\n            const profileImageLength = data.readUInt32LE(offset);\n            offset += 4;\n            // Validate profile image length is reasonable\n            if (profileImageLength > 500) return null;\n            if (offset + profileImageLength > data.length) return null;\n            const profile_image = data.slice(offset, offset + profileImageLength).toString(\"utf8\");\n            offset += profileImageLength;\n            // Validate we have enough data for cover image length\n            if (offset + 4 > data.length) return null;\n            const coverImageLength = data.readUInt32LE(offset);\n            offset += 4;\n            // Validate cover image length is reasonable\n            if (coverImageLength > 500) return null;\n            if (offset + coverImageLength > data.length) return null;\n            const cover_image = data.slice(offset, offset + coverImageLength).toString(\"utf8\");\n            offset += coverImageLength;\n            // Validate we have enough data for all the u64 fields (8 bytes each * 6 fields = 48 bytes)\n            if (offset + 48 > data.length) return null;\n            // u64 fields\n            const created_at = data.readBigUInt64LE(offset);\n            offset += 8;\n            const followers_count = data.readBigUInt64LE(offset);\n            offset += 8;\n            const following_count = data.readBigUInt64LE(offset);\n            offset += 8;\n            // i64 field\n            const user_credit_rating = data.readBigInt64LE(offset);\n            offset += 8;\n            const posts_count = data.readBigUInt64LE(offset);\n            offset += 8;\n            const last_post_timestamp = data.readBigUInt64LE(offset);\n            offset += 8;\n            const daily_post_count = data.readBigUInt64LE(offset);\n            offset += 8;\n            // Validate we have enough data for the final u8 field\n            if (offset + 1 > data.length) return null;\n            const is_verified = data[offset];\n            offset += 1;\n            return new ProfileAccount({\n                is_initialized,\n                owner: new Uint8Array(owner),\n                username,\n                bio,\n                profile_image,\n                cover_image,\n                created_at,\n                followers_count,\n                following_count,\n                user_credit_rating,\n                posts_count,\n                last_post_timestamp,\n                daily_post_count,\n                is_verified\n            });\n        } catch (error) {\n            // Silent failure - not a profile account or invalid data\n            return null;\n        }\n    };\n    // Manual post parser - bypasses Borsh deserialization issues\n    const manualParsePost = (data)=>{\n        try {\n            // Quick validation: posts should have specific size and structure\n            if (data.length < 100) return null // Posts should be larger than profiles\n            ;\n            let offset = 0;\n            // Parse each field manually\n            const is_initialized = data[offset];\n            if (is_initialized !== 1) return null // Must be initialized\n            ;\n            offset += 1;\n            // Check if this looks like a post vs profile by examining the structure\n            // Posts start with: u8 (init), u64 (id), [32]u8 (author), string (content)\n            // Profiles start with: u8 (init), [32]u8 (owner), string (username)\n            const id = data.readBigUInt64LE(offset);\n            offset += 8;\n            const author = data.slice(offset, offset + 32);\n            offset += 32;\n            const contentLength = data.readUInt32LE(offset);\n            offset += 4;\n            // Validate content length is reasonable (not too large)\n            if (contentLength > 10000 || contentLength === 0) return null;\n            if (offset + contentLength > data.length) return null;\n            const content = data.slice(offset, offset + contentLength).toString(\"utf8\");\n            offset += contentLength;\n            // Ensure we have enough remaining data for the rest of the post structure\n            if (offset + 40 > data.length) return null // Need at least 40 more bytes for timestamps and counts\n            ;\n            const timestamp = data.readBigUInt64LE(offset);\n            offset += 8;\n            const likes = data.readBigUInt64LE(offset);\n            offset += 8;\n            const comments = data.readBigUInt64LE(offset);\n            offset += 8;\n            const mirrors = data.readBigUInt64LE(offset);\n            offset += 8;\n            // Parse images array length\n            if (offset + 4 > data.length) return null;\n            const imagesLength = data.readUInt32LE(offset);\n            offset += 4;\n            const images = [];\n            // Parse images array - each image is a length-prefixed string\n            for(let i = 0; i < imagesLength; i++){\n                if (offset + 4 > data.length) return null;\n                const imageLength = data.readUInt32LE(offset);\n                offset += 4;\n                if (offset + imageLength > data.length) return null;\n                const image = data.slice(offset, offset + imageLength).toString(\"utf8\");\n                offset += imageLength;\n                images.push(image);\n            }\n            // Ensure we have enough data for rating and kill zone\n            if (offset + 2 > data.length) return null;\n            const rating = data[offset];\n            offset += 1;\n            const in_kill_zone = data[offset];\n            offset += 1;\n            return new PostAccount({\n                is_initialized,\n                id,\n                author: new Uint8Array(author),\n                content,\n                timestamp,\n                likes,\n                comments,\n                mirrors,\n                images,\n                rating,\n                in_kill_zone\n            });\n        } catch (error) {\n            // Silent failure - not a post account\n            return null;\n        }\n    };\n    // Convert CommunityAccount to Community interface\n    const convertCommunityAccount = (communityAccount)=>{\n        return {\n            isInitialized: communityAccount.is_initialized === 1,\n            id: Number(communityAccount.id),\n            creator: new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(communityAccount.creator),\n            name: communityAccount.name,\n            description: communityAccount.description,\n            avatar: communityAccount.avatar,\n            rules: communityAccount.rules,\n            memberCount: Number(communityAccount.member_count),\n            createdAt: Number(communityAccount.created_at) * 1000,\n            isPrivate: communityAccount.is_private === 1\n        };\n    };\n    // Create Community\n    const createCommunity = async function(name, description, avatar) {\n        let rules = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : [];\n        if (!publicKey) throw new Error(\"Wallet not connected\");\n        try {\n            console.log(\"\\uD83C\\uDFD8️ Creating community:\", name);\n            const balance = await checkSOLBalance();\n            if (balance < 0.05) {\n                throw new Error(\"Insufficient SOL balance: \".concat(balance, \". Need at least 0.05 SOL.\"));\n            }\n            // Generate a keypair for the community account\n            const communityKeypair = _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.Keypair.generate();\n            console.log(\"\\uD83D\\uDCCD Community Account: \".concat(communityKeypair.publicKey.toString()));\n            const instructionData = new CreateCommunityInstruction({\n                name,\n                description,\n                avatar,\n                rules\n            });\n            const createCommunityVariant = Buffer.from([\n                7\n            ]) // CreateCommunity enum index\n            ;\n            const serializedData = (0,borsh__WEBPACK_IMPORTED_MODULE_1__.serialize)(createCommunitySchema, instructionData);\n            const fullInstructionData = Buffer.concat([\n                createCommunityVariant,\n                Buffer.from(serializedData)\n            ]);\n            const instruction = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.TransactionInstruction({\n                keys: [\n                    {\n                        pubkey: publicKey,\n                        isSigner: true,\n                        isWritable: true\n                    },\n                    {\n                        pubkey: communityKeypair.publicKey,\n                        isSigner: true,\n                        isWritable: true\n                    },\n                    {\n                        pubkey: _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.SystemProgram.programId,\n                        isSigner: false,\n                        isWritable: false\n                    }\n                ],\n                programId: PROGRAM_ID,\n                data: fullInstructionData\n            });\n            const transaction = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.Transaction().add(instruction);\n            const { blockhash } = await connection.getLatestBlockhash(\"processed\");\n            transaction.recentBlockhash = blockhash;\n            transaction.feePayer = publicKey;\n            // Sign with community keypair\n            transaction.partialSign(communityKeypair);\n            const signature = await sendTransaction(transaction, connection, {\n                skipPreflight: false,\n                preflightCommitment: \"processed\",\n                maxRetries: 3,\n                signers: [\n                    communityKeypair\n                ]\n            });\n            await connection.confirmTransaction({\n                signature,\n                blockhash,\n                lastValidBlockHeight: (await connection.getLatestBlockhash()).lastValidBlockHeight\n            }, \"processed\");\n            console.log(\"✅ Community created successfully!\");\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__.toast.success('Community \"'.concat(name, '\" created successfully!'));\n            return signature;\n        } catch (error) {\n            console.error(\"❌ Community creation error:\", error);\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__.toast.error(\"Failed to create community: \".concat(error.message || \"Unknown error\"));\n            throw error;\n        }\n    };\n    // Follow Profile\n    const followProfile = async (profilePublicKey)=>{\n        if (!publicKey) throw new Error(\"Wallet not connected\");\n        try {\n            console.log(\"\\uD83D\\uDC65 Following profile:\", profilePublicKey.toString());\n            // Find the follower's profile account (current user's profile)\n            console.log(\"\\uD83D\\uDD0D Searching for follower profile: \".concat(publicKey.toString().slice(0, 8), \"...\"));\n            const accounts = await connection.getProgramAccounts(PROGRAM_ID);\n            let followerProfileAddress = null;\n            for (const { account, pubkey } of accounts){\n                try {\n                    const parsedProfile = manualParseProfile(account.data);\n                    if (parsedProfile && parsedProfile.is_initialized === 1 && new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(parsedProfile.owner).equals(publicKey)) {\n                        followerProfileAddress = pubkey;\n                        console.log(\"\\uD83C\\uDFAF Found follower profile at address: \".concat(pubkey.toString()));\n                        break;\n                    }\n                } catch (error) {\n                    continue;\n                }\n            }\n            if (!followerProfileAddress) {\n                throw new Error(\"Follower profile for \".concat(publicKey.toString().slice(0, 8), \" not found on blockchain. Please create a profile first.\"));\n            }\n            const instructionData = new FollowProfileInstruction({\n                profile_id: profilePublicKey\n            });\n            const followProfileVariant = Buffer.from([\n                5\n            ]) // FollowProfile enum index\n            ;\n            const serializedData = (0,borsh__WEBPACK_IMPORTED_MODULE_1__.serialize)(followProfileSchema, instructionData);\n            const fullInstructionData = Buffer.concat([\n                followProfileVariant,\n                Buffer.from(serializedData)\n            ]);\n            const instruction = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.TransactionInstruction({\n                keys: [\n                    {\n                        pubkey: publicKey,\n                        isSigner: true,\n                        isWritable: false\n                    },\n                    {\n                        pubkey: profilePublicKey,\n                        isSigner: false,\n                        isWritable: true\n                    },\n                    {\n                        pubkey: followerProfileAddress,\n                        isSigner: false,\n                        isWritable: true\n                    }\n                ],\n                programId: PROGRAM_ID,\n                data: fullInstructionData\n            });\n            console.log(\"\\uD83D\\uDD11 Follow transaction accounts:\");\n            console.log(\"  Follower: \".concat(publicKey.toString(), \" (signer, readonly)\"));\n            console.log(\"  Profile to follow: \".concat(profilePublicKey.toString(), \" (not signer, writable)\"));\n            console.log(\"  Follower profile: \".concat(followerProfileAddress.toString(), \" (not signer, writable)\"));\n            const transaction = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.Transaction().add(instruction);\n            const { blockhash } = await connection.getLatestBlockhash(\"processed\");\n            transaction.recentBlockhash = blockhash;\n            transaction.feePayer = publicKey;\n            const signature = await sendTransaction(transaction, connection, {\n                skipPreflight: false,\n                preflightCommitment: \"processed\",\n                maxRetries: 3\n            });\n            await connection.confirmTransaction({\n                signature,\n                blockhash,\n                lastValidBlockHeight: (await connection.getLatestBlockhash()).lastValidBlockHeight\n            }, \"processed\");\n            console.log(\"✅ Follow successful!\");\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__.toast.success(\"Profile followed!\");\n            return signature;\n        } catch (error) {\n            console.error(\"Follow error:\", error);\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__.toast.error(\"Failed to follow profile: \".concat(error.message || \"Unknown error\"));\n            throw error;\n        }\n    };\n    // Unfollow Profile\n    const unfollowProfile = async (profilePublicKey)=>{\n        if (!publicKey) throw new Error(\"Wallet not connected\");\n        try {\n            console.log(\"\\uD83D\\uDC65 Unfollowing profile:\", profilePublicKey.toString());\n            // Find the follower's profile account (current user's profile)\n            console.log(\"\\uD83D\\uDD0D Searching for follower profile: \".concat(publicKey.toString().slice(0, 8), \"...\"));\n            const accounts = await connection.getProgramAccounts(PROGRAM_ID);\n            let followerProfileAddress = null;\n            for (const { account, pubkey } of accounts){\n                try {\n                    const parsedProfile = manualParseProfile(account.data);\n                    if (parsedProfile && parsedProfile.is_initialized === 1 && new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(parsedProfile.owner).equals(publicKey)) {\n                        followerProfileAddress = pubkey;\n                        console.log(\"\\uD83C\\uDFAF Found follower profile at address: \".concat(pubkey.toString()));\n                        break;\n                    }\n                } catch (error) {\n                    continue;\n                }\n            }\n            if (!followerProfileAddress) {\n                throw new Error(\"Follower profile for \".concat(publicKey.toString().slice(0, 8), \" not found on blockchain. Please create a profile first.\"));\n            }\n            const instructionData = new FollowProfileInstruction({\n                profile_id: profilePublicKey\n            });\n            const unfollowProfileVariant = Buffer.from([\n                6\n            ]) // UnfollowProfile enum index\n            ;\n            const serializedData = (0,borsh__WEBPACK_IMPORTED_MODULE_1__.serialize)(followProfileSchema, instructionData);\n            const fullInstructionData = Buffer.concat([\n                unfollowProfileVariant,\n                Buffer.from(serializedData)\n            ]);\n            const instruction = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.TransactionInstruction({\n                keys: [\n                    {\n                        pubkey: publicKey,\n                        isSigner: true,\n                        isWritable: false\n                    },\n                    {\n                        pubkey: profilePublicKey,\n                        isSigner: false,\n                        isWritable: true\n                    },\n                    {\n                        pubkey: followerProfileAddress,\n                        isSigner: false,\n                        isWritable: true\n                    }\n                ],\n                programId: PROGRAM_ID,\n                data: fullInstructionData\n            });\n            console.log(\"\\uD83D\\uDD11 Unfollow transaction accounts:\");\n            console.log(\"  Follower: \".concat(publicKey.toString(), \" (signer, readonly)\"));\n            console.log(\"  Profile to unfollow: \".concat(profilePublicKey.toString(), \" (not signer, writable)\"));\n            console.log(\"  Follower profile: \".concat(followerProfileAddress.toString(), \" (not signer, writable)\"));\n            const transaction = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.Transaction().add(instruction);\n            const { blockhash } = await connection.getLatestBlockhash(\"processed\");\n            transaction.recentBlockhash = blockhash;\n            transaction.feePayer = publicKey;\n            const signature = await sendTransaction(transaction, connection, {\n                skipPreflight: false,\n                preflightCommitment: \"processed\",\n                maxRetries: 3\n            });\n            await connection.confirmTransaction({\n                signature,\n                blockhash,\n                lastValidBlockHeight: (await connection.getLatestBlockhash()).lastValidBlockHeight\n            }, \"processed\");\n            console.log(\"✅ Unfollow successful!\");\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__.toast.success(\"Profile unfollowed!\");\n            return signature;\n        } catch (error) {\n            console.error(\"Unfollow error:\", error);\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__.toast.error(\"Failed to unfollow profile: \".concat(error.message || \"Unknown error\"));\n            throw error;\n        }\n    };\n    // Update Profile\n    const updateProfile = async (username, bio, profileImage, coverImage)=>{\n        if (!publicKey) throw new Error(\"Wallet not connected\");\n        try {\n            console.log(\"\\uD83D\\uDD04 Updating profile:\", username);\n            const instructionData = new CreateProfileInstruction({\n                username,\n                bio,\n                profile_image: profileImage,\n                cover_image: coverImage\n            });\n            const updateProfileVariant = Buffer.from([\n                1\n            ]) // UpdateProfile enum index (same as CreateProfile)\n            ;\n            const serializedData = (0,borsh__WEBPACK_IMPORTED_MODULE_1__.serialize)(createProfileSchema, instructionData);\n            const fullInstructionData = Buffer.concat([\n                updateProfileVariant,\n                Buffer.from(serializedData)\n            ]);\n            const instruction = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.TransactionInstruction({\n                keys: [\n                    {\n                        pubkey: publicKey,\n                        isSigner: true,\n                        isWritable: true\n                    }\n                ],\n                programId: PROGRAM_ID,\n                data: fullInstructionData\n            });\n            const transaction = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.Transaction().add(instruction);\n            const signature = await sendTransaction(transaction, connection);\n            await connection.confirmTransaction(signature, \"processed\");\n            console.log(\"✅ Profile updated successfully!\");\n            // Clear cache to force refresh\n            profileCache.delete(publicKey.toString());\n            return signature;\n        } catch (error) {\n            console.error(\"❌ Update profile error:\", error);\n            throw error;\n        }\n    };\n    // Comment on Post\n    const commentOnPost = async (postId, content, postAuthor)=>{\n        if (!publicKey) throw new Error(\"Wallet not connected\");\n        try {\n            console.log(\"\\uD83D\\uDCAC Commenting on post ID \".concat(postId, \"...\"));\n            // Check SOL balance first\n            const balance = await checkSOLBalance();\n            if (balance < 0.01) {\n                throw new Error(\"Insufficient SOL balance: \".concat(balance, \". Need at least 0.01 SOL for transaction fees.\"));\n            }\n            // Find the parent post account\n            console.log(\"\\uD83D\\uDD0D Searching for post ID \".concat(postId, \"...\"));\n            const accounts = await connection.getProgramAccounts(PROGRAM_ID);\n            let parentPostAddress = null;\n            for (const { account, pubkey } of accounts){\n                try {\n                    const parsedPost = manualParsePost(account.data);\n                    if (parsedPost && parsedPost.is_initialized === 1 && Number(parsedPost.id) === postId && new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(parsedPost.author).equals(postAuthor)) {\n                        parentPostAddress = pubkey;\n                        console.log(\"\\uD83C\\uDFAF Found parent post at address: \".concat(pubkey.toString()));\n                        break;\n                    }\n                } catch (error) {\n                    continue;\n                }\n            }\n            if (!parentPostAddress) {\n                throw new Error(\"Post ID \".concat(postId, \" not found on blockchain\"));\n            }\n            // Find the user's profile account\n            console.log(\"\\uD83D\\uDD0D Searching for user profile: \".concat(publicKey.toString().slice(0, 8), \"...\"));\n            let userProfileAddress = null;\n            for (const { account, pubkey } of accounts){\n                try {\n                    const parsedProfile = manualParseProfile(account.data);\n                    if (parsedProfile && parsedProfile.is_initialized === 1 && new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(parsedProfile.owner).equals(publicKey)) {\n                        userProfileAddress = pubkey;\n                        console.log(\"\\uD83C\\uDFAF Found user profile at address: \".concat(pubkey.toString()));\n                        break;\n                    }\n                } catch (error) {\n                    continue;\n                }\n            }\n            if (!userProfileAddress) {\n                throw new Error(\"User profile not found. Please create a profile first.\");\n            }\n            // Create a new keypair for the comment account\n            const commentKeypair = _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.Keypair.generate();\n            const instructionData = new CommentOnPostInstruction({\n                content,\n                parent_id: BigInt(postId)\n            });\n            const commentVariant = Buffer.from([\n                4\n            ]) // CommentOnPost enum index\n            ;\n            const serializedData = (0,borsh__WEBPACK_IMPORTED_MODULE_1__.serialize)(commentOnPostSchema, instructionData);\n            const fullInstructionData = Buffer.concat([\n                commentVariant,\n                Buffer.from(serializedData)\n            ]);\n            const instruction = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.TransactionInstruction({\n                keys: [\n                    {\n                        pubkey: publicKey,\n                        isSigner: true,\n                        isWritable: false\n                    },\n                    {\n                        pubkey: commentKeypair.publicKey,\n                        isSigner: true,\n                        isWritable: true\n                    },\n                    {\n                        pubkey: parentPostAddress,\n                        isSigner: false,\n                        isWritable: true\n                    },\n                    {\n                        pubkey: userProfileAddress,\n                        isSigner: false,\n                        isWritable: true\n                    },\n                    {\n                        pubkey: _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.SystemProgram.programId,\n                        isSigner: false,\n                        isWritable: false\n                    }\n                ],\n                programId: PROGRAM_ID,\n                data: fullInstructionData\n            });\n            console.log(\"\\uD83D\\uDD11 Comment transaction accounts:\");\n            console.log(\"  User: \".concat(publicKey.toString(), \" (signer, readonly)\"));\n            console.log(\"  Comment: \".concat(commentKeypair.publicKey.toString(), \" (signer, writable)\"));\n            console.log(\"  Parent Post: \".concat(parentPostAddress.toString(), \" (not signer, writable)\"));\n            console.log(\"  User Profile: \".concat(userProfileAddress.toString(), \" (not signer, writable)\"));\n            const transaction = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.Transaction().add(instruction);\n            const { blockhash } = await connection.getLatestBlockhash(\"processed\");\n            transaction.recentBlockhash = blockhash;\n            transaction.feePayer = publicKey;\n            // Sign with comment keypair\n            transaction.partialSign(commentKeypair);\n            const signature = await sendTransaction(transaction, connection, {\n                skipPreflight: false,\n                preflightCommitment: \"processed\",\n                maxRetries: 3,\n                signers: [\n                    commentKeypair\n                ]\n            });\n            await connection.confirmTransaction({\n                signature,\n                blockhash,\n                lastValidBlockHeight: (await connection.getLatestBlockhash()).lastValidBlockHeight\n            }, \"processed\");\n            console.log(\"✅ Comment posted successfully!\");\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__.toast.success(\"Comment posted!\");\n            return signature;\n        } catch (error) {\n            console.error(\"❌ Comment error:\", error);\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__.toast.error(\"Failed to post comment: \".concat(error.message || \"Unknown error\"));\n            throw error;\n        }\n    };\n    // Bookmark Post (Note: This is a client-side feature since Solana contract doesn't have bookmark functionality)\n    const bookmarkPost = async (postId)=>{\n        if (!publicKey) throw new Error(\"Wallet not connected\");\n        try {\n            console.log(\"\\uD83D\\uDD16 Bookmarking post ID \".concat(postId, \"...\"));\n            // Get current bookmarks from localStorage\n            const bookmarksKey = \"bookmarks_\".concat(publicKey.toString());\n            const existingBookmarks = localStorage.getItem(bookmarksKey);\n            let bookmarks = existingBookmarks ? JSON.parse(existingBookmarks) : [];\n            // Check if already bookmarked\n            if (bookmarks.includes(postId)) {\n                // Remove bookmark\n                bookmarks = bookmarks.filter((id)=>id !== postId);\n                localStorage.setItem(bookmarksKey, JSON.stringify(bookmarks));\n                react_hot_toast__WEBPACK_IMPORTED_MODULE_2__.toast.success(\"Bookmark removed!\");\n                console.log(\"✅ Bookmark removed successfully!\");\n                return \"removed\";\n            } else {\n                // Add bookmark\n                bookmarks.push(postId);\n                localStorage.setItem(bookmarksKey, JSON.stringify(bookmarks));\n                react_hot_toast__WEBPACK_IMPORTED_MODULE_2__.toast.success(\"Post bookmarked!\");\n                console.log(\"✅ Post bookmarked successfully!\");\n                return \"added\";\n            }\n        } catch (error) {\n            console.error(\"❌ Bookmark error:\", error);\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__.toast.error(\"Failed to bookmark post: \".concat(error.message || \"Unknown error\"));\n            throw error;\n        }\n    };\n    // Get user bookmarks\n    const getUserBookmarks = ()=>{\n        if (!publicKey) return [];\n        try {\n            const bookmarksKey = \"bookmarks_\".concat(publicKey.toString());\n            const existingBookmarks = localStorage.getItem(bookmarksKey);\n            return existingBookmarks ? JSON.parse(existingBookmarks) : [];\n        } catch (error) {\n            console.error(\"Error getting bookmarks:\", error);\n            return [];\n        }\n    };\n    // Check if post is bookmarked\n    const isPostBookmarked = (postId)=>{\n        const bookmarks = getUserBookmarks();\n        return bookmarks.includes(postId);\n    };\n    // Utility function to preload profile on wallet connection\n    const preloadProfile = async ()=>{\n        if (!publicKey) return;\n        console.log(\"\\uD83D\\uDE80 Preloading profile on wallet connection...\");\n        try {\n            await getProfile(publicKey);\n        } catch (error) {\n            console.warn(\"Failed to preload profile:\", error);\n        }\n    };\n    return {\n        createProfile,\n        createPost,\n        likePost,\n        commentOnPost,\n        bookmarkPost,\n        getUserBookmarks,\n        isPostBookmarked,\n        getProfile,\n        getProfileByUsername,\n        getPosts,\n        getProfilePDA,\n        getPostPDA,\n        checkProfileAtPDA,\n        preloadProfile,\n        clearProfileCache,\n        createCommunity,\n        followProfile,\n        unfollowProfile,\n        updateProfile\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./hooks/useBlocksProgram.ts\n"));

/***/ })

});