"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/layout",{

/***/ "(app-pages-browser)/./hooks/useBlocksProgram.ts":
/*!***********************************!*\
  !*** ./hooks/useBlocksProgram.ts ***!
  \***********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PostRating: function() { return /* binding */ PostRating; },\n/* harmony export */   useBlocksProgram: function() { return /* binding */ useBlocksProgram; }\n/* harmony export */ });\n/* harmony import */ var _solana_wallet_adapter_react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @solana/wallet-adapter-react */ \"(app-pages-browser)/./node_modules/@solana/wallet-adapter-react/lib/esm/useConnection.js\");\n/* harmony import */ var _solana_wallet_adapter_react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @solana/wallet-adapter-react */ \"(app-pages-browser)/./node_modules/@solana/wallet-adapter-react/lib/esm/useWallet.js\");\n/* harmony import */ var _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @solana/web3.js */ \"(app-pages-browser)/./node_modules/@solana/web3.js/lib/index.browser.esm.js\");\n/* harmony import */ var borsh__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! borsh */ \"(app-pages-browser)/./node_modules/borsh/lib/index.js\");\n/* harmony import */ var borsh__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(borsh__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react_hot_toast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-hot-toast */ \"(app-pages-browser)/./node_modules/react-hot-toast/dist/index.mjs\");\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/config */ \"(app-pages-browser)/./config/index.ts\");\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"(app-pages-browser)/./node_modules/buffer/index.js\")[\"Buffer\"];\n\n\n\n\n\n// Your deployed program ID - configured from environment\nconst PROGRAM_ID = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(_config__WEBPACK_IMPORTED_MODULE_3__.config.solana.programId);\n// Add debug mode for testing without actual blockchain transactions\nconst DEBUG_MODE = \"development\" === \"development\";\nvar ContractInstruction;\n// Instruction enum matching your Rust contract\n(function(ContractInstruction) {\n    ContractInstruction[ContractInstruction[\"CreateProfile\"] = 0] = \"CreateProfile\";\n    ContractInstruction[ContractInstruction[\"UpdateProfile\"] = 1] = \"UpdateProfile\";\n    ContractInstruction[ContractInstruction[\"CreatePost\"] = 2] = \"CreatePost\";\n    ContractInstruction[ContractInstruction[\"LikePost\"] = 3] = \"LikePost\";\n    ContractInstruction[ContractInstruction[\"CommentOnPost\"] = 4] = \"CommentOnPost\";\n    ContractInstruction[ContractInstruction[\"FollowProfile\"] = 5] = \"FollowProfile\";\n    ContractInstruction[ContractInstruction[\"UnfollowProfile\"] = 6] = \"UnfollowProfile\";\n    ContractInstruction[ContractInstruction[\"CreateCommunity\"] = 7] = \"CreateCommunity\";\n    ContractInstruction[ContractInstruction[\"JoinCommunity\"] = 8] = \"JoinCommunity\";\n})(ContractInstruction || (ContractInstruction = {}));\nvar PostRating;\n(function(PostRating) {\n    PostRating[PostRating[\"None\"] = 0] = \"None\";\n    PostRating[PostRating[\"Bronze\"] = 1] = \"Bronze\";\n    PostRating[PostRating[\"Silver\"] = 2] = \"Silver\";\n    PostRating[PostRating[\"Gold\"] = 3] = \"Gold\";\n    PostRating[PostRating[\"Platinum\"] = 4] = \"Platinum\";\n    PostRating[PostRating[\"Diamond\"] = 5] = \"Diamond\";\n    PostRating[PostRating[\"Ace\"] = 6] = \"Ace\";\n    PostRating[PostRating[\"Conqueror\"] = 7] = \"Conqueror\";\n})(PostRating || (PostRating = {}));\n// Create Profile instruction data class\nclass CreateProfileInstruction {\n    constructor(fields){\n        this.username = fields.username;\n        this.bio = fields.bio;\n        this.profile_image = fields.profile_image;\n        this.cover_image = fields.cover_image;\n    }\n}\n// Create Post instruction data class\nclass CreatePostInstruction {\n    constructor(fields){\n        this.content = fields.content;\n        this.images = fields.images;\n    }\n}\n// Like Post instruction data class\nclass LikePostInstruction {\n    constructor(fields){\n        this.post_id = fields.post_id;\n    }\n}\n// Profile struct for deserialization - matching Rust exactly\nclass ProfileAccount {\n    constructor(fields){\n        this.is_initialized = fields.is_initialized;\n        this.owner = fields.owner;\n        this.username = fields.username;\n        this.bio = fields.bio;\n        this.profile_image = fields.profile_image;\n        this.cover_image = fields.cover_image;\n        this.created_at = fields.created_at;\n        this.followers_count = fields.followers_count;\n        this.following_count = fields.following_count;\n        this.user_credit_rating = fields.user_credit_rating;\n        this.posts_count = fields.posts_count;\n        this.last_post_timestamp = fields.last_post_timestamp;\n        this.daily_post_count = fields.daily_post_count;\n        this.is_verified = fields.is_verified;\n    }\n}\n// Post struct for deserialization - matching Rust exactly\nclass PostAccount {\n    constructor(fields){\n        this.is_initialized = fields.is_initialized;\n        this.id = fields.id;\n        this.author = fields.author;\n        this.content = fields.content;\n        this.timestamp = fields.timestamp;\n        this.likes = fields.likes;\n        this.comments = fields.comments;\n        this.mirrors = fields.mirrors;\n        this.images = fields.images;\n        this.rating = fields.rating;\n        this.in_kill_zone = fields.in_kill_zone;\n    }\n}\n// Borsh schemas\nconst createProfileSchema = new Map([\n    [\n        CreateProfileInstruction,\n        {\n            kind: \"struct\",\n            fields: [\n                [\n                    \"username\",\n                    \"string\"\n                ],\n                [\n                    \"bio\",\n                    \"string\"\n                ],\n                [\n                    \"profile_image\",\n                    \"string\"\n                ],\n                [\n                    \"cover_image\",\n                    \"string\"\n                ]\n            ]\n        }\n    ]\n]);\nconst createPostSchema = new Map([\n    [\n        CreatePostInstruction,\n        {\n            kind: \"struct\",\n            fields: [\n                [\n                    \"content\",\n                    \"string\"\n                ],\n                [\n                    \"images\",\n                    [\n                        \"string\"\n                    ]\n                ]\n            ]\n        }\n    ]\n]);\nconst likePostSchema = new Map([\n    [\n        LikePostInstruction,\n        {\n            kind: \"struct\",\n            fields: [\n                [\n                    \"post_id\",\n                    \"u64\"\n                ]\n            ]\n        }\n    ]\n]);\nconst profileAccountSchema = new Map([\n    [\n        ProfileAccount,\n        {\n            kind: \"struct\",\n            fields: [\n                [\n                    \"is_initialized\",\n                    \"u8\"\n                ],\n                [\n                    \"owner\",\n                    [\n                        32\n                    ]\n                ],\n                [\n                    \"username\",\n                    \"string\"\n                ],\n                [\n                    \"bio\",\n                    \"string\"\n                ],\n                [\n                    \"profile_image\",\n                    \"string\"\n                ],\n                [\n                    \"cover_image\",\n                    \"string\"\n                ],\n                [\n                    \"created_at\",\n                    \"u64\"\n                ],\n                [\n                    \"followers_count\",\n                    \"u64\"\n                ],\n                [\n                    \"following_count\",\n                    \"u64\"\n                ],\n                [\n                    \"user_credit_rating\",\n                    \"i64\"\n                ],\n                [\n                    \"posts_count\",\n                    \"u64\"\n                ],\n                [\n                    \"last_post_timestamp\",\n                    \"u64\"\n                ],\n                [\n                    \"daily_post_count\",\n                    \"u64\"\n                ],\n                [\n                    \"is_verified\",\n                    \"u8\"\n                ]\n            ]\n        }\n    ]\n]);\nconst postAccountSchema = new Map([\n    [\n        PostAccount,\n        {\n            kind: \"struct\",\n            fields: [\n                [\n                    \"is_initialized\",\n                    \"u8\"\n                ],\n                [\n                    \"id\",\n                    \"u64\"\n                ],\n                [\n                    \"author\",\n                    [\n                        32\n                    ]\n                ],\n                [\n                    \"content\",\n                    \"string\"\n                ],\n                [\n                    \"timestamp\",\n                    \"u64\"\n                ],\n                [\n                    \"likes\",\n                    \"u64\"\n                ],\n                [\n                    \"comments\",\n                    \"u64\"\n                ],\n                [\n                    \"mirrors\",\n                    \"u64\"\n                ],\n                [\n                    \"images\",\n                    [\n                        \"string\"\n                    ]\n                ],\n                [\n                    \"rating\",\n                    \"u8\"\n                ],\n                [\n                    \"in_kill_zone\",\n                    \"u8\"\n                ]\n            ]\n        }\n    ]\n]);\n// Community struct for deserialization\nclass CommunityAccount {\n    constructor(fields){\n        this.is_initialized = fields.is_initialized;\n        this.id = fields.id;\n        this.creator = fields.creator;\n        this.name = fields.name;\n        this.description = fields.description;\n        this.avatar = fields.avatar;\n        this.rules = fields.rules;\n        this.member_count = fields.member_count;\n        this.created_at = fields.created_at;\n        this.is_private = fields.is_private;\n    }\n}\n// Create Community instruction\nclass CreateCommunityInstruction {\n    constructor(fields){\n        this.name = fields.name;\n        this.description = fields.description;\n        this.avatar = fields.avatar;\n        this.rules = fields.rules;\n    }\n}\n// Follow Profile instruction\nclass FollowProfileInstruction {\n    constructor(fields){\n        this.profile_id = fields.profile_id.toBuffer();\n    }\n}\nconst createCommunitySchema = new Map([\n    [\n        CreateCommunityInstruction,\n        {\n            kind: \"struct\",\n            fields: [\n                [\n                    \"name\",\n                    \"string\"\n                ],\n                [\n                    \"description\",\n                    \"string\"\n                ],\n                [\n                    \"avatar\",\n                    \"string\"\n                ],\n                [\n                    \"rules\",\n                    [\n                        \"string\"\n                    ]\n                ]\n            ]\n        }\n    ]\n]);\nconst followProfileSchema = new Map([\n    [\n        FollowProfileInstruction,\n        {\n            kind: \"struct\",\n            fields: [\n                [\n                    \"profile_id\",\n                    [\n                        32\n                    ]\n                ]\n            ]\n        }\n    ]\n]);\nconst communityAccountSchema = new Map([\n    [\n        CommunityAccount,\n        {\n            kind: \"struct\",\n            fields: [\n                [\n                    \"is_initialized\",\n                    \"u8\"\n                ],\n                [\n                    \"id\",\n                    \"u64\"\n                ],\n                [\n                    \"creator\",\n                    [\n                        32\n                    ]\n                ],\n                [\n                    \"name\",\n                    \"string\"\n                ],\n                [\n                    \"description\",\n                    \"string\"\n                ],\n                [\n                    \"avatar\",\n                    \"string\"\n                ],\n                [\n                    \"rules\",\n                    [\n                        \"string\"\n                    ]\n                ],\n                [\n                    \"member_count\",\n                    \"u64\"\n                ],\n                [\n                    \"created_at\",\n                    \"u64\"\n                ],\n                [\n                    \"is_private\",\n                    \"u8\"\n                ]\n            ]\n        }\n    ]\n]);\n// Cache for profile lookups to avoid repeated blockchain calls\nconst profileCache = new Map();\nconst CACHE_DURATION = 60000 // 1 minute for memory cache (increased from 30 seconds)\n;\n// Posts cache\nlet postsCache = null;\nconst POSTS_CACHE_DURATION = 30000 // 30 seconds for posts cache (increased from 10 seconds)\n;\n// localStorage cache configuration - Updated to support multiple profiles\nconst LOCALSTORAGE_CACHE_PREFIX = \"blocks_profile_\";\nconst LOCALSTORAGE_CACHE_DURATION = 10 * 60 * 1000 // 10 minutes for localStorage cache (increased from 5 minutes)\n;\n// localStorage cache utilities - Updated to support multiple profiles\nconst saveProfileToLocalStorage = (walletAddress, profile)=>{\n    try {\n        const cacheKey = \"\".concat(LOCALSTORAGE_CACHE_PREFIX).concat(walletAddress);\n        const cacheData = {\n            profile,\n            timestamp: Date.now(),\n            walletAddress\n        };\n        localStorage.setItem(cacheKey, JSON.stringify(cacheData));\n        console.log(\"\\uD83D\\uDCBE Profile cached to localStorage for \".concat(walletAddress.slice(0, 8)));\n    } catch (error) {\n        console.warn(\"Failed to save profile to localStorage:\", error);\n    }\n};\nconst getProfileFromLocalStorage = (walletAddress)=>{\n    try {\n        const cacheKey = \"\".concat(LOCALSTORAGE_CACHE_PREFIX).concat(walletAddress);\n        const cached = localStorage.getItem(cacheKey);\n        if (!cached) return null;\n        const cacheData = JSON.parse(cached);\n        // Check if cache is expired\n        if (Date.now() - cacheData.timestamp > LOCALSTORAGE_CACHE_DURATION) {\n            console.log(\"⏰ Cache expired for \".concat(walletAddress.slice(0, 8), \", clearing\"));\n            localStorage.removeItem(cacheKey);\n            return null;\n        }\n        console.log(\"⚡ Using cached profile from localStorage for \".concat(walletAddress.slice(0, 8)));\n        return cacheData.profile;\n    } catch (error) {\n        console.warn(\"Failed to read profile from localStorage:\", error);\n        const cacheKey = \"\".concat(LOCALSTORAGE_CACHE_PREFIX).concat(walletAddress);\n        localStorage.removeItem(cacheKey);\n        return null;\n    }\n};\nconst clearProfileCache = (walletAddress)=>{\n    // Clear memory cache\n    if (walletAddress) {\n        profileCache.delete(walletAddress);\n        // Clear localStorage cache for specific user\n        const cacheKey = \"\".concat(LOCALSTORAGE_CACHE_PREFIX).concat(walletAddress);\n        localStorage.removeItem(cacheKey);\n    } else {\n        profileCache.clear();\n        // Clear all localStorage profile caches\n        const keys = Object.keys(localStorage);\n        keys.forEach((key)=>{\n            if (key.startsWith(LOCALSTORAGE_CACHE_PREFIX)) {\n                localStorage.removeItem(key);\n            }\n        });\n    }\n    // Clear posts cache\n    postsCache = null;\n    console.log(\"\\uD83D\\uDDD1️ Profile and posts cache cleared\");\n};\nfunction useBlocksProgram() {\n    const { connection } = (0,_solana_wallet_adapter_react__WEBPACK_IMPORTED_MODULE_4__.useConnection)();\n    const { publicKey, sendTransaction } = (0,_solana_wallet_adapter_react__WEBPACK_IMPORTED_MODULE_5__.useWallet)();\n    // Get profile PDA\n    const getProfilePDA = async (userPublicKey, username)=>{\n        const [profilePDA] = await _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey.findProgramAddress([\n            userPublicKey.toBuffer(),\n            Buffer.from(\"profile\"),\n            Buffer.from(username)\n        ], PROGRAM_ID);\n        return profilePDA;\n    };\n    // Get post PDA\n    const getPostPDA = async (userPublicKey, postId)=>{\n        const [postPDA] = await _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey.findProgramAddress([\n            userPublicKey.toBuffer(),\n            Buffer.from(\"post\"),\n            Buffer.from(postId.toString())\n        ], PROGRAM_ID);\n        return postPDA;\n    };\n    // Helper function to check if program exists\n    const checkProgramExists = async ()=>{\n        try {\n            const programInfo = await connection.getAccountInfo(PROGRAM_ID);\n            return programInfo !== null && programInfo.executable;\n        } catch (error) {\n            console.error(\"Error checking program existence:\", error);\n            return false;\n        }\n    };\n    // Helper function to check SOL balance\n    const checkSOLBalance = async ()=>{\n        if (!publicKey) return 0;\n        try {\n            const balance = await connection.getBalance(publicKey);\n            return balance / _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.LAMPORTS_PER_SOL;\n        } catch (error) {\n            console.error(\"Error checking SOL balance:\", error);\n            return 0;\n        }\n    };\n    // Convert ProfileAccount to Profile interface\n    const convertProfileAccount = (profileAccount)=>{\n        // Calculate UCR based on activity\n        const calculateUCR = (profile)=>{\n            const postsCount = Number(profile.posts_count);\n            const followersCount = Number(profile.followers_count);\n            const followingCount = Number(profile.following_count);\n            // Base UCR calculation algorithm\n            let ucr = 1.0 // Start with base rating\n            ;\n            // Posts factor (0.1 points per post, max 2.0 points)\n            const postsScore = Math.min(postsCount * 0.1, 2.0);\n            // Followers factor (0.05 points per follower, max 1.5 points)\n            const followersScore = Math.min(followersCount * 0.05, 1.5);\n            // Following/followers ratio (healthy ratio = bonus)\n            let ratioBonus = 0;\n            if (followersCount > 0 && followingCount > 0) {\n                const ratio = followersCount / followingCount;\n                if (ratio >= 0.5 && ratio <= 2.0) {\n                    ratioBonus = 0.3;\n                }\n            }\n            // Account age factor (older accounts get bonus)\n            const accountAge = Date.now() - Number(profile.created_at) * 1000;\n            const daysOld = accountAge / (1000 * 60 * 60 * 24);\n            const ageBonus = Math.min(daysOld / 30 * 0.2, 1.0) // 0.2 points per month, max 1.0\n            ;\n            // Verification bonus\n            const verificationBonus = profile.is_verified === 1 ? 0.5 : 0;\n            // Activity factor (posting regularly)\n            const lastPostAge = Date.now() - Number(profile.last_post_timestamp) * 1000;\n            const daysSinceLastPost = lastPostAge / (1000 * 60 * 60 * 24);\n            const activityBonus = daysSinceLastPost < 7 ? 0.3 : daysSinceLastPost < 30 ? 0.1 : 0;\n            ucr = ucr + postsScore + followersScore + ratioBonus + ageBonus + verificationBonus + activityBonus;\n            // Cap at 5.0 max\n            return Math.min(ucr, 5.0);\n        };\n        return {\n            isInitialized: profileAccount.is_initialized === 1,\n            owner: new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(profileAccount.owner),\n            username: profileAccount.username,\n            bio: profileAccount.bio,\n            profileImage: profileAccount.profile_image,\n            coverImage: profileAccount.cover_image,\n            createdAt: Number(profileAccount.created_at) * 1000,\n            followersCount: Number(profileAccount.followers_count),\n            followingCount: Number(profileAccount.following_count),\n            userCreditRating: calculateUCR(profileAccount),\n            postsCount: Number(profileAccount.posts_count),\n            lastPostTimestamp: Number(profileAccount.last_post_timestamp) * 1000,\n            dailyPostCount: Number(profileAccount.daily_post_count),\n            isVerified: profileAccount.is_verified === 1\n        };\n    };\n    // Convert PostAccount to Post interface\n    const convertPostAccount = (postAccount)=>{\n        return {\n            isInitialized: postAccount.is_initialized === 1,\n            id: Number(postAccount.id),\n            author: new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(postAccount.author),\n            content: postAccount.content,\n            timestamp: Number(postAccount.timestamp) * 1000,\n            likes: Number(postAccount.likes),\n            comments: Number(postAccount.comments),\n            mirrors: Number(postAccount.mirrors),\n            images: postAccount.images,\n            rating: postAccount.rating,\n            inKillZone: postAccount.in_kill_zone === 1\n        };\n    };\n    // Create user profile - REAL IMPLEMENTATION\n    const createProfile = async (username, bio, profileImage, coverImage)=>{\n        if (!publicKey) throw new Error(\"Wallet not connected\");\n        try {\n            console.log(\"\\uD83D\\uDD0D Running pre-flight checks...\");\n            const balance = await checkSOLBalance();\n            console.log(\"\\uD83D\\uDCB0 SOL Balance: \".concat(balance));\n            if (balance < 0.1) {\n                throw new Error(\"Insufficient SOL balance: \".concat(balance, \". You need at least 0.1 SOL for transaction fees and account creation.\"));\n            }\n            const programExists = await checkProgramExists();\n            console.log(\"\\uD83D\\uDCCB Program exists: \".concat(programExists));\n            if (!programExists) {\n                throw new Error(\"Program not found at address: \".concat(PROGRAM_ID.toString(), \". Make sure the program is deployed on \").concat(_config__WEBPACK_IMPORTED_MODULE_3__.config.solana.network, \".\"));\n            }\n            console.log(\"✅ Pre-flight checks passed\");\n            const profilePDA = await getProfilePDA(publicKey, username);\n            console.log(\"\\uD83D\\uDCCD Profile PDA: \".concat(profilePDA.toString()));\n            const instructionData = new CreateProfileInstruction({\n                username,\n                bio,\n                profile_image: profileImage,\n                cover_image: coverImage\n            });\n            const createProfileVariant = Buffer.from([\n                0\n            ]);\n            const serializedData = (0,borsh__WEBPACK_IMPORTED_MODULE_1__.serialize)(createProfileSchema, instructionData);\n            const fullInstructionData = Buffer.concat([\n                createProfileVariant,\n                Buffer.from(serializedData)\n            ]);\n            const instruction = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.TransactionInstruction({\n                keys: [\n                    {\n                        pubkey: publicKey,\n                        isSigner: true,\n                        isWritable: true\n                    },\n                    {\n                        pubkey: profilePDA,\n                        isSigner: false,\n                        isWritable: true\n                    },\n                    {\n                        pubkey: _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.SystemProgram.programId,\n                        isSigner: false,\n                        isWritable: false\n                    }\n                ],\n                programId: PROGRAM_ID,\n                data: fullInstructionData\n            });\n            const transaction = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.Transaction().add(instruction);\n            const { blockhash } = await connection.getLatestBlockhash(\"processed\");\n            transaction.recentBlockhash = blockhash;\n            transaction.feePayer = publicKey;\n            const simulation = await connection.simulateTransaction(transaction);\n            if (simulation.value.err) {\n                throw new Error(\"Transaction simulation failed: \".concat(JSON.stringify(simulation.value.err)));\n            }\n            const signature = await sendTransaction(transaction, connection, {\n                skipPreflight: false,\n                preflightCommitment: \"processed\",\n                maxRetries: 3\n            });\n            await connection.confirmTransaction({\n                signature,\n                blockhash,\n                lastValidBlockHeight: (await connection.getLatestBlockhash()).lastValidBlockHeight\n            }, \"processed\");\n            // Invalidate cache after profile creation\n            clearProfileCache(publicKey.toString());\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__.toast.success(\"Profile created successfully!\");\n            return signature;\n        } catch (error) {\n            console.error(\"❌ Profile creation error:\", error);\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__.toast.error(\"Transaction failed: \".concat(error.message || \"Unknown error\"));\n            throw error;\n        }\n    };\n    // Production-ready profile detection with localStorage caching - Improved for multiple users\n    const getProfile = async (userPublicKey)=>{\n        const cacheKey = userPublicKey.toString();\n        try {\n            // 1. Check localStorage cache first (fastest)\n            const cachedProfile = getProfileFromLocalStorage(cacheKey);\n            if (cachedProfile !== null) {\n                // Also update memory cache\n                profileCache.set(cacheKey, cachedProfile);\n                setTimeout(()=>profileCache.delete(cacheKey), CACHE_DURATION);\n                return cachedProfile;\n            }\n            // 2. Check memory cache\n            if (profileCache.has(cacheKey)) {\n                const cached = profileCache.get(cacheKey);\n                return cached !== null && cached !== void 0 ? cached : null;\n            }\n            // 3. Fetch from blockchain (slowest)\n            console.log(\"\\uD83D\\uDD0D Fetching profile from blockchain for: \".concat(userPublicKey.toString().slice(0, 8), \"...\"));\n            const accounts = await connection.getProgramAccounts(PROGRAM_ID);\n            console.log(\"\\uD83D\\uDCCA Found \".concat(accounts.length, \" program accounts to scan for profiles\"));\n            let profilesFound = 0;\n            // Scan through accounts to find user's profile\n            for (const { account, pubkey } of accounts){\n                try {\n                    if (account.data.length === 0) continue;\n                    // Try manual parsing first\n                    const profileAccount = manualParseProfile(account.data);\n                    if (!profileAccount) continue;\n                    profilesFound++;\n                    const accountOwner = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(profileAccount.owner);\n                    // Check if this profile belongs to the user we're looking for\n                    if (profileAccount.is_initialized === 1 && accountOwner.equals(userPublicKey)) {\n                        console.log('\\uD83C\\uDFAF FOUND PROFILE! Username: \"'.concat(profileAccount.username, '\" for ').concat(userPublicKey.toString().slice(0, 8)));\n                        console.log('\\uD83D\\uDCF8 Profile Image URL: \"'.concat(profileAccount.profile_image, '\"'));\n                        console.log('\\uD83D\\uDDBC️ Cover Image URL: \"'.concat(profileAccount.cover_image, '\"'));\n                        console.log(\"\\uD83D\\uDCCA Profile Data:\", {\n                            username: profileAccount.username,\n                            bio: profileAccount.bio,\n                            profileImage: profileAccount.profile_image,\n                            coverImage: profileAccount.cover_image,\n                            postsCount: Number(profileAccount.posts_count),\n                            followersCount: Number(profileAccount.followers_count),\n                            isVerified: profileAccount.is_verified === 1\n                        });\n                        const profile = convertProfileAccount(profileAccount);\n                        // Cache in both memory and localStorage\n                        profileCache.set(cacheKey, profile);\n                        setTimeout(()=>profileCache.delete(cacheKey), CACHE_DURATION);\n                        saveProfileToLocalStorage(cacheKey, profile);\n                        return profile;\n                    }\n                } catch (error) {\n                    continue;\n                }\n            }\n            console.log(\"\\uD83D\\uDCCA Scanned \".concat(profilesFound, \" profiles, no match found for user: \").concat(userPublicKey.toString().slice(0, 8)));\n            // No profile found - cache null result to avoid repeated scans\n            profileCache.set(cacheKey, null);\n            setTimeout(()=>profileCache.delete(cacheKey), CACHE_DURATION);\n            saveProfileToLocalStorage(cacheKey, null);\n            return null;\n        } catch (error) {\n            console.error(\"Error fetching profile for \".concat(userPublicKey.toString().slice(0, 8), \":\"), error);\n            return null;\n        }\n    };\n    // Get profile by username (for specific lookups)\n    const getProfileByUsername = async (userPublicKey, username)=>{\n        try {\n            const profilePDA = await getProfilePDA(userPublicKey, username);\n            const accountInfo = await connection.getAccountInfo(profilePDA);\n            if (!accountInfo || !accountInfo.data || accountInfo.data.length === 0) {\n                return null;\n            }\n            // Now try manual parsing\n            const profileAccount = manualParseProfile(accountInfo.data);\n            if (profileAccount) {\n                console.log(\"✅ Successfully manually parsed profile:\", {\n                    username: profileAccount.username,\n                    bio: profileAccount.bio,\n                    isInitialized: profileAccount.is_initialized === 1,\n                    owner: new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(profileAccount.owner).toString(),\n                    profileImage: profileAccount.profile_image,\n                    coverImage: profileAccount.cover_image,\n                    postsCount: Number(profileAccount.posts_count)\n                });\n                return convertProfileAccount(profileAccount);\n            } else {\n                console.log(\"❌ Manual parsing failed\");\n                return null;\n            }\n        } catch (error) {\n            return null;\n        }\n    };\n    // Get posts - REAL IMPLEMENTATION with manual parsing and caching\n    const getPosts = async ()=>{\n        try {\n            // Check cache first\n            if (postsCache && Date.now() - postsCache.timestamp < POSTS_CACHE_DURATION) {\n                console.log(\"⚡ Using cached posts\");\n                return postsCache.posts;\n            }\n            console.log(\"\\uD83D\\uDD0D Fetching posts from blockchain...\");\n            const accounts = await connection.getProgramAccounts(PROGRAM_ID);\n            const posts = [];\n            console.log(\"\\uD83D\\uDCCA Scanning \".concat(accounts.length, \" program accounts for posts...\"));\n            for (const { account, pubkey } of accounts){\n                try {\n                    if (account.data.length === 0) continue;\n                    // Try manual post parsing first\n                    const postAccount = manualParsePost(account.data);\n                    if (postAccount && postAccount.is_initialized === 1 && postAccount.content) {\n                        const post = convertPostAccount(postAccount);\n                        posts.push(post);\n                        console.log('\\uD83D\\uDCDD Found post: \"'.concat(post.content.substring(0, 50), '...\" by ').concat(post.author.toString()));\n                    }\n                } catch (error) {\n                    continue;\n                }\n            }\n            posts.sort((a, b)=>b.timestamp - a.timestamp);\n            console.log(\"✅ Loaded \".concat(posts.length, \" posts from blockchain\"));\n            // Cache the results\n            postsCache = {\n                posts,\n                timestamp: Date.now()\n            };\n            return posts;\n        } catch (error) {\n            console.error(\"Error fetching posts:\", error);\n            return [];\n        }\n    };\n    // Create post - REAL IMPLEMENTATION\n    const createPost = async function(content) {\n        let images = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];\n        if (!publicKey) throw new Error(\"Wallet not connected\");\n        try {\n            console.log(\"\\uD83D\\uDD0D Creating post with content:\", content);\n            // Check SOL balance\n            const balance = await checkSOLBalance();\n            if (balance < 0.05) {\n                throw new Error(\"Insufficient SOL balance: \".concat(balance, \". You need at least 0.05 SOL for transaction fees and account creation.\"));\n            }\n            // Get user's profile PDA - we need this for the instruction\n            const userProfile = await getProfile(publicKey);\n            if (!userProfile) {\n                throw new Error(\"You must create a profile before posting\");\n            }\n            // Get user's current post count to generate the correct post ID\n            // The Rust contract increments posts_count first, then uses that as the post ID\n            const postId = userProfile.postsCount + 1;\n            const postPDA = await getPostPDA(publicKey, postId);\n            console.log(\"\\uD83D\\uDCCD Post PDA: \".concat(postPDA.toString(), \" for post ID: \").concat(postId));\n            // Generate a new keypair for the post account\n            // The Rust contract uses invoke with system_instruction::create_account\n            // This means the post account MUST be a keypair that signs the transaction\n            const postKeypair = _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.Keypair.generate();\n            console.log(\"\\uD83D\\uDCCD Post Account: \".concat(postKeypair.publicKey.toString()));\n            // Get profile PDA for the user (we need the actual username)\n            // Try to find the profile account among all program accounts\n            const accounts = await connection.getProgramAccounts(PROGRAM_ID);\n            let userProfilePDA = null;\n            for (const { account, pubkey } of accounts){\n                try {\n                    const profileAccount = manualParseProfile(account.data);\n                    if (profileAccount && profileAccount.is_initialized === 1 && new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(profileAccount.owner).equals(publicKey)) {\n                        userProfilePDA = pubkey;\n                        console.log(\"\\uD83D\\uDCCD User Profile PDA: \".concat(userProfilePDA.toString()));\n                        break;\n                    }\n                } catch (error) {\n                    continue;\n                }\n            }\n            if (!userProfilePDA) {\n                throw new Error(\"Could not find your profile PDA. Please refresh and try again.\");\n            }\n            const instructionData = new CreatePostInstruction({\n                content,\n                images\n            });\n            const createPostVariant = Buffer.from([\n                2\n            ]) // CreatePost enum index\n            ;\n            const serializedData = (0,borsh__WEBPACK_IMPORTED_MODULE_1__.serialize)(createPostSchema, instructionData);\n            const fullInstructionData = Buffer.concat([\n                createPostVariant,\n                Buffer.from(serializedData)\n            ]);\n            console.log(\"\\uD83D\\uDD22 Instruction data length: \".concat(fullInstructionData.length, \" bytes\"));\n            const instruction = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.TransactionInstruction({\n                keys: [\n                    {\n                        pubkey: publicKey,\n                        isSigner: true,\n                        isWritable: true\n                    },\n                    {\n                        pubkey: postKeypair.publicKey,\n                        isSigner: true,\n                        isWritable: true\n                    },\n                    {\n                        pubkey: userProfilePDA,\n                        isSigner: false,\n                        isWritable: true\n                    },\n                    {\n                        pubkey: _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.SystemProgram.programId,\n                        isSigner: false,\n                        isWritable: false\n                    }\n                ],\n                programId: PROGRAM_ID,\n                data: fullInstructionData\n            });\n            console.log(\"\\uD83D\\uDCDD Transaction instruction created\");\n            console.log(\"\\uD83D\\uDD11 Keys:\", instruction.keys.map((k)=>({\n                    pubkey: k.pubkey.toString(),\n                    isSigner: k.isSigner,\n                    isWritable: k.isWritable\n                })));\n            const transaction = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.Transaction().add(instruction);\n            const { blockhash } = await connection.getLatestBlockhash(\"processed\");\n            transaction.recentBlockhash = blockhash;\n            transaction.feePayer = publicKey;\n            console.log(\"\\uD83D\\uDE80 Sending transaction...\");\n            // Sign transaction before simulation\n            transaction.partialSign(postKeypair);\n            // Simulate transaction \n            const simulation = await connection.simulateTransaction(transaction);\n            console.log(\"\\uD83C\\uDFAF Transaction simulation:\", simulation);\n            if (simulation.value.err) {\n                throw new Error(\"Transaction simulation failed: \".concat(JSON.stringify(simulation.value.err)));\n            }\n            // Send transaction with post keypair as additional signer\n            const signature = await sendTransaction(transaction, connection, {\n                skipPreflight: false,\n                preflightCommitment: \"processed\",\n                maxRetries: 3,\n                signers: [\n                    postKeypair\n                ]\n            });\n            console.log(\"\\uD83D\\uDCCB Transaction signature: \".concat(signature));\n            await connection.confirmTransaction({\n                signature,\n                blockhash,\n                lastValidBlockHeight: (await connection.getLatestBlockhash()).lastValidBlockHeight\n            }, \"processed\");\n            // Invalidate cache after post creation (profile post count changed)\n            clearProfileCache(publicKey.toString());\n            console.log(\"✅ Post created successfully!\");\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__.toast.success(\"Post created successfully!\");\n            return signature;\n        } catch (error) {\n            var _error_message, _error_message1;\n            console.error(\"❌ Post creation error:\", error);\n            if ((_error_message = error.message) === null || _error_message === void 0 ? void 0 : _error_message.includes(\"insufficient funds\")) {\n                const balance = await checkSOLBalance();\n                react_hot_toast__WEBPACK_IMPORTED_MODULE_2__.toast.error(\"Insufficient SOL: \".concat(balance.toFixed(4), \" SOL. Need at least 0.05 SOL for fees.\"));\n            } else if ((_error_message1 = error.message) === null || _error_message1 === void 0 ? void 0 : _error_message1.includes(\"simulation failed\")) {\n                react_hot_toast__WEBPACK_IMPORTED_MODULE_2__.toast.error(\"Transaction would fail: Check account setup and balance\");\n                console.error(\"Simulation error details:\", error.message);\n            } else {\n                react_hot_toast__WEBPACK_IMPORTED_MODULE_2__.toast.error(\"Failed to create post: \".concat(error.message || \"Unknown error\"));\n            }\n            throw error;\n        }\n    };\n    // Like post - REAL IMPLEMENTATION - Fixed to find actual post accounts\n    const likePost = async (postId, postAuthor)=>{\n        if (!publicKey) throw new Error(\"Wallet not connected\");\n        try {\n            console.log(\"\\uD83D\\uDD0D Attempting to like post ID \".concat(postId, \" by author \").concat(postAuthor.toString().slice(0, 8), \"...\"));\n            // Check SOL balance first\n            const balance = await checkSOLBalance();\n            console.log(\"\\uD83D\\uDCB0 Current SOL balance: \".concat(balance));\n            if (balance < 0.01) {\n                throw new Error(\"Insufficient SOL balance: \".concat(balance, \". Need at least 0.01 SOL for transaction fees.\"));\n            }\n            // Find the actual post account by scanning all program accounts\n            // Since posts are stored at random keypairs, not PDAs, we need to find the right one\n            console.log(\"\\uD83D\\uDD0D Searching for post ID \".concat(postId, \" by author \").concat(postAuthor.toString().slice(0, 8), \"...\"));\n            const accounts = await connection.getProgramAccounts(PROGRAM_ID);\n            let postAccountAddress = null;\n            let postAccount = null;\n            for (const { account, pubkey } of accounts){\n                try {\n                    const parsedPost = manualParsePost(account.data);\n                    if (parsedPost && parsedPost.is_initialized === 1 && Number(parsedPost.id) === postId && new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(parsedPost.author).equals(postAuthor)) {\n                        postAccountAddress = pubkey;\n                        postAccount = parsedPost;\n                        console.log(\"\\uD83C\\uDFAF Found post ID \".concat(postId, \" at address: \").concat(pubkey.toString()));\n                        break;\n                    }\n                } catch (error) {\n                    continue;\n                }\n            }\n            if (!postAccountAddress || !postAccount) {\n                throw new Error(\"Post ID \".concat(postId, \" by author \").concat(postAuthor.toString().slice(0, 8), \" not found on blockchain\"));\n            }\n            console.log('\\uD83D\\uDCDD Post data verified: \"'.concat(postAccount.content.slice(0, 30), '...\" with ').concat(Number(postAccount.likes), \" likes\"));\n            // Find the author's profile account\n            console.log(\"\\uD83D\\uDD0D Searching for author profile: \".concat(postAuthor.toString().slice(0, 8), \"...\"));\n            let authorProfileAddress = null;\n            for (const { account, pubkey } of accounts){\n                try {\n                    const parsedProfile = manualParseProfile(account.data);\n                    if (parsedProfile && parsedProfile.is_initialized === 1 && new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(parsedProfile.owner).equals(postAuthor)) {\n                        authorProfileAddress = pubkey;\n                        console.log(\"\\uD83C\\uDFAF Found author profile at address: \".concat(pubkey.toString()));\n                        break;\n                    }\n                } catch (error) {\n                    continue;\n                }\n            }\n            if (!authorProfileAddress) {\n                throw new Error(\"Author profile for \".concat(postAuthor.toString().slice(0, 8), \" not found on blockchain\"));\n            }\n            const instructionData = new LikePostInstruction({\n                post_id: BigInt(postId)\n            });\n            const likePostVariant = Buffer.from([\n                3\n            ]) // LikePost instruction variant\n            ;\n            const serializedData = (0,borsh__WEBPACK_IMPORTED_MODULE_1__.serialize)(likePostSchema, instructionData);\n            const fullInstructionData = Buffer.concat([\n                likePostVariant,\n                Buffer.from(serializedData)\n            ]);\n            console.log(\"\\uD83D\\uDD22 Instruction data: variant [3], serialized length: \".concat(serializedData.length, \", total: \").concat(fullInstructionData.length, \" bytes\"));\n            const instruction = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.TransactionInstruction({\n                keys: [\n                    {\n                        pubkey: publicKey,\n                        isSigner: true,\n                        isWritable: false\n                    },\n                    {\n                        pubkey: postAccountAddress,\n                        isSigner: false,\n                        isWritable: true\n                    },\n                    {\n                        pubkey: authorProfileAddress,\n                        isSigner: false,\n                        isWritable: true\n                    }\n                ],\n                programId: PROGRAM_ID,\n                data: fullInstructionData\n            });\n            console.log(\"\\uD83D\\uDD11 Transaction accounts:\");\n            console.log(\"  User (liker): \".concat(publicKey.toString(), \" (signer, readonly)\"));\n            console.log(\"  Post: \".concat(postAccountAddress.toString(), \" (not signer, writable)\"));\n            console.log(\"  Author Profile: \".concat(authorProfileAddress.toString(), \" (not signer, writable)\"));\n            console.log(\"  Program: \".concat(PROGRAM_ID.toString()));\n            const transaction = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.Transaction().add(instruction);\n            const { blockhash } = await connection.getLatestBlockhash(\"processed\");\n            transaction.recentBlockhash = blockhash;\n            transaction.feePayer = publicKey;\n            // Simulate transaction before sending\n            console.log(\"\\uD83C\\uDFAF Simulating transaction...\");\n            const simulation = await connection.simulateTransaction(transaction);\n            console.log(\"\\uD83D\\uDCCA Simulation result:\", simulation);\n            if (simulation.value.err) {\n                throw new Error(\"Transaction simulation failed: \".concat(JSON.stringify(simulation.value.err)));\n            }\n            console.log(\"✅ Transaction simulation successful\");\n            console.log(\"\\uD83D\\uDE80 Sending transaction...\");\n            const signature = await sendTransaction(transaction, connection, {\n                skipPreflight: false,\n                preflightCommitment: \"processed\",\n                maxRetries: 3\n            });\n            console.log(\"\\uD83D\\uDCCB Transaction sent with signature: \".concat(signature));\n            console.log(\"⏳ Confirming transaction...\");\n            await connection.confirmTransaction({\n                signature,\n                blockhash,\n                lastValidBlockHeight: (await connection.getLatestBlockhash()).lastValidBlockHeight\n            }, \"processed\");\n            console.log(\"✅ Transaction confirmed! Post liked successfully!\");\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__.toast.success(\"Post liked!\");\n            return signature;\n        } catch (error) {\n            var _error_message, _error_message1, _error_message2;\n            console.error(\"❌ Like post error:\", error);\n            // More specific error messages\n            if ((_error_message = error.message) === null || _error_message === void 0 ? void 0 : _error_message.includes(\"insufficient funds\")) {\n                const balance = await checkSOLBalance();\n                react_hot_toast__WEBPACK_IMPORTED_MODULE_2__.toast.error(\"Insufficient SOL: \".concat(balance.toFixed(4), \" SOL. Need at least 0.01 SOL for fees.\"));\n            } else if ((_error_message1 = error.message) === null || _error_message1 === void 0 ? void 0 : _error_message1.includes(\"simulation failed\")) {\n                react_hot_toast__WEBPACK_IMPORTED_MODULE_2__.toast.error(\"Transaction would fail: Check post exists and wallet has permission\");\n                console.error(\"Simulation error details:\", error.message);\n            } else if ((_error_message2 = error.message) === null || _error_message2 === void 0 ? void 0 : _error_message2.includes(\"not found on blockchain\")) {\n                react_hot_toast__WEBPACK_IMPORTED_MODULE_2__.toast.error(\"Post not found on blockchain\");\n            } else {\n                react_hot_toast__WEBPACK_IMPORTED_MODULE_2__.toast.error(\"Failed to like post: \".concat(error.message || \"Unknown error\"));\n            }\n            throw error;\n        }\n    };\n    // Check specific profile PDA - for debugging profile detection issues\n    const checkProfileAtPDA = async (pdaAddress)=>{\n        try {\n            console.log(\"\\uD83D\\uDD0D Checking specific PDA: \".concat(pdaAddress));\n            const pda = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(pdaAddress);\n            const accountInfo = await connection.getAccountInfo(pda);\n            if (!accountInfo) {\n                console.log(\"❌ No account found at PDA: \".concat(pdaAddress));\n                return;\n            }\n            console.log(\"✅ Account exists! Owner: \".concat(accountInfo.owner.toString(), \", Size: \").concat(accountInfo.data.length, \" bytes\"));\n            // Inspect raw data\n            console.log(\"\\uD83D\\uDD0D Raw data (first 100 bytes):\", Array.from(accountInfo.data.slice(0, 100)));\n            if (accountInfo.owner.equals(PROGRAM_ID)) {\n                console.log(\"✅ Account is owned by our program\");\n                try {\n                    // Try manual parsing to understand the structure\n                    let offset = 0;\n                    const is_initialized = accountInfo.data[offset];\n                    offset += 1;\n                    console.log(\"\\uD83D\\uDCCA is_initialized: \".concat(is_initialized));\n                    const owner = accountInfo.data.slice(offset, offset + 32);\n                    offset += 32;\n                    console.log(\"\\uD83D\\uDCCA owner: \".concat(new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(owner).toString()));\n                    // Try to read the username length (Borsh string format: 4 bytes length + string)\n                    const usernameLength = accountInfo.data.readUInt32LE(offset);\n                    offset += 4;\n                    console.log(\"\\uD83D\\uDCCA username length: \".concat(usernameLength));\n                    if (usernameLength > 0 && usernameLength < 100) {\n                        const username = accountInfo.data.slice(offset, offset + usernameLength).toString(\"utf8\");\n                        console.log('\\uD83D\\uDCCA username: \"'.concat(username, '\"'));\n                    }\n                    // Now try manual parsing\n                    const profileAccount = manualParseProfile(accountInfo.data);\n                    if (profileAccount) {\n                        console.log(\"✅ Successfully manually parsed profile:\", {\n                            username: profileAccount.username,\n                            bio: profileAccount.bio,\n                            isInitialized: profileAccount.is_initialized === 1,\n                            owner: new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(profileAccount.owner).toString(),\n                            profileImage: profileAccount.profile_image,\n                            coverImage: profileAccount.cover_image,\n                            postsCount: Number(profileAccount.posts_count)\n                        });\n                    } else {\n                        console.log(\"❌ Manual parsing failed\");\n                    }\n                    // Also try Borsh for comparison\n                    try {\n                        const profileAccount = (0,borsh__WEBPACK_IMPORTED_MODULE_1__.deserialize)(profileAccountSchema, ProfileAccount, accountInfo.data);\n                        console.log(\"✅ Borsh deserialization also worked:\", {\n                            username: profileAccount.username,\n                            bio: profileAccount.bio,\n                            isInitialized: profileAccount.is_initialized === 1,\n                            owner: new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(profileAccount.owner).toString()\n                        });\n                    } catch (error) {\n                        console.log(\"❌ Borsh deserialization still fails:\", error);\n                    }\n                } catch (error) {\n                    console.log(\"❌ Error checking PDA:\", error);\n                }\n            } else {\n                console.log(\"❌ Account is owned by different program: \".concat(accountInfo.owner.toString()));\n            }\n        } catch (error) {\n            console.log(\"❌ Error checking PDA:\", error);\n        }\n    };\n    // Manual profile parser - bypasses Borsh deserialization issues\n    const manualParseProfile = (data)=>{\n        try {\n            // Basic validation - profiles should have a minimum size\n            if (data.length < 150) return null // Profiles need at least 150 bytes for basic structure\n            ;\n            let offset = 0;\n            // Parse each field manually\n            const is_initialized = data[offset];\n            if (is_initialized !== 1) return null // Must be initialized\n            ;\n            offset += 1;\n            const owner = data.slice(offset, offset + 32);\n            offset += 32;\n            // Validate we have enough data for username length\n            if (offset + 4 > data.length) return null;\n            // String fields (username, bio, profile_image, cover_image)\n            const usernameLength = data.readUInt32LE(offset);\n            offset += 4;\n            // Validate username length is reasonable\n            if (usernameLength > 100 || usernameLength === 0) return null;\n            if (offset + usernameLength > data.length) return null;\n            const username = data.slice(offset, offset + usernameLength).toString(\"utf8\");\n            offset += usernameLength;\n            // Validate we have enough data for bio length\n            if (offset + 4 > data.length) return null;\n            const bioLength = data.readUInt32LE(offset);\n            offset += 4;\n            // Validate bio length is reasonable\n            if (bioLength > 1000) return null;\n            if (offset + bioLength > data.length) return null;\n            const bio = data.slice(offset, offset + bioLength).toString(\"utf8\");\n            offset += bioLength;\n            // Validate we have enough data for profile image length\n            if (offset + 4 > data.length) return null;\n            const profileImageLength = data.readUInt32LE(offset);\n            offset += 4;\n            // Validate profile image length is reasonable\n            if (profileImageLength > 500) return null;\n            if (offset + profileImageLength > data.length) return null;\n            const profile_image = data.slice(offset, offset + profileImageLength).toString(\"utf8\");\n            offset += profileImageLength;\n            // Validate we have enough data for cover image length\n            if (offset + 4 > data.length) return null;\n            const coverImageLength = data.readUInt32LE(offset);\n            offset += 4;\n            // Validate cover image length is reasonable\n            if (coverImageLength > 500) return null;\n            if (offset + coverImageLength > data.length) return null;\n            const cover_image = data.slice(offset, offset + coverImageLength).toString(\"utf8\");\n            offset += coverImageLength;\n            // Validate we have enough data for all the u64 fields (8 bytes each * 6 fields = 48 bytes)\n            if (offset + 48 > data.length) return null;\n            // u64 fields\n            const created_at = data.readBigUInt64LE(offset);\n            offset += 8;\n            const followers_count = data.readBigUInt64LE(offset);\n            offset += 8;\n            const following_count = data.readBigUInt64LE(offset);\n            offset += 8;\n            // i64 field\n            const user_credit_rating = data.readBigInt64LE(offset);\n            offset += 8;\n            const posts_count = data.readBigUInt64LE(offset);\n            offset += 8;\n            const last_post_timestamp = data.readBigUInt64LE(offset);\n            offset += 8;\n            const daily_post_count = data.readBigUInt64LE(offset);\n            offset += 8;\n            // Validate we have enough data for the final u8 field\n            if (offset + 1 > data.length) return null;\n            const is_verified = data[offset];\n            offset += 1;\n            return new ProfileAccount({\n                is_initialized,\n                owner: new Uint8Array(owner),\n                username,\n                bio,\n                profile_image,\n                cover_image,\n                created_at,\n                followers_count,\n                following_count,\n                user_credit_rating,\n                posts_count,\n                last_post_timestamp,\n                daily_post_count,\n                is_verified\n            });\n        } catch (error) {\n            // Silent failure - not a profile account or invalid data\n            return null;\n        }\n    };\n    // Manual post parser - bypasses Borsh deserialization issues\n    const manualParsePost = (data)=>{\n        try {\n            // Quick validation: posts should have specific size and structure\n            if (data.length < 100) return null // Posts should be larger than profiles\n            ;\n            let offset = 0;\n            // Parse each field manually\n            const is_initialized = data[offset];\n            if (is_initialized !== 1) return null // Must be initialized\n            ;\n            offset += 1;\n            // Check if this looks like a post vs profile by examining the structure\n            // Posts start with: u8 (init), u64 (id), [32]u8 (author), string (content)\n            // Profiles start with: u8 (init), [32]u8 (owner), string (username)\n            const id = data.readBigUInt64LE(offset);\n            offset += 8;\n            const author = data.slice(offset, offset + 32);\n            offset += 32;\n            const contentLength = data.readUInt32LE(offset);\n            offset += 4;\n            // Validate content length is reasonable (not too large)\n            if (contentLength > 10000 || contentLength === 0) return null;\n            if (offset + contentLength > data.length) return null;\n            const content = data.slice(offset, offset + contentLength).toString(\"utf8\");\n            offset += contentLength;\n            // Ensure we have enough remaining data for the rest of the post structure\n            if (offset + 40 > data.length) return null // Need at least 40 more bytes for timestamps and counts\n            ;\n            const timestamp = data.readBigUInt64LE(offset);\n            offset += 8;\n            const likes = data.readBigUInt64LE(offset);\n            offset += 8;\n            const comments = data.readBigUInt64LE(offset);\n            offset += 8;\n            const mirrors = data.readBigUInt64LE(offset);\n            offset += 8;\n            // Parse images array length\n            if (offset + 4 > data.length) return null;\n            const imagesLength = data.readUInt32LE(offset);\n            offset += 4;\n            const images = [];\n            // Parse images array - each image is a length-prefixed string\n            for(let i = 0; i < imagesLength; i++){\n                if (offset + 4 > data.length) return null;\n                const imageLength = data.readUInt32LE(offset);\n                offset += 4;\n                if (offset + imageLength > data.length) return null;\n                const image = data.slice(offset, offset + imageLength).toString(\"utf8\");\n                offset += imageLength;\n                images.push(image);\n            }\n            // Ensure we have enough data for rating and kill zone\n            if (offset + 2 > data.length) return null;\n            const rating = data[offset];\n            offset += 1;\n            const in_kill_zone = data[offset];\n            offset += 1;\n            return new PostAccount({\n                is_initialized,\n                id,\n                author: new Uint8Array(author),\n                content,\n                timestamp,\n                likes,\n                comments,\n                mirrors,\n                images,\n                rating,\n                in_kill_zone\n            });\n        } catch (error) {\n            // Silent failure - not a post account\n            return null;\n        }\n    };\n    // Convert CommunityAccount to Community interface\n    const convertCommunityAccount = (communityAccount)=>{\n        return {\n            isInitialized: communityAccount.is_initialized === 1,\n            id: Number(communityAccount.id),\n            creator: new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(communityAccount.creator),\n            name: communityAccount.name,\n            description: communityAccount.description,\n            avatar: communityAccount.avatar,\n            rules: communityAccount.rules,\n            memberCount: Number(communityAccount.member_count),\n            createdAt: Number(communityAccount.created_at) * 1000,\n            isPrivate: communityAccount.is_private === 1\n        };\n    };\n    // Create Community\n    const createCommunity = async function(name, description, avatar) {\n        let rules = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : [];\n        if (!publicKey) throw new Error(\"Wallet not connected\");\n        try {\n            console.log(\"\\uD83C\\uDFD8️ Creating community:\", name);\n            const balance = await checkSOLBalance();\n            if (balance < 0.05) {\n                throw new Error(\"Insufficient SOL balance: \".concat(balance, \". Need at least 0.05 SOL.\"));\n            }\n            // Generate a keypair for the community account\n            const communityKeypair = _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.Keypair.generate();\n            console.log(\"\\uD83D\\uDCCD Community Account: \".concat(communityKeypair.publicKey.toString()));\n            const instructionData = new CreateCommunityInstruction({\n                name,\n                description,\n                avatar,\n                rules\n            });\n            const createCommunityVariant = Buffer.from([\n                7\n            ]) // CreateCommunity enum index\n            ;\n            const serializedData = (0,borsh__WEBPACK_IMPORTED_MODULE_1__.serialize)(createCommunitySchema, instructionData);\n            const fullInstructionData = Buffer.concat([\n                createCommunityVariant,\n                Buffer.from(serializedData)\n            ]);\n            const instruction = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.TransactionInstruction({\n                keys: [\n                    {\n                        pubkey: publicKey,\n                        isSigner: true,\n                        isWritable: true\n                    },\n                    {\n                        pubkey: communityKeypair.publicKey,\n                        isSigner: true,\n                        isWritable: true\n                    },\n                    {\n                        pubkey: _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.SystemProgram.programId,\n                        isSigner: false,\n                        isWritable: false\n                    }\n                ],\n                programId: PROGRAM_ID,\n                data: fullInstructionData\n            });\n            const transaction = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.Transaction().add(instruction);\n            const { blockhash } = await connection.getLatestBlockhash(\"processed\");\n            transaction.recentBlockhash = blockhash;\n            transaction.feePayer = publicKey;\n            // Sign with community keypair\n            transaction.partialSign(communityKeypair);\n            const signature = await sendTransaction(transaction, connection, {\n                skipPreflight: false,\n                preflightCommitment: \"processed\",\n                maxRetries: 3,\n                signers: [\n                    communityKeypair\n                ]\n            });\n            await connection.confirmTransaction({\n                signature,\n                blockhash,\n                lastValidBlockHeight: (await connection.getLatestBlockhash()).lastValidBlockHeight\n            }, \"processed\");\n            console.log(\"✅ Community created successfully!\");\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__.toast.success('Community \"'.concat(name, '\" created successfully!'));\n            return signature;\n        } catch (error) {\n            console.error(\"❌ Community creation error:\", error);\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__.toast.error(\"Failed to create community: \".concat(error.message || \"Unknown error\"));\n            throw error;\n        }\n    };\n    // Follow Profile\n    const followProfile = async (profilePublicKey)=>{\n        if (!publicKey) throw new Error(\"Wallet not connected\");\n        try {\n            console.log(\"\\uD83D\\uDC65 Following profile:\", profilePublicKey.toString());\n            // Find the follower's profile account (current user's profile)\n            console.log(\"\\uD83D\\uDD0D Searching for follower profile: \".concat(publicKey.toString().slice(0, 8), \"...\"));\n            const accounts = await connection.getProgramAccounts(PROGRAM_ID);\n            let followerProfileAddress = null;\n            for (const { account, pubkey } of accounts){\n                try {\n                    const parsedProfile = manualParseProfile(account.data);\n                    if (parsedProfile && parsedProfile.is_initialized === 1 && new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(parsedProfile.owner).equals(publicKey)) {\n                        followerProfileAddress = pubkey;\n                        console.log(\"\\uD83C\\uDFAF Found follower profile at address: \".concat(pubkey.toString()));\n                        break;\n                    }\n                } catch (error) {\n                    continue;\n                }\n            }\n            if (!followerProfileAddress) {\n                throw new Error(\"Follower profile for \".concat(publicKey.toString().slice(0, 8), \" not found on blockchain. Please create a profile first.\"));\n            }\n            const instructionData = new FollowProfileInstruction({\n                profile_id: profilePublicKey\n            });\n            const followProfileVariant = Buffer.from([\n                5\n            ]) // FollowProfile enum index\n            ;\n            const serializedData = (0,borsh__WEBPACK_IMPORTED_MODULE_1__.serialize)(followProfileSchema, instructionData);\n            const fullInstructionData = Buffer.concat([\n                followProfileVariant,\n                Buffer.from(serializedData)\n            ]);\n            const instruction = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.TransactionInstruction({\n                keys: [\n                    {\n                        pubkey: publicKey,\n                        isSigner: true,\n                        isWritable: false\n                    },\n                    {\n                        pubkey: profilePublicKey,\n                        isSigner: false,\n                        isWritable: true\n                    },\n                    {\n                        pubkey: followerProfileAddress,\n                        isSigner: false,\n                        isWritable: true\n                    }\n                ],\n                programId: PROGRAM_ID,\n                data: fullInstructionData\n            });\n            console.log(\"\\uD83D\\uDD11 Follow transaction accounts:\");\n            console.log(\"  Follower: \".concat(publicKey.toString(), \" (signer, readonly)\"));\n            console.log(\"  Profile to follow: \".concat(profilePublicKey.toString(), \" (not signer, writable)\"));\n            console.log(\"  Follower profile: \".concat(followerProfileAddress.toString(), \" (not signer, writable)\"));\n            const transaction = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.Transaction().add(instruction);\n            const { blockhash } = await connection.getLatestBlockhash(\"processed\");\n            transaction.recentBlockhash = blockhash;\n            transaction.feePayer = publicKey;\n            const signature = await sendTransaction(transaction, connection, {\n                skipPreflight: false,\n                preflightCommitment: \"processed\",\n                maxRetries: 3\n            });\n            await connection.confirmTransaction({\n                signature,\n                blockhash,\n                lastValidBlockHeight: (await connection.getLatestBlockhash()).lastValidBlockHeight\n            }, \"processed\");\n            console.log(\"✅ Follow successful!\");\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__.toast.success(\"Profile followed!\");\n            return signature;\n        } catch (error) {\n            console.error(\"Follow error:\", error);\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__.toast.error(\"Failed to follow profile: \".concat(error.message || \"Unknown error\"));\n            throw error;\n        }\n    };\n    // Unfollow Profile\n    const unfollowProfile = async (profilePublicKey)=>{\n        if (!publicKey) throw new Error(\"Wallet not connected\");\n        try {\n            console.log(\"\\uD83D\\uDC65 Unfollowing profile:\", profilePublicKey.toString());\n            // Find the follower's profile account (current user's profile)\n            console.log(\"\\uD83D\\uDD0D Searching for follower profile: \".concat(publicKey.toString().slice(0, 8), \"...\"));\n            const accounts = await connection.getProgramAccounts(PROGRAM_ID);\n            let followerProfileAddress = null;\n            for (const { account, pubkey } of accounts){\n                try {\n                    const parsedProfile = manualParseProfile(account.data);\n                    if (parsedProfile && parsedProfile.is_initialized === 1 && new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(parsedProfile.owner).equals(publicKey)) {\n                        followerProfileAddress = pubkey;\n                        console.log(\"\\uD83C\\uDFAF Found follower profile at address: \".concat(pubkey.toString()));\n                        break;\n                    }\n                } catch (error) {\n                    continue;\n                }\n            }\n            if (!followerProfileAddress) {\n                throw new Error(\"Follower profile for \".concat(publicKey.toString().slice(0, 8), \" not found on blockchain. Please create a profile first.\"));\n            }\n            const instructionData = new FollowProfileInstruction({\n                profile_id: profilePublicKey\n            });\n            const unfollowProfileVariant = Buffer.from([\n                6\n            ]) // UnfollowProfile enum index\n            ;\n            const serializedData = (0,borsh__WEBPACK_IMPORTED_MODULE_1__.serialize)(followProfileSchema, instructionData);\n            const fullInstructionData = Buffer.concat([\n                unfollowProfileVariant,\n                Buffer.from(serializedData)\n            ]);\n            const instruction = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.TransactionInstruction({\n                keys: [\n                    {\n                        pubkey: publicKey,\n                        isSigner: true,\n                        isWritable: false\n                    },\n                    {\n                        pubkey: profilePublicKey,\n                        isSigner: false,\n                        isWritable: true\n                    },\n                    {\n                        pubkey: followerProfileAddress,\n                        isSigner: false,\n                        isWritable: true\n                    }\n                ],\n                programId: PROGRAM_ID,\n                data: fullInstructionData\n            });\n            console.log(\"\\uD83D\\uDD11 Unfollow transaction accounts:\");\n            console.log(\"  Follower: \".concat(publicKey.toString(), \" (signer, readonly)\"));\n            console.log(\"  Profile to unfollow: \".concat(profilePublicKey.toString(), \" (not signer, writable)\"));\n            console.log(\"  Follower profile: \".concat(followerProfileAddress.toString(), \" (not signer, writable)\"));\n            const transaction = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.Transaction().add(instruction);\n            const { blockhash } = await connection.getLatestBlockhash(\"processed\");\n            transaction.recentBlockhash = blockhash;\n            transaction.feePayer = publicKey;\n            const signature = await sendTransaction(transaction, connection, {\n                skipPreflight: false,\n                preflightCommitment: \"processed\",\n                maxRetries: 3\n            });\n            await connection.confirmTransaction({\n                signature,\n                blockhash,\n                lastValidBlockHeight: (await connection.getLatestBlockhash()).lastValidBlockHeight\n            }, \"processed\");\n            console.log(\"✅ Unfollow successful!\");\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__.toast.success(\"Profile unfollowed!\");\n            return signature;\n        } catch (error) {\n            console.error(\"Unfollow error:\", error);\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__.toast.error(\"Failed to unfollow profile: \".concat(error.message || \"Unknown error\"));\n            throw error;\n        }\n    };\n    // Update Profile\n    const updateProfile = async (username, bio, profileImage, coverImage)=>{\n        if (!publicKey) throw new Error(\"Wallet not connected\");\n        try {\n            console.log(\"\\uD83D\\uDD04 Updating profile:\", username);\n            const instructionData = new CreateProfileInstruction({\n                username,\n                bio,\n                profile_image: profileImage,\n                cover_image: coverImage\n            });\n            const updateProfileVariant = Buffer.from([\n                1\n            ]) // UpdateProfile enum index (same as CreateProfile)\n            ;\n            const serializedData = (0,borsh__WEBPACK_IMPORTED_MODULE_1__.serialize)(createProfileSchema, instructionData);\n            const fullInstructionData = Buffer.concat([\n                updateProfileVariant,\n                Buffer.from(serializedData)\n            ]);\n            const instruction = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.TransactionInstruction({\n                keys: [\n                    {\n                        pubkey: publicKey,\n                        isSigner: true,\n                        isWritable: true\n                    }\n                ],\n                programId: PROGRAM_ID,\n                data: fullInstructionData\n            });\n            const transaction = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.Transaction().add(instruction);\n            const signature = await sendTransaction(transaction, connection);\n            await connection.confirmTransaction(signature, \"processed\");\n            console.log(\"✅ Profile updated successfully!\");\n            // Clear cache to force refresh\n            profileCache.delete(publicKey.toString());\n            return signature;\n        } catch (error) {\n            console.error(\"❌ Update profile error:\", error);\n            throw error;\n        }\n    };\n    // Utility function to preload profile on wallet connection\n    const preloadProfile = async ()=>{\n        if (!publicKey) return;\n        console.log(\"\\uD83D\\uDE80 Preloading profile on wallet connection...\");\n        try {\n            await getProfile(publicKey);\n        } catch (error) {\n            console.warn(\"Failed to preload profile:\", error);\n        }\n    };\n    return {\n        createProfile,\n        createPost,\n        likePost,\n        getProfile,\n        getProfileByUsername,\n        getPosts,\n        getProfilePDA,\n        getPostPDA,\n        checkProfileAtPDA,\n        preloadProfile,\n        clearProfileCache,\n        createCommunity,\n        followProfile,\n        unfollowProfile,\n        updateProfile\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2hvb2tzL3VzZUJsb2Nrc1Byb2dyYW0udHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUF1RTtBQUNtRDtBQUM1RTtBQUNQO0FBQ047QUFFakMseURBQXlEO0FBQ3pELE1BQU1ZLGFBQWEsSUFBSVYsc0RBQVNBLENBQUNTLDJDQUFNQSxDQUFDRSxNQUFNLENBQUNDLFNBQVM7QUFFeEQsb0VBQW9FO0FBQ3BFLE1BQU1DLGFBQWFDLGtCQUF5Qjs7QUFFNUMsK0NBQStDO1VBQzFDQzs7Ozs7Ozs7OztHQUFBQSx3QkFBQUE7O1VBYU9DOzs7Ozs7Ozs7R0FBQUEsZUFBQUE7QUFXWix3Q0FBd0M7QUFDeEMsTUFBTUM7SUFNSkMsWUFBWUMsTUFLWCxDQUFFO1FBQ0QsSUFBSSxDQUFDQyxRQUFRLEdBQUdELE9BQU9DLFFBQVE7UUFDL0IsSUFBSSxDQUFDQyxHQUFHLEdBQUdGLE9BQU9FLEdBQUc7UUFDckIsSUFBSSxDQUFDQyxhQUFhLEdBQUdILE9BQU9HLGFBQWE7UUFDekMsSUFBSSxDQUFDQyxXQUFXLEdBQUdKLE9BQU9JLFdBQVc7SUFDdkM7QUFDRjtBQUVBLHFDQUFxQztBQUNyQyxNQUFNQztJQUlKTixZQUFZQyxNQUdYLENBQUU7UUFDRCxJQUFJLENBQUNNLE9BQU8sR0FBR04sT0FBT00sT0FBTztRQUM3QixJQUFJLENBQUNDLE1BQU0sR0FBR1AsT0FBT08sTUFBTTtJQUM3QjtBQUNGO0FBRUEsbUNBQW1DO0FBQ25DLE1BQU1DO0lBR0pULFlBQVlDLE1BRVgsQ0FBRTtRQUNELElBQUksQ0FBQ1MsT0FBTyxHQUFHVCxPQUFPUyxPQUFPO0lBQy9CO0FBQ0Y7QUFFQSw2REFBNkQ7QUFDN0QsTUFBTUM7SUFnQkpYLFlBQVlDLE1BQVcsQ0FBRTtRQUN2QixJQUFJLENBQUNXLGNBQWMsR0FBR1gsT0FBT1csY0FBYztRQUMzQyxJQUFJLENBQUNDLEtBQUssR0FBR1osT0FBT1ksS0FBSztRQUN6QixJQUFJLENBQUNYLFFBQVEsR0FB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RixNQUFNRyxjQUFjLElBQUl0SyxtRUFBc0JBLENBQUM7Z0JBQzdDbUcsTUFBTTtvQkFDSjt3QkFBRW9FLFFBQVE3RDt3QkFBVzhELFVBQVU7d0JBQU1DLFlBQVk7b0JBQUs7aUJBQ3ZEO2dCQUNEL0osV0FBV0Y7Z0JBQ1hrSyxNQUFNTjtZQUNSO1lBRUEsTUFBTU8sY0FBYyxJQUFJNUssd0RBQVdBLEdBQUc2SyxHQUFHLENBQUNOO1lBQzFDLE1BQU1lLFlBQVksTUFBTTFFLGdCQUFnQmdFLGFBQWFsRTtZQUVyRCxNQUFNQSxXQUFXZ0Ysa0JBQWtCLENBQUNKLFdBQVc7WUFDL0MvRixRQUFRQyxHQUFHLENBQUM7WUFFWiwrQkFBK0I7WUFDL0JsQixhQUFhNEIsTUFBTSxDQUFDUyxVQUFVVyxRQUFRO1lBRXRDLE9BQU9nRTtRQUNULEVBQUUsT0FBTzVGLE9BQVk7WUFDbkJILFFBQVFHLEtBQUssQ0FBQywyQkFBMkJBO1lBQ3pDLE1BQU1BO1FBQ1I7SUFDRjtJQUVBLDJEQUEyRDtJQUMzRCxNQUFNa0wsaUJBQWlCO1FBQ3JCLElBQUksQ0FBQ2pLLFdBQVc7UUFFaEJwQixRQUFRQyxHQUFHLENBQUM7UUFDWixJQUFJO1lBQ0YsTUFBTXNHLFdBQVduRjtRQUNuQixFQUFFLE9BQU9qQixPQUFPO1lBQ2RILFFBQVFJLElBQUksQ0FBQyw4QkFBOEJEO1FBQzdDO0lBQ0Y7SUFFQSxPQUFPO1FBQ0xvRTtRQUNBeUQ7UUFDQVk7UUFDQXJDO1FBQ0FjO1FBQ0FFO1FBQ0FqRztRQUNBTTtRQUNBd0g7UUFDQWlDO1FBQ0EzSztRQUNBZ0s7UUFDQUc7UUFDQUk7UUFDQUU7SUFDRjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL2hvb2tzL3VzZUJsb2Nrc1Byb2dyYW0udHM/NWU4ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VDb25uZWN0aW9uLCB1c2VXYWxsZXQgfSBmcm9tICdAc29sYW5hL3dhbGxldC1hZGFwdGVyLXJlYWN0J1xyXG5pbXBvcnQgeyBQdWJsaWNLZXksIFRyYW5zYWN0aW9uLCBUcmFuc2FjdGlvbkluc3RydWN0aW9uLCBTeXN0ZW1Qcm9ncmFtLCBMQU1QT1JUU19QRVJfU09MLCBLZXlwYWlyIH0gZnJvbSAnQHNvbGFuYS93ZWIzLmpzJ1xyXG5pbXBvcnQgeyBzZXJpYWxpemUsIGRlc2VyaWFsaXplIH0gZnJvbSAnYm9yc2gnXHJcbmltcG9ydCB7IHRvYXN0IH0gZnJvbSAncmVhY3QtaG90LXRvYXN0J1xyXG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICdAL2NvbmZpZydcclxuXHJcbi8vIFlvdXIgZGVwbG95ZWQgcHJvZ3JhbSBJRCAtIGNvbmZpZ3VyZWQgZnJvbSBlbnZpcm9ubWVudFxyXG5jb25zdCBQUk9HUkFNX0lEID0gbmV3IFB1YmxpY0tleShjb25maWcuc29sYW5hLnByb2dyYW1JZClcclxuXHJcbi8vIEFkZCBkZWJ1ZyBtb2RlIGZvciB0ZXN0aW5nIHdpdGhvdXQgYWN0dWFsIGJsb2NrY2hhaW4gdHJhbnNhY3Rpb25zXHJcbmNvbnN0IERFQlVHX01PREUgPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50J1xyXG5cclxuLy8gSW5zdHJ1Y3Rpb24gZW51bSBtYXRjaGluZyB5b3VyIFJ1c3QgY29udHJhY3RcclxuZW51bSBDb250cmFjdEluc3RydWN0aW9uIHtcclxuICBDcmVhdGVQcm9maWxlID0gMCxcclxuICBVcGRhdGVQcm9maWxlID0gMSxcclxuICBDcmVhdGVQb3N0ID0gMixcclxuICBMaWtlUG9zdCA9IDMsXHJcbiAgQ29tbWVudE9uUG9zdCA9IDQsXHJcbiAgRm9sbG93UHJvZmlsZSA9IDUsXHJcbiAgVW5mb2xsb3dQcm9maWxlID0gNixcclxuICBDcmVhdGVDb21tdW5pdHkgPSA3LFxyXG4gIEpvaW5Db21tdW5pdHkgPSA4LFxyXG59XHJcblxyXG4vLyBQb3N0UmF0aW5nIGVudW0gbWF0Y2hpbmcgUnVzdCBjb250cmFjdFxyXG5leHBvcnQgZW51bSBQb3N0UmF0aW5nIHtcclxuICBOb25lID0gMCxcclxuICBCcm9uemUgPSAxLFxyXG4gIFNpbHZlciA9IDIsXHJcbiAgR29sZCA9IDMsXHJcbiAgUGxhdGludW0gPSA0LFxyXG4gIERpYW1vbmQgPSA1LFxyXG4gIEFjZSA9IDYsXHJcbiAgQ29ucXVlcm9yID0gNyxcclxufVxyXG5cclxuLy8gQ3JlYXRlIFByb2ZpbGUgaW5zdHJ1Y3Rpb24gZGF0YSBjbGFzc1xyXG5jbGFzcyBDcmVhdGVQcm9maWxlSW5zdHJ1Y3Rpb24ge1xyXG4gIHVzZXJuYW1lOiBzdHJpbmdcclxuICBiaW86IHN0cmluZ1xyXG4gIHByb2ZpbGVfaW1hZ2U6IHN0cmluZ1xyXG4gIGNvdmVyX2ltYWdlOiBzdHJpbmdcclxuXHJcbiAgY29uc3RydWN0b3IoZmllbGRzOiB7XHJcbiAgICB1c2VybmFtZTogc3RyaW5nXHJcbiAgICBiaW86IHN0cmluZ1xyXG4gICAgcHJvZmlsZV9pbWFnZTogc3RyaW5nXHJcbiAgICBjb3Zlcl9pbWFnZTogc3RyaW5nXHJcbiAgfSkge1xyXG4gICAgdGhpcy51c2VybmFtZSA9IGZpZWxkcy51c2VybmFtZVxyXG4gICAgdGhpcy5iaW8gPSBmaWVsZHMuYmlvXHJcbiAgICB0aGlzLnByb2ZpbGVfaW1hZ2UgPSBmaWVsZHMucHJvZmlsZV9pbWFnZVxyXG4gICAgdGhpcy5jb3Zlcl9pbWFnZSA9IGZpZWxkcy5jb3Zlcl9pbWFnZVxyXG4gIH1cclxufVxyXG5cclxuLy8gQ3JlYXRlIFBvc3QgaW5zdHJ1Y3Rpb24gZGF0YSBjbGFzc1xyXG5jbGFzcyBDcmVhdGVQb3N0SW5zdHJ1Y3Rpb24ge1xyXG4gIGNvbnRlbnQ6IHN0cmluZ1xyXG4gIGltYWdlczogc3RyaW5nW11cclxuXHJcbiAgY29uc3RydWN0b3IoZmllbGRzOiB7XHJcbiAgICBjb250ZW50OiBzdHJpbmdcclxuICAgIGltYWdlczogc3RyaW5nW11cclxuICB9KSB7XHJcbiAgICB0aGlzLmNvbnRlbnQgPSBmaWVsZHMuY29udGVudFxyXG4gICAgdGhpcy5pbWFnZXMgPSBmaWVsZHMuaW1hZ2VzXHJcbiAgfVxyXG59XHJcblxyXG4vLyBMaWtlIFBvc3QgaW5zdHJ1Y3Rpb24gZGF0YSBjbGFzc1xyXG5jbGFzcyBMaWtlUG9zdEluc3RydWN0aW9uIHtcclxuICBwb3N0X2lkOiBiaWdpbnRcclxuXHJcbiAgY29uc3RydWN0b3IoZmllbGRzOiB7XHJcbiAgICBwb3N0X2lkOiBiaWdpbnRcclxuICB9KSB7XHJcbiAgICB0aGlzLnBvc3RfaWQgPSBmaWVsZHMucG9zdF9pZFxyXG4gIH1cclxufVxyXG5cclxuLy8gUHJvZmlsZSBzdHJ1Y3QgZm9yIGRlc2VyaWFsaXphdGlvbiAtIG1hdGNoaW5nIFJ1c3QgZXhhY3RseVxyXG5jbGFzcyBQcm9maWxlQWNjb3VudCB7XHJcbiAgaXNfaW5pdGlhbGl6ZWQ6IG51bWJlciAgLy8gdTggZnJvbSBSdXN0IGJvb2xcclxuICBvd25lcjogVWludDhBcnJheVxyXG4gIHVzZXJuYW1lOiBzdHJpbmdcclxuICBiaW86IHN0cmluZ1xyXG4gIHByb2ZpbGVfaW1hZ2U6IHN0cmluZ1xyXG4gIGNvdmVyX2ltYWdlOiBzdHJpbmdcclxuICBjcmVhdGVkX2F0OiBiaWdpbnRcclxuICBmb2xsb3dlcnNfY291bnQ6IGJpZ2ludFxyXG4gIGZvbGxvd2luZ19jb3VudDogYmlnaW50XHJcbiAgdXNlcl9jcmVkaXRfcmF0aW5nOiBiaWdpbnRcclxuICBwb3N0c19jb3VudDogYmlnaW50XHJcbiAgbGFzdF9wb3N0X3RpbWVzdGFtcDogYmlnaW50XHJcbiAgZGFpbHlfcG9zdF9jb3VudDogYmlnaW50XHJcbiAgaXNfdmVyaWZpZWQ6IG51bWJlciAgLy8gdTggZnJvbSBSdXN0IGJvb2xcclxuXHJcbiAgY29uc3RydWN0b3IoZmllbGRzOiBhbnkpIHtcclxuICAgIHRoaXMuaXNfaW5pdGlhbGl6ZWQgPSBmaWVsZHMuaXNfaW5pdGlhbGl6ZWRcclxuICAgIHRoaXMub3duZXIgPSBmaWVsZHMub3duZXJcclxuICAgIHRoaXMudXNlcm5hbWUgPSBmaWVsZHMudXNlcm5hbWVcclxuICAgIHRoaXMuYmlvID0gZmllbGRzLmJpb1xyXG4gICAgdGhpcy5wcm9maWxlX2ltYWdlID0gZmllbGRzLnByb2ZpbGVfaW1hZ2VcclxuICAgIHRoaXMuY292ZXJfaW1hZ2UgPSBmaWVsZHMuY292ZXJfaW1hZ2VcclxuICAgIHRoaXMuY3JlYXRlZF9hdCA9IGZpZWxkcy5jcmVhdGVkX2F0XHJcbiAgICB0aGlzLmZvbGxvd2Vyc19jb3VudCA9IGZpZWxkcy5mb2xsb3dlcnNfY291bnRcclxuICAgIHRoaXMuZm9sbG93aW5nX2NvdW50ID0gZmllbGRzLmZvbGxvd2luZ19jb3VudFxyXG4gICAgdGhpcy51c2VyX2NyZWRpdF9yYXRpbmcgPSBmaWVsZHMudXNlcl9jcmVkaXRfcmF0aW5nXHJcbiAgICB0aGlzLnBvc3RzX2NvdW50ID0gZmllbGRzLnBvc3RzX2NvdW50XHJcbiAgICB0aGlzLmxhc3RfcG9zdF90aW1lc3RhbXAgPSBmaWVsZHMubGFzdF9wb3N0X3RpbWVzdGFtcFxyXG4gICAgdGhpcy5kYWlseV9wb3N0X2NvdW50ID0gZmllbGRzLmRhaWx5X3Bvc3RfY291bnRcclxuICAgIHRoaXMuaXNfdmVyaWZpZWQgPSBmaWVsZHMuaXNfdmVyaWZpZWRcclxuICB9XHJcbn1cclxuXHJcbi8vIFBvc3Qgc3RydWN0IGZvciBkZXNlcmlhbGl6YXRpb24gLSBtYXRjaGluZyBSdXN0IGV4YWN0bHlcclxuY2xhc3MgUG9zdEFjY291bnQge1xyXG4gIGlzX2luaXRpYWxpemVkOiBudW1iZXIgIC8vIHU4IGZyb20gUnVzdCBib29sXHJcbiAgaWQ6IGJpZ2ludFxyXG4gIGF1dGhvcjogVWludDhBcnJheVxyXG4gIGNvbnRlbnQ6IHN0cmluZ1xyXG4gIHRpbWVzdGFtcDogYmlnaW50XHJcbiAgbGlrZXM6IGJpZ2ludFxyXG4gIGNvbW1lbnRzOiBiaWdpbnRcclxuICBtaXJyb3JzOiBiaWdpbnRcclxuICBpbWFnZXM6IHN0cmluZ1tdXHJcbiAgcmF0aW5nOiBudW1iZXJcclxuICBpbl9raWxsX3pvbmU6IG51bWJlciAgLy8gdTggZnJvbSBSdXN0IGJvb2xcclxuXHJcbiAgY29uc3RydWN0b3IoZmllbGRzOiBhbnkpIHtcclxuICAgIHRoaXMuaXNfaW5pdGlhbGl6ZWQgPSBmaWVsZHMuaXNfaW5pdGlhbGl6ZWRcclxuICAgIHRoaXMuaWQgPSBmaWVsZHMuaWRcclxuICAgIHRoaXMuYXV0aG9yID0gZmllbGRzLmF1dGhvclxyXG4gICAgdGhpcy5jb250ZW50ID0gZmllbGRzLmNvbnRlbnRcclxuICAgIHRoaXMudGltZXN0YW1wID0gZmllbGRzLnRpbWVzdGFtcFxyXG4gICAgdGhpcy5saWtlcyA9IGZpZWxkcy5saWtlc1xyXG4gICAgdGhpcy5jb21tZW50cyA9IGZpZWxkcy5jb21tZW50c1xyXG4gICAgdGhpcy5taXJyb3JzID0gZmllbGRzLm1pcnJvcnNcclxuICAgIHRoaXMuaW1hZ2VzID0gZmllbGRzLmltYWdlc1xyXG4gICAgdGhpcy5yYXRpbmcgPSBmaWVsZHMucmF0aW5nXHJcbiAgICB0aGlzLmluX2tpbGxfem9uZSA9IGZpZWxkcy5pbl9raWxsX3pvbmVcclxuICB9XHJcbn1cclxuXHJcbi8vIEJvcnNoIHNjaGVtYXNcclxuY29uc3QgY3JlYXRlUHJvZmlsZVNjaGVtYSA9IG5ldyBNYXAoW1xyXG4gIFtDcmVhdGVQcm9maWxlSW5zdHJ1Y3Rpb24sIHtcclxuICAgIGtpbmQ6ICdzdHJ1Y3QnLFxyXG4gICAgZmllbGRzOiBbXHJcbiAgICAgIFsndXNlcm5hbWUnLCAnc3RyaW5nJ10sXHJcbiAgICAgIFsnYmlvJywgJ3N0cmluZyddLFxyXG4gICAgICBbJ3Byb2ZpbGVfaW1hZ2UnLCAnc3RyaW5nJ10sXHJcbiAgICAgIFsnY292ZXJfaW1hZ2UnLCAnc3RyaW5nJ10sXHJcbiAgICBdLFxyXG4gIH1dLFxyXG5dKVxyXG5cclxuY29uc3QgY3JlYXRlUG9zdFNjaGVtYSA9IG5ldyBNYXAoW1xyXG4gIFtDcmVhdGVQb3N0SW5zdHJ1Y3Rpb24sIHtcclxuICAgIGtpbmQ6ICdzdHJ1Y3QnLFxyXG4gICAgZmllbGRzOiBbXHJcbiAgICAgIFsnY29udGVudCcsICdzdHJpbmcnXSxcclxuICAgICAgWydpbWFnZXMnLCBbJ3N0cmluZyddXSxcclxuICAgIF0sXHJcbiAgfV0sXHJcbl0pXHJcblxyXG5jb25zdCBsaWtlUG9zdFNjaGVtYSA9IG5ldyBNYXAoW1xyXG4gIFtMaWtlUG9zdEluc3RydWN0aW9uLCB7XHJcbiAgICBraW5kOiAnc3RydWN0JyxcclxuICAgIGZpZWxkczogW1xyXG4gICAgICBbJ3Bvc3RfaWQnLCAndTY0J10sXHJcbiAgICBdLFxyXG4gIH1dLFxyXG5dKVxyXG5cclxuY29uc3QgcHJvZmlsZUFjY291bnRTY2hlbWEgPSBuZXcgTWFwKFtcclxuICBbUHJvZmlsZUFjY291bnQsIHtcclxuICAgIGtpbmQ6ICdzdHJ1Y3QnLFxyXG4gICAgZmllbGRzOiBbXHJcbiAgICAgIFsnaXNfaW5pdGlhbGl6ZWQnLCAndTgnXSwgIC8vIFJ1c3QgYm9vbCBpcyBzZXJpYWxpemVkIGFzIHU4XHJcbiAgICAgIFsnb3duZXInLCBbMzJdXSxcclxuICAgICAgWyd1c2VybmFtZScsICdzdHJpbmcnXSxcclxuICAgICAgWydiaW8nLCAnc3RyaW5nJ10sXHJcbiAgICAgIFsncHJvZmlsZV9pbWFnZScsICdzdHJpbmcnXSxcclxuICAgICAgWydjb3Zlcl9pbWFnZScsICdzdHJpbmcnXSxcclxuICAgICAgWydjcmVhdGVkX2F0JywgJ3U2NCddLFxyXG4gICAgICBbJ2ZvbGxvd2Vyc19jb3VudCcsICd1NjQnXSxcclxuICAgICAgWydmb2xsb3dpbmdfY291bnQnLCAndTY0J10sXHJcbiAgICAgIFsndXNlcl9jcmVkaXRfcmF0aW5nJywgJ2k2NCddLFxyXG4gICAgICBbJ3Bvc3RzX2NvdW50JywgJ3U2NCddLFxyXG4gICAgICBbJ2xhc3RfcG9zdF90aW1lc3RhbXAnLCAndTY0J10sXHJcbiAgICAgIFsnZGFpbHlfcG9zdF9jb3VudCcsICd1NjQnXSxcclxuICAgICAgWydpc192ZXJpZmllZCcsICd1OCddLCAgLy8gUnVzdCBib29sIGlzIHNlcmlhbGl6ZWQgYXMgdThcclxuICAgIF0sXHJcbiAgfV0sXHJcbl0pXHJcblxyXG5jb25zdCBwb3N0QWNjb3VudFNjaGVtYSA9IG5ldyBNYXAoW1xyXG4gIFtQb3N0QWNjb3VudCwge1xyXG4gICAga2luZDogJ3N0cnVjdCcsXHJcbiAgICBmaWVsZHM6IFtcclxuICAgICAgWydpc19pbml0aWFsaXplZCcsICd1OCddLCAgLy8gUnVzdCBib29sIGlzIHNlcmlhbGl6ZWQgYXMgdThcclxuICAgICAgWydpZCcsICd1NjQnXSxcclxuICAgICAgWydhdXRob3InLCBbMzJdXSxcclxuICAgICAgWydjb250ZW50JywgJ3N0cmluZyddLFxyXG4gICAgICBbJ3RpbWVzdGFtcCcsICd1NjQnXSxcclxuICAgICAgWydsaWtlcycsICd1NjQnXSxcclxuICAgICAgWydjb21tZW50cycsICd1NjQnXSxcclxuICAgICAgWydtaXJyb3JzJywgJ3U2NCddLFxyXG4gICAgICBbJ2ltYWdlcycsIFsnc3RyaW5nJ11dLFxyXG4gICAgICBbJ3JhdGluZycsICd1OCddLFxyXG4gICAgICBbJ2luX2tpbGxfem9uZScsICd1OCddLCAgLy8gUnVzdCBib29sIGlzIHNlcmlhbGl6ZWQgYXMgdThcclxuICAgIF0sXHJcbiAgfV0sXHJcbl0pXHJcblxyXG4vLyBDb21tdW5pdHkvU3ViQmxvY2sgaW50ZXJmYWNlXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ29tbXVuaXR5IHtcclxuICBpc0luaXRpYWxpemVkOiBib29sZWFuXHJcbiAgaWQ6IG51bWJlclxyXG4gIGNyZWF0b3I6IFB1YmxpY0tleVxyXG4gIG5hbWU6IHN0cmluZ1xyXG4gIGRlc2NyaXB0aW9uOiBzdHJpbmdcclxuICBhdmF0YXI6IHN0cmluZ1xyXG4gIHJ1bGVzOiBzdHJpbmdbXVxyXG4gIG1lbWJlckNvdW50OiBudW1iZXJcclxuICBjcmVhdGVkQXQ6IG51bWJlclxyXG4gIGlzUHJpdmF0ZTogYm9vbGVhblxyXG59XHJcblxyXG4vLyBDb21tdW5pdHkgc3RydWN0IGZvciBkZXNlcmlhbGl6YXRpb25cclxuY2xhc3MgQ29tbXVuaXR5QWNjb3VudCB7XHJcbiAgaXNfaW5pdGlhbGl6ZWQ6IG51bWJlclxyXG4gIGlkOiBiaWdpbnRcclxuICBjcmVhdG9yOiBVaW50OEFycmF5XHJcbiAgbmFtZTogc3RyaW5nXHJcbiAgZGVzY3JpcHRpb246IHN0cmluZ1xyXG4gIGF2YXRhcjogc3RyaW5nXHJcbiAgcnVsZXM6IHN0cmluZ1tdXHJcbiAgbWVtYmVyX2NvdW50OiBiaWdpbnRcclxuICBjcmVhdGVkX2F0OiBiaWdpbnRcclxuICBpc19wcml2YXRlOiBudW1iZXJcclxuXHJcbiAgY29uc3RydWN0b3IoZmllbGRzOiBhbnkpIHtcclxuICAgIHRoaXMuaXNfaW5pdGlhbGl6ZWQgPSBmaWVsZHMuaXNfaW5pdGlhbGl6ZWRcclxuICAgIHRoaXMuaWQgPSBmaWVsZHMuaWRcclxuICAgIHRoaXMuY3JlYXRvciA9IGZpZWxkcy5jcmVhdG9yXHJcbiAgICB0aGlzLm5hbWUgPSBmaWVsZHMubmFtZVxyXG4gICAgdGhpcy5kZXNjcmlwdGlvbiA9IGZpZWxkcy5kZXNjcmlwdGlvblxyXG4gICAgdGhpcy5hdmF0YXIgPSBmaWVsZHMuYXZhdGFyXHJcbiAgICB0aGlzLnJ1bGVzID0gZmllbGRzLnJ1bGVzXHJcbiAgICB0aGlzLm1lbWJlcl9jb3VudCA9IGZpZWxkcy5tZW1iZXJfY291bnRcclxuICAgIHRoaXMuY3JlYXRlZF9hdCA9IGZpZWxkcy5jcmVhdGVkX2F0XHJcbiAgICB0aGlzLmlzX3ByaXZhdGUgPSBmaWVsZHMuaXNfcHJpdmF0ZVxyXG4gIH1cclxufVxyXG5cclxuLy8gQ3JlYXRlIENvbW11bml0eSBpbnN0cnVjdGlvblxyXG5jbGFzcyBDcmVhdGVDb21tdW5pdHlJbnN0cnVjdGlvbiB7XHJcbiAgbmFtZTogc3RyaW5nXHJcbiAgZGVzY3JpcHRpb246IHN0cmluZ1xyXG4gIGF2YXRhcjogc3RyaW5nXHJcbiAgcnVsZXM6IHN0cmluZ1tdXHJcblxyXG4gIGNvbnN0cnVjdG9yKGZpZWxkczoge1xyXG4gICAgbmFtZTogc3RyaW5nXHJcbiAgICBkZXNjcmlwdGlvbjogc3RyaW5nXHJcbiAgICBhdmF0YXI6IHN0cmluZ1xyXG4gICAgcnVsZXM6IHN0cmluZ1tdXHJcbiAgfSkge1xyXG4gICAgdGhpcy5uYW1lID0gZmllbGRzLm5hbWVcclxuICAgIHRoaXMuZGVzY3JpcHRpb24gPSBmaWVsZHMuZGVzY3JpcHRpb25cclxuICAgIHRoaXMuYXZhdGFyID0gZmllbGRzLmF2YXRhclxyXG4gICAgdGhpcy5ydWxlcyA9IGZpZWxkcy5ydWxlc1xyXG4gIH1cclxufVxyXG5cclxuLy8gRm9sbG93IFByb2ZpbGUgaW5zdHJ1Y3Rpb25cclxuY2xhc3MgRm9sbG93UHJvZmlsZUluc3RydWN0aW9uIHtcclxuICBwcm9maWxlX2lkOiBVaW50OEFycmF5XHJcblxyXG4gIGNvbnN0cnVjdG9yKGZpZWxkczoge1xyXG4gICAgcHJvZmlsZV9pZDogUHVibGljS2V5XHJcbiAgfSkge1xyXG4gICAgdGhpcy5wcm9maWxlX2lkID0gZmllbGRzLnByb2ZpbGVfaWQudG9CdWZmZXIoKVxyXG4gIH1cclxufVxyXG5cclxuY29uc3QgY3JlYXRlQ29tbXVuaXR5U2NoZW1hID0gbmV3IE1hcChbXHJcbiAgW0NyZWF0ZUNvbW11bml0eUluc3RydWN0aW9uLCB7XHJcbiAgICBraW5kOiAnc3RydWN0JyxcclxuICAgIGZpZWxkczogW1xyXG4gICAgICBbJ25hbWUnLCAnc3RyaW5nJ10sXHJcbiAgICAgIFsnZGVzY3JpcHRpb24nLCAnc3RyaW5nJ10sXHJcbiAgICAgIFsnYXZhdGFyJywgJ3N0cmluZyddLFxyXG4gICAgICBbJ3J1bGVzJywgWydzdHJpbmcnXV0sXHJcbiAgICBdLFxyXG4gIH1dLFxyXG5dKVxyXG5cclxuY29uc3QgZm9sbG93UHJvZmlsZVNjaGVtYSA9IG5ldyBNYXAoW1xyXG4gIFtGb2xsb3dQcm9maWxlSW5zdHJ1Y3Rpb24sIHtcclxuICAgIGtpbmQ6ICdzdHJ1Y3QnLFxyXG4gICAgZmllbGRzOiBbXHJcbiAgICAgIFsncHJvZmlsZV9pZCcsIFszMl1dLFxyXG4gICAgXSxcclxuICB9XSxcclxuXSlcclxuXHJcbmNvbnN0IGNvbW11bml0eUFjY291bnRTY2hlbWEgPSBuZXcgTWFwKFtcclxuICBbQ29tbXVuaXR5QWNjb3VudCwge1xyXG4gICAga2luZDogJ3N0cnVjdCcsXHJcbiAgICBmaWVsZHM6IFtcclxuICAgICAgWydpc19pbml0aWFsaXplZCcsICd1OCddLFxyXG4gICAgICBbJ2lkJywgJ3U2NCddLFxyXG4gICAgICBbJ2NyZWF0b3InLCBbMzJdXSxcclxuICAgICAgWyduYW1lJywgJ3N0cmluZyddLFxyXG4gICAgICBbJ2Rlc2NyaXB0aW9uJywgJ3N0cmluZyddLFxyXG4gICAgICBbJ2F2YXRhcicsICdzdHJpbmcnXSxcclxuICAgICAgWydydWxlcycsIFsnc3RyaW5nJ11dLFxyXG4gICAgICBbJ21lbWJlcl9jb3VudCcsICd1NjQnXSxcclxuICAgICAgWydjcmVhdGVkX2F0JywgJ3U2NCddLFxyXG4gICAgICBbJ2lzX3ByaXZhdGUnLCAndTgnXSxcclxuICAgIF0sXHJcbiAgfV0sXHJcbl0pXHJcblxyXG4vLyBQcm9maWxlIGludGVyZmFjZVxyXG5leHBvcnQgaW50ZXJmYWNlIFByb2ZpbGUge1xyXG4gIGlzSW5pdGlhbGl6ZWQ6IGJvb2xlYW5cclxuICBvd25lcjogUHVibGljS2V5XHJcbiAgdXNlcm5hbWU6IHN0cmluZ1xyXG4gIGJpbzogc3RyaW5nXHJcbiAgcHJvZmlsZUltYWdlOiBzdHJpbmdcclxuICBjb3ZlckltYWdlOiBzdHJpbmdcclxuICBjcmVhdGVkQXQ6IG51bWJlclxyXG4gIGZvbGxvd2Vyc0NvdW50OiBudW1iZXJcclxuICBmb2xsb3dpbmdDb3VudDogbnVtYmVyXHJcbiAgdXNlckNyZWRpdFJhdGluZzogbnVtYmVyXHJcbiAgcG9zdHNDb3VudDogbnVtYmVyXHJcbiAgbGFzdFBvc3RUaW1lc3RhbXA6IG51bWJlclxyXG4gIGRhaWx5UG9zdENvdW50OiBudW1iZXJcclxuICBpc1ZlcmlmaWVkOiBib29sZWFuXHJcbn1cclxuXHJcbi8vIFBvc3QgaW50ZXJmYWNlXHJcbmV4cG9ydCBpbnRlcmZhY2UgUG9zdCB7XHJcbiAgaXNJbml0aWFsaXplZDogYm9vbGVhblxyXG4gIGlkOiBudW1iZXJcclxuICBhdXRob3I6IFB1YmxpY0tleVxyXG4gIGNvbnRlbnQ6IHN0cmluZ1xyXG4gIHRpbWVzdGFtcDogbnVtYmVyXHJcbiAgbGlrZXM6IG51bWJlclxyXG4gIGNvbW1lbnRzOiBudW1iZXJcclxuICBtaXJyb3JzOiBudW1iZXJcclxuICBpbWFnZXM6IHN0cmluZ1tdXHJcbiAgcmF0aW5nOiBQb3N0UmF0aW5nXHJcbiAgaW5LaWxsWm9uZTogYm9vbGVhblxyXG59XHJcblxyXG4vLyBDYWNoZSBmb3IgcHJvZmlsZSBsb29rdXBzIHRvIGF2b2lkIHJlcGVhdGVkIGJsb2NrY2hhaW4gY2FsbHNcclxuY29uc3QgcHJvZmlsZUNhY2hlID0gbmV3IE1hcDxzdHJpbmcsIFByb2ZpbGUgfCBudWxsPigpXHJcbmNvbnN0IENBQ0hFX0RVUkFUSU9OID0gNjAwMDAgLy8gMSBtaW51dGUgZm9yIG1lbW9yeSBjYWNoZSAoaW5jcmVhc2VkIGZyb20gMzAgc2Vjb25kcylcclxuXHJcbi8vIFBvc3RzIGNhY2hlXHJcbmxldCBwb3N0c0NhY2hlOiB7IHBvc3RzOiBQb3N0W10sIHRpbWVzdGFtcDogbnVtYmVyIH0gfCBudWxsID0gbnVsbFxyXG5jb25zdCBQT1NUU19DQUNIRV9EVVJBVElPTiA9IDMwMDAwIC8vIDMwIHNlY29uZHMgZm9yIHBvc3RzIGNhY2hlIChpbmNyZWFzZWQgZnJvbSAxMCBzZWNvbmRzKVxyXG5cclxuLy8gbG9jYWxTdG9yYWdlIGNhY2hlIGNvbmZpZ3VyYXRpb24gLSBVcGRhdGVkIHRvIHN1cHBvcnQgbXVsdGlwbGUgcHJvZmlsZXNcclxuY29uc3QgTE9DQUxTVE9SQUdFX0NBQ0hFX1BSRUZJWCA9ICdibG9ja3NfcHJvZmlsZV8nXHJcbmNvbnN0IExPQ0FMU1RPUkFHRV9DQUNIRV9EVVJBVElPTiA9IDEwICogNjAgKiAxMDAwIC8vIDEwIG1pbnV0ZXMgZm9yIGxvY2FsU3RvcmFnZSBjYWNoZSAoaW5jcmVhc2VkIGZyb20gNSBtaW51dGVzKVxyXG5cclxuaW50ZXJmYWNlIENhY2hlZFByb2ZpbGUge1xyXG4gIHByb2ZpbGU6IFByb2ZpbGUgfCBudWxsXHJcbiAgdGltZXN0YW1wOiBudW1iZXJcclxuICB3YWxsZXRBZGRyZXNzOiBzdHJpbmdcclxufVxyXG5cclxuLy8gbG9jYWxTdG9yYWdlIGNhY2hlIHV0aWxpdGllcyAtIFVwZGF0ZWQgdG8gc3VwcG9ydCBtdWx0aXBsZSBwcm9maWxlc1xyXG5jb25zdCBzYXZlUHJvZmlsZVRvTG9jYWxTdG9yYWdlID0gKHdhbGxldEFkZHJlc3M6IHN0cmluZywgcHJvZmlsZTogUHJvZmlsZSB8IG51bGwpID0+IHtcclxuICB0cnkge1xyXG4gICAgY29uc3QgY2FjaGVLZXkgPSBgJHtMT0NBTFNUT1JBR0VfQ0FDSEVfUFJFRklYfSR7d2FsbGV0QWRkcmVzc31gXHJcbiAgICBjb25zdCBjYWNoZURhdGE6IENhY2hlZFByb2ZpbGUgPSB7XHJcbiAgICAgIHByb2ZpbGUsXHJcbiAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSxcclxuICAgICAgd2FsbGV0QWRkcmVzc1xyXG4gICAgfVxyXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oY2FjaGVLZXksIEpTT04uc3RyaW5naWZ5KGNhY2hlRGF0YSkpXHJcbiAgICBjb25zb2xlLmxvZyhg8J+SviBQcm9maWxlIGNhY2hlZCB0byBsb2NhbFN0b3JhZ2UgZm9yICR7d2FsbGV0QWRkcmVzcy5zbGljZSgwLCA4KX1gKVxyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLndhcm4oJ0ZhaWxlZCB0byBzYXZlIHByb2ZpbGUgdG8gbG9jYWxTdG9yYWdlOicsIGVycm9yKVxyXG4gIH1cclxufVxyXG5cclxuY29uc3QgZ2V0UHJvZmlsZUZyb21Mb2NhbFN0b3JhZ2UgPSAod2FsbGV0QWRkcmVzczogc3RyaW5nKTogUHJvZmlsZSB8IG51bGwgPT4ge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCBjYWNoZUtleSA9IGAke0xPQ0FMU1RPUkFHRV9DQUNIRV9QUkVGSVh9JHt3YWxsZXRBZGRyZXNzfWBcclxuICAgIGNvbnN0IGNhY2hlZCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKGNhY2hlS2V5KVxyXG4gICAgaWYgKCFjYWNoZWQpIHJldHVybiBudWxsXHJcblxyXG4gICAgY29uc3QgY2FjaGVEYXRhOiBDYWNoZWRQcm9maWxlID0gSlNPTi5wYXJzZShjYWNoZWQpXHJcbiAgICBcclxuICAgIC8vIENoZWNrIGlmIGNhY2hlIGlzIGV4cGlyZWRcclxuICAgIGlmIChEYXRlLm5vdygpIC0gY2FjaGVEYXRhLnRpbWVzdGFtcCA+IExPQ0FMU1RPUkFHRV9DQUNIRV9EVVJBVElPTikge1xyXG4gICAgICBjb25zb2xlLmxvZyhg4o+wIENhY2hlIGV4cGlyZWQgZm9yICR7d2FsbGV0QWRkcmVzcy5zbGljZSgwLCA4KX0sIGNsZWFyaW5nYClcclxuICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oY2FjaGVLZXkpXHJcbiAgICAgIHJldHVybiBudWxsXHJcbiAgICB9XHJcbiAgICBcclxuICAgIGNvbnNvbGUubG9nKGDimqEgVXNpbmcgY2FjaGVkIHByb2ZpbGUgZnJvbSBsb2NhbFN0b3JhZ2UgZm9yICR7d2FsbGV0QWRkcmVzcy5zbGljZSgwLCA4KX1gKVxyXG4gICAgcmV0dXJuIGNhY2hlRGF0YS5wcm9maWxlXHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUud2FybignRmFpbGVkIHRvIHJlYWQgcHJvZmlsZSBmcm9tIGxvY2FsU3RvcmFnZTonLCBlcnJvcilcclxuICAgIGNvbnN0IGNhY2hlS2V5ID0gYCR7TE9DQUxTVE9SQUdFX0NBQ0hFX1BSRUZJWH0ke3dhbGxldEFkZHJlc3N9YFxyXG4gICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oY2FjaGVLZXkpXHJcbiAgICByZXR1cm4gbnVsbFxyXG4gIH1cclxufVxyXG5cclxuY29uc3QgY2xlYXJQcm9maWxlQ2FjaGUgPSAod2FsbGV0QWRkcmVzcz86IHN0cmluZykgPT4ge1xyXG4gIC8vIENsZWFyIG1lbW9yeSBjYWNoZVxyXG4gIGlmICh3YWxsZXRBZGRyZXNzKSB7XHJcbiAgICBwcm9maWxlQ2FjaGUuZGVsZXRlKHdhbGxldEFkZHJlc3MpXHJcbiAgICAvLyBDbGVhciBsb2NhbFN0b3JhZ2UgY2FjaGUgZm9yIHNwZWNpZmljIHVzZXJcclxuICAgIGNvbnN0IGNhY2hlS2V5ID0gYCR7TE9DQUxTVE9SQUdFX0NBQ0hFX1BSRUZJWH0ke3dhbGxldEFkZHJlc3N9YFxyXG4gICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oY2FjaGVLZXkpXHJcbiAgfSBlbHNlIHtcclxuICAgIHByb2ZpbGVDYWNoZS5jbGVhcigpXHJcbiAgICAvLyBDbGVhciBhbGwgbG9jYWxTdG9yYWdlIHByb2ZpbGUgY2FjaGVzXHJcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMobG9jYWxTdG9yYWdlKVxyXG4gICAga2V5cy5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICAgIGlmIChrZXkuc3RhcnRzV2l0aChMT0NBTFNUT1JBR0VfQ0FDSEVfUFJFRklYKSkge1xyXG4gICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGtleSlcclxuICAgICAgfVxyXG4gICAgfSlcclxuICB9XHJcbiAgXHJcbiAgLy8gQ2xlYXIgcG9zdHMgY2FjaGVcclxuICBwb3N0c0NhY2hlID0gbnVsbFxyXG4gIFxyXG4gIGNvbnNvbGUubG9nKCfwn5eR77iPIFByb2ZpbGUgYW5kIHBvc3RzIGNhY2hlIGNsZWFyZWQnKVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdXNlQmxvY2tzUHJvZ3JhbSgpIHtcclxuICBjb25zdCB7IGNvbm5lY3Rpb24gfSA9IHVzZUNvbm5lY3Rpb24oKVxyXG4gIGNvbnN0IHsgcHVibGljS2V5LCBzZW5kVHJhbnNhY3Rpb24gfSA9IHVzZVdhbGxldCgpXHJcblxyXG4gIC8vIEdldCBwcm9maWxlIFBEQVxyXG4gIGNvbnN0IGdldFByb2ZpbGVQREEgPSBhc3luYyAodXNlclB1YmxpY0tleTogUHVibGljS2V5LCB1c2VybmFtZTogc3RyaW5nKTogUHJvbWlzZTxQdWJsaWNLZXk+ID0+IHtcclxuICAgIGNvbnN0IFtwcm9maWxlUERBXSA9IGF3YWl0IFB1YmxpY0tleS5maW5kUHJvZ3JhbUFkZHJlc3MoXHJcbiAgICAgIFt1c2VyUHVibGljS2V5LnRvQnVmZmVyKCksIEJ1ZmZlci5mcm9tKCdwcm9maWxlJyksIEJ1ZmZlci5mcm9tKHVzZXJuYW1lKV0sXHJcbiAgICAgIFBST0dSQU1fSURcclxuICAgIClcclxuICAgIHJldHVybiBwcm9maWxlUERBXHJcbiAgfVxyXG5cclxuICAvLyBHZXQgcG9zdCBQREFcclxuICBjb25zdCBnZXRQb3N0UERBID0gYXN5bmMgKHVzZXJQdWJsaWNLZXk6IFB1YmxpY0tleSwgcG9zdElkOiBudW1iZXIpOiBQcm9taXNlPFB1YmxpY0tleT4gPT4ge1xyXG4gICAgY29uc3QgW3Bvc3RQREFdID0gYXdhaXQgUHVibGljS2V5LmZpbmRQcm9ncmFtQWRkcmVzcyhcclxuICAgICAgW3VzZXJQdWJsaWNLZXkudG9CdWZmZXIoKSwgQnVmZmVyLmZyb20oJ3Bvc3QnKSwgQnVmZmVyLmZyb20ocG9zdElkLnRvU3RyaW5nKCkpXSxcclxuICAgICAgUFJPR1JBTV9JRFxyXG4gICAgKVxyXG4gICAgcmV0dXJuIHBvc3RQREFcclxuICB9XHJcblxyXG4gIC8vIEhlbHBlciBmdW5jdGlvbiB0byBjaGVjayBpZiBwcm9ncmFtIGV4aXN0c1xyXG4gIGNvbnN0IGNoZWNrUHJvZ3JhbUV4aXN0cyA9IGFzeW5jICgpOiBQcm9taXNlPGJvb2xlYW4+ID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHByb2dyYW1JbmZvID0gYXdhaXQgY29ubmVjdGlvbi5nZXRBY2NvdW50SW5mbyhQUk9HUkFNX0lEKVxyXG4gICAgICByZXR1cm4gcHJvZ3JhbUluZm8gIT09IG51bGwgJiYgcHJvZ3JhbUluZm8uZXhlY3V0YWJsZVxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgY2hlY2tpbmcgcHJvZ3JhbSBleGlzdGVuY2U6JywgZXJyb3IpXHJcbiAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGNoZWNrIFNPTCBiYWxhbmNlXHJcbiAgY29uc3QgY2hlY2tTT0xCYWxhbmNlID0gYXN5bmMgKCk6IFByb21pc2U8bnVtYmVyPiA9PiB7XHJcbiAgICBpZiAoIXB1YmxpY0tleSkgcmV0dXJuIDBcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IGJhbGFuY2UgPSBhd2FpdCBjb25uZWN0aW9uLmdldEJhbGFuY2UocHVibGljS2V5KVxyXG4gICAgICByZXR1cm4gYmFsYW5jZSAvIExBTVBPUlRTX1BFUl9TT0xcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGNoZWNraW5nIFNPTCBiYWxhbmNlOicsIGVycm9yKVxyXG4gICAgICByZXR1cm4gMFxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gQ29udmVydCBQcm9maWxlQWNjb3VudCB0byBQcm9maWxlIGludGVyZmFjZVxyXG4gIGNvbnN0IGNvbnZlcnRQcm9maWxlQWNjb3VudCA9IChwcm9maWxlQWNjb3VudDogUHJvZmlsZUFjY291bnQpOiBQcm9maWxlID0+IHtcclxuICAgIC8vIENhbGN1bGF0ZSBVQ1IgYmFzZWQgb24gYWN0aXZpdHlcclxuICAgIGNvbnN0IGNhbGN1bGF0ZVVDUiA9IChwcm9maWxlOiBQcm9maWxlQWNjb3VudCkgPT4ge1xyXG4gICAgICBjb25zdCBwb3N0c0NvdW50ID0gTnVtYmVyKHByb2ZpbGUucG9zdHNfY291bnQpXHJcbiAgICAgIGNvbnN0IGZvbGxvd2Vyc0NvdW50ID0gTnVtYmVyKHByb2ZpbGUuZm9sbG93ZXJzX2NvdW50KVxyXG4gICAgICBjb25zdCBmb2xsb3dpbmdDb3VudCA9IE51bWJlcihwcm9maWxlLmZvbGxvd2luZ19jb3VudClcclxuICAgICAgXHJcbiAgICAgIC8vIEJhc2UgVUNSIGNhbGN1bGF0aW9uIGFsZ29yaXRobVxyXG4gICAgICBsZXQgdWNyID0gMS4wIC8vIFN0YXJ0IHdpdGggYmFzZSByYXRpbmdcclxuICAgICAgXHJcbiAgICAgIC8vIFBvc3RzIGZhY3RvciAoMC4xIHBvaW50cyBwZXIgcG9zdCwgbWF4IDIuMCBwb2ludHMpXHJcbiAgICAgIGNvbnN0IHBvc3RzU2NvcmUgPSBNYXRoLm1pbihwb3N0c0NvdW50ICogMC4xLCAyLjApXHJcbiAgICAgIFxyXG4gICAgICAvLyBGb2xsb3dlcnMgZmFjdG9yICgwLjA1IHBvaW50cyBwZXIgZm9sbG93ZXIsIG1heCAxLjUgcG9pbnRzKVxyXG4gICAgICBjb25zdCBmb2xsb3dlcnNTY29yZSA9IE1hdGgubWluKGZvbGxvd2Vyc0NvdW50ICogMC4wNSwgMS41KVxyXG4gICAgICBcclxuICAgICAgLy8gRm9sbG93aW5nL2ZvbGxvd2VycyByYXRpbyAoaGVhbHRoeSByYXRpbyA9IGJvbnVzKVxyXG4gICAgICBsZXQgcmF0aW9Cb251cyA9IDBcclxuICAgICAgaWYgKGZvbGxvd2Vyc0NvdW50ID4gMCAmJiBmb2xsb3dpbmdDb3VudCA+IDApIHtcclxuICAgICAgICBjb25zdCByYXRpbyA9IGZvbGxvd2Vyc0NvdW50IC8gZm9sbG93aW5nQ291bnRcclxuICAgICAgICBpZiAocmF0aW8gPj0gMC41ICYmIHJhdGlvIDw9IDIuMCkgeyAvLyBIZWFsdGh5IHJhdGlvXHJcbiAgICAgICAgICByYXRpb0JvbnVzID0gMC4zXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICAvLyBBY2NvdW50IGFnZSBmYWN0b3IgKG9sZGVyIGFjY291bnRzIGdldCBib251cylcclxuICAgICAgY29uc3QgYWNjb3VudEFnZSA9IERhdGUubm93KCkgLSBOdW1iZXIocHJvZmlsZS5jcmVhdGVkX2F0KSAqIDEwMDBcclxuICAgICAgY29uc3QgZGF5c09sZCA9IGFjY291bnRBZ2UgLyAoMTAwMCAqIDYwICogNjAgKiAyNClcclxuICAgICAgY29uc3QgYWdlQm9udXMgPSBNYXRoLm1pbihkYXlzT2xkIC8gMzAgKiAwLjIsIDEuMCkgLy8gMC4yIHBvaW50cyBwZXIgbW9udGgsIG1heCAxLjBcclxuICAgICAgXHJcbiAgICAgIC8vIFZlcmlmaWNhdGlvbiBib251c1xyXG4gICAgICBjb25zdCB2ZXJpZmljYXRpb25Cb251cyA9IHByb2ZpbGUuaXNfdmVyaWZpZWQgPT09IDEgPyAwLjUgOiAwXHJcbiAgICAgIFxyXG4gICAgICAvLyBBY3Rpdml0eSBmYWN0b3IgKHBvc3RpbmcgcmVndWxhcmx5KVxyXG4gICAgICBjb25zdCBsYXN0UG9zdEFnZSA9IERhdGUubm93KCkgLSBOdW1iZXIocHJvZmlsZS5sYXN0X3Bvc3RfdGltZXN0YW1wKSAqIDEwMDBcclxuICAgICAgY29uc3QgZGF5c1NpbmNlTGFzdFBvc3QgPSBsYXN0UG9zdEFnZSAvICgxMDAwICogNjAgKiA2MCAqIDI0KVxyXG4gICAgICBjb25zdCBhY3Rpdml0eUJvbnVzID0gZGF5c1NpbmNlTGFzdFBvc3QgPCA3ID8gMC4zIDogZGF5c1NpbmNlTGFzdFBvc3QgPCAzMCA/IDAuMSA6IDBcclxuICAgICAgXHJcbiAgICAgIHVjciA9IHVjciArIHBvc3RzU2NvcmUgKyBmb2xsb3dlcnNTY29yZSArIHJhdGlvQm9udXMgKyBhZ2VCb251cyArIHZlcmlmaWNhdGlvbkJvbnVzICsgYWN0aXZpdHlCb251c1xyXG4gICAgICBcclxuICAgICAgLy8gQ2FwIGF0IDUuMCBtYXhcclxuICAgICAgcmV0dXJuIE1hdGgubWluKHVjciwgNS4wKVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIGlzSW5pdGlhbGl6ZWQ6IHByb2ZpbGVBY2NvdW50LmlzX2luaXRpYWxpemVkID09PSAxLFxyXG4gICAgICBvd25lcjogbmV3IFB1YmxpY0tleShwcm9maWxlQWNjb3VudC5vd25lciksXHJcbiAgICAgIHVzZXJuYW1lOiBwcm9maWxlQWNjb3VudC51c2VybmFtZSxcclxuICAgICAgYmlvOiBwcm9maWxlQWNjb3VudC5iaW8sXHJcbiAgICAgIHByb2ZpbGVJbWFnZTogcHJvZmlsZUFjY291bnQucHJvZmlsZV9pbWFnZSxcclxuICAgICAgY292ZXJJbWFnZTogcHJvZmlsZUFjY291bnQuY292ZXJfaW1hZ2UsXHJcbiAgICAgIGNyZWF0ZWRBdDogTnVtYmVyKHByb2ZpbGVBY2NvdW50LmNyZWF0ZWRfYXQpICogMTAwMCwgLy8gQ29udmVydCBzZWNvbmRzIHRvIG1pbGxpc2Vjb25kc1xyXG4gICAgICBmb2xsb3dlcnNDb3VudDogTnVtYmVyKHByb2ZpbGVBY2NvdW50LmZvbGxvd2Vyc19jb3VudCksXHJcbiAgICAgIGZvbGxvd2luZ0NvdW50OiBOdW1iZXIocHJvZmlsZUFjY291bnQuZm9sbG93aW5nX2NvdW50KSxcclxuICAgICAgdXNlckNyZWRpdFJhdGluZzogY2FsY3VsYXRlVUNSKHByb2ZpbGVBY2NvdW50KSwgLy8gVXNlIGNhbGN1bGF0ZWQgVUNSIGluc3RlYWQgb2Ygc3RvcmVkIHZhbHVlXHJcbiAgICAgIHBvc3RzQ291bnQ6IE51bWJlcihwcm9maWxlQWNjb3VudC5wb3N0c19jb3VudCksXHJcbiAgICAgIGxhc3RQb3N0VGltZXN0YW1wOiBOdW1iZXIocHJvZmlsZUFjY291bnQubGFzdF9wb3N0X3RpbWVzdGFtcCkgKiAxMDAwLCAvLyBDb252ZXJ0IHNlY29uZHMgdG8gbWlsbGlzZWNvbmRzXHJcbiAgICAgIGRhaWx5UG9zdENvdW50OiBOdW1iZXIocHJvZmlsZUFjY291bnQuZGFpbHlfcG9zdF9jb3VudCksXHJcbiAgICAgIGlzVmVyaWZpZWQ6IHByb2ZpbGVBY2NvdW50LmlzX3ZlcmlmaWVkID09PSAxLFxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gQ29udmVydCBQb3N0QWNjb3VudCB0byBQb3N0IGludGVyZmFjZVxyXG4gIGNvbnN0IGNvbnZlcnRQb3N0QWNjb3VudCA9IChwb3N0QWNjb3VudDogUG9zdEFjY291bnQpOiBQb3N0ID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGlzSW5pdGlhbGl6ZWQ6IHBvc3RBY2NvdW50LmlzX2luaXRpYWxpemVkID09PSAxLFxyXG4gICAgICBpZDogTnVtYmVyKHBvc3RBY2NvdW50LmlkKSxcclxuICAgICAgYXV0aG9yOiBuZXcgUHVibGljS2V5KHBvc3RBY2NvdW50LmF1dGhvciksXHJcbiAgICAgIGNvbnRlbnQ6IHBvc3RBY2NvdW50LmNvbnRlbnQsXHJcbiAgICAgIHRpbWVzdGFtcDogTnVtYmVyKHBvc3RBY2NvdW50LnRpbWVzdGFtcCkgKiAxMDAwLCAvLyBDb252ZXJ0IHNlY29uZHMgdG8gbWlsbGlzZWNvbmRzXHJcbiAgICAgIGxpa2VzOiBOdW1iZXIocG9zdEFjY291bnQubGlrZXMpLFxyXG4gICAgICBjb21tZW50czogTnVtYmVyKHBvc3RBY2NvdW50LmNvbW1lbnRzKSxcclxuICAgICAgbWlycm9yczogTnVtYmVyKHBvc3RBY2NvdW50Lm1pcnJvcnMpLFxyXG4gICAgICBpbWFnZXM6IHBvc3RBY2NvdW50LmltYWdlcyxcclxuICAgICAgcmF0aW5nOiBwb3N0QWNjb3VudC5yYXRpbmcgYXMgUG9zdFJhdGluZyxcclxuICAgICAgaW5LaWxsWm9uZTogcG9zdEFjY291bnQuaW5fa2lsbF96b25lID09PSAxLFxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gQ3JlYXRlIHVzZXIgcHJvZmlsZSAtIFJFQUwgSU1QTEVNRU5UQVRJT05cclxuICBjb25zdCBjcmVhdGVQcm9maWxlID0gYXN5bmMgKFxyXG4gICAgdXNlcm5hbWU6IHN0cmluZyxcclxuICAgIGJpbzogc3RyaW5nLFxyXG4gICAgcHJvZmlsZUltYWdlOiBzdHJpbmcsXHJcbiAgICBjb3ZlckltYWdlOiBzdHJpbmdcclxuICApID0+IHtcclxuICAgIGlmICghcHVibGljS2V5KSB0aHJvdyBuZXcgRXJyb3IoJ1dhbGxldCBub3QgY29ubmVjdGVkJylcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zb2xlLmxvZygn8J+UjSBSdW5uaW5nIHByZS1mbGlnaHQgY2hlY2tzLi4uJylcclxuICAgICAgXHJcbiAgICAgIGNvbnN0IGJhbGFuY2UgPSBhd2FpdCBjaGVja1NPTEJhbGFuY2UoKVxyXG4gICAgICBjb25zb2xlLmxvZyhg8J+SsCBTT0wgQmFsYW5jZTogJHtiYWxhbmNlfWApXHJcbiAgICAgIGlmIChiYWxhbmNlIDwgMC4xKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnN1ZmZpY2llbnQgU09MIGJhbGFuY2U6ICR7YmFsYW5jZX0uIFlvdSBuZWVkIGF0IGxlYXN0IDAuMSBTT0wgZm9yIHRyYW5zYWN0aW9uIGZlZXMgYW5kIGFjY291bnQgY3JlYXRpb24uYClcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3QgcHJvZ3JhbUV4aXN0cyA9IGF3YWl0IGNoZWNrUHJvZ3JhbUV4aXN0cygpXHJcbiAgICAgIGNvbnNvbGUubG9nKGDwn5OLIFByb2dyYW0gZXhpc3RzOiAke3Byb2dyYW1FeGlzdHN9YClcclxuICAgICAgaWYgKCFwcm9ncmFtRXhpc3RzKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBQcm9ncmFtIG5vdCBmb3VuZCBhdCBhZGRyZXNzOiAke1BST0dSQU1fSUQudG9TdHJpbmcoKX0uIE1ha2Ugc3VyZSB0aGUgcHJvZ3JhbSBpcyBkZXBsb3llZCBvbiAke2NvbmZpZy5zb2xhbmEubmV0d29ya30uYClcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc29sZS5sb2coJ+KchSBQcmUtZmxpZ2h0IGNoZWNrcyBwYXNzZWQnKVxyXG5cclxuICAgICAgY29uc3QgcHJvZmlsZVBEQSA9IGF3YWl0IGdldFByb2ZpbGVQREEocHVibGljS2V5LCB1c2VybmFtZSlcclxuICAgICAgY29uc29sZS5sb2coYPCfk40gUHJvZmlsZSBQREE6ICR7cHJvZmlsZVBEQS50b1N0cmluZygpfWApXHJcblxyXG4gICAgICBjb25zdCBpbnN0cnVjdGlvbkRhdGEgPSBuZXcgQ3JlYXRlUHJvZmlsZUluc3RydWN0aW9uKHtcclxuICAgICAgICB1c2VybmFtZSxcclxuICAgICAgICBiaW8sXHJcbiAgICAgICAgcHJvZmlsZV9pbWFnZTogcHJvZmlsZUltYWdlLFxyXG4gICAgICAgIGNvdmVyX2ltYWdlOiBjb3ZlckltYWdlLFxyXG4gICAgICB9KVxyXG5cclxuICAgICAgY29uc3QgY3JlYXRlUHJvZmlsZVZhcmlhbnQgPSBCdWZmZXIuZnJvbShbMF0pXHJcbiAgICAgIGNvbnN0IHNlcmlhbGl6ZWREYXRhID0gc2VyaWFsaXplKGNyZWF0ZVByb2ZpbGVTY2hlbWEsIGluc3RydWN0aW9uRGF0YSlcclxuICAgICAgY29uc3QgZnVsbEluc3RydWN0aW9uRGF0YSA9IEJ1ZmZlci5jb25jYXQoW2NyZWF0ZVByb2ZpbGVWYXJpYW50LCBCdWZmZXIuZnJvbShzZXJpYWxpemVkRGF0YSldKVxyXG5cclxuICAgICAgY29uc3QgaW5zdHJ1Y3Rpb24gPSBuZXcgVHJhbnNhY3Rpb25JbnN0cnVjdGlvbih7XHJcbiAgICAgICAga2V5czogW1xyXG4gICAgICAgICAgeyBwdWJrZXk6IHB1YmxpY0tleSwgaXNTaWduZXI6IHRydWUsIGlzV3JpdGFibGU6IHRydWUgfSxcclxuICAgICAgICAgIHsgcHVia2V5OiBwcm9maWxlUERBLCBpc1NpZ25lcjogZmFsc2UsIGlzV3JpdGFibGU6IHRydWUgfSxcclxuICAgICAgICAgIHsgcHVia2V5OiBTeXN0ZW1Qcm9ncmFtLnByb2dyYW1JZCwgaXNTaWduZXI6IGZhbHNlLCBpc1dyaXRhYmxlOiBmYWxzZSB9LFxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgcHJvZ3JhbUlkOiBQUk9HUkFNX0lELFxyXG4gICAgICAgIGRhdGE6IGZ1bGxJbnN0cnVjdGlvbkRhdGEsXHJcbiAgICAgIH0pXHJcblxyXG4gICAgICBjb25zdCB0cmFuc2FjdGlvbiA9IG5ldyBUcmFuc2FjdGlvbigpLmFkZChpbnN0cnVjdGlvbilcclxuICAgICAgY29uc3QgeyBibG9ja2hhc2ggfSA9IGF3YWl0IGNvbm5lY3Rpb24uZ2V0TGF0ZXN0QmxvY2toYXNoKCdwcm9jZXNzZWQnKVxyXG4gICAgICB0cmFuc2FjdGlvbi5yZWNlbnRCbG9ja2hhc2ggPSBibG9ja2hhc2hcclxuICAgICAgdHJhbnNhY3Rpb24uZmVlUGF5ZXIgPSBwdWJsaWNLZXlcclxuXHJcbiAgICAgIGNvbnN0IHNpbXVsYXRpb24gPSBhd2FpdCBjb25uZWN0aW9uLnNpbXVsYXRlVHJhbnNhY3Rpb24odHJhbnNhY3Rpb24pXHJcbiAgICAgIGlmIChzaW11bGF0aW9uLnZhbHVlLmVycikge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVHJhbnNhY3Rpb24gc2ltdWxhdGlvbiBmYWlsZWQ6ICR7SlNPTi5zdHJpbmdpZnkoc2ltdWxhdGlvbi52YWx1ZS5lcnIpfWApXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IHNpZ25hdHVyZSA9IGF3YWl0IHNlbmRUcmFuc2FjdGlvbih0cmFuc2FjdGlvbiwgY29ubmVjdGlvbiwge1xyXG4gICAgICAgIHNraXBQcmVmbGlnaHQ6IGZhbHNlLFxyXG4gICAgICAgIHByZWZsaWdodENvbW1pdG1lbnQ6ICdwcm9jZXNzZWQnLFxyXG4gICAgICAgIG1heFJldHJpZXM6IDMsXHJcbiAgICAgIH0pXHJcblxyXG4gICAgICBhd2FpdCBjb25uZWN0aW9uLmNvbmZpcm1UcmFuc2FjdGlvbih7XHJcbiAgICAgICAgc2lnbmF0dXJlLFxyXG4gICAgICAgIGJsb2NraGFzaCxcclxuICAgICAgICBsYXN0VmFsaWRCbG9ja0hlaWdodDogKGF3YWl0IGNvbm5lY3Rpb24uZ2V0TGF0ZXN0QmxvY2toYXNoKCkpLmxhc3RWYWxpZEJsb2NrSGVpZ2h0LFxyXG4gICAgICB9LCAncHJvY2Vzc2VkJylcclxuICAgICAgXHJcbiAgICAgIC8vIEludmFsaWRhdGUgY2FjaGUgYWZ0ZXIgcHJvZmlsZSBjcmVhdGlvblxyXG4gICAgICBjbGVhclByb2ZpbGVDYWNoZShwdWJsaWNLZXkudG9TdHJpbmcoKSlcclxuICAgICAgXHJcbiAgICAgIHRvYXN0LnN1Y2Nlc3MoJ1Byb2ZpbGUgY3JlYXRlZCBzdWNjZXNzZnVsbHkhJylcclxuICAgICAgcmV0dXJuIHNpZ25hdHVyZVxyXG4gICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCfinYwgUHJvZmlsZSBjcmVhdGlvbiBlcnJvcjonLCBlcnJvcilcclxuICAgICAgdG9hc3QuZXJyb3IoYFRyYW5zYWN0aW9uIGZhaWxlZDogJHtlcnJvci5tZXNzYWdlIHx8ICdVbmtub3duIGVycm9yJ31gKVxyXG4gICAgICB0aHJvdyBlcnJvclxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gUHJvZHVjdGlvbi1yZWFkeSBwcm9maWxlIGRldGVjdGlvbiB3aXRoIGxvY2FsU3RvcmFnZSBjYWNoaW5nIC0gSW1wcm92ZWQgZm9yIG11bHRpcGxlIHVzZXJzXHJcbiAgY29uc3QgZ2V0UHJvZmlsZSA9IGFzeW5jICh1c2VyUHVibGljS2V5OiBQdWJsaWNLZXkpOiBQcm9taXNlPFByb2ZpbGUgfCBudWxsPiA9PiB7XHJcbiAgICBjb25zdCBjYWNoZUtleSA9IHVzZXJQdWJsaWNLZXkudG9TdHJpbmcoKVxyXG4gICAgXHJcbiAgICB0cnkge1xyXG4gICAgICAvLyAxLiBDaGVjayBsb2NhbFN0b3JhZ2UgY2FjaGUgZmlyc3QgKGZhc3Rlc3QpXHJcbiAgICAgIGNvbnN0IGNhY2hlZFByb2ZpbGUgPSBnZXRQcm9maWxlRnJvbUxvY2FsU3RvcmFnZShjYWNoZUtleSlcclxuICAgICAgaWYgKGNhY2hlZFByb2ZpbGUgIT09IG51bGwpIHtcclxuICAgICAgICAvLyBBbHNvIHVwZGF0ZSBtZW1vcnkgY2FjaGVcclxuICAgICAgICBwcm9maWxlQ2FjaGUuc2V0KGNhY2hlS2V5LCBjYWNoZWRQcm9maWxlKVxyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4gcHJvZmlsZUNhY2hlLmRlbGV0ZShjYWNoZUtleSksIENBQ0hFX0RVUkFUSU9OKVxyXG4gICAgICAgIHJldHVybiBjYWNoZWRQcm9maWxlXHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIC8vIDIuIENoZWNrIG1lbW9yeSBjYWNoZVxyXG4gICAgICBpZiAocHJvZmlsZUNhY2hlLmhhcyhjYWNoZUtleSkpIHtcclxuICAgICAgICBjb25zdCBjYWNoZWQgPSBwcm9maWxlQ2FjaGUuZ2V0KGNhY2hlS2V5KVxyXG4gICAgICAgIHJldHVybiBjYWNoZWQgPz8gbnVsbFxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyAzLiBGZXRjaCBmcm9tIGJsb2NrY2hhaW4gKHNsb3dlc3QpXHJcbiAgICAgIGNvbnNvbGUubG9nKGDwn5SNIEZldGNoaW5nIHByb2ZpbGUgZnJvbSBibG9ja2NoYWluIGZvcjogJHt1c2VyUHVibGljS2V5LnRvU3RyaW5nKCkuc2xpY2UoMCwgOCl9Li4uYClcclxuICAgICAgXHJcbiAgICAgIGNvbnN0IGFjY291bnRzID0gYXdhaXQgY29ubmVjdGlvbi5nZXRQcm9ncmFtQWNjb3VudHMoUFJPR1JBTV9JRClcclxuICAgICAgXHJcbiAgICAgIGNvbnNvbGUubG9nKGDwn5OKIEZvdW5kICR7YWNjb3VudHMubGVuZ3RofSBwcm9ncmFtIGFjY291bnRzIHRvIHNjYW4gZm9yIHByb2ZpbGVzYClcclxuXHJcbiAgICAgIGxldCBwcm9maWxlc0ZvdW5kID0gMFxyXG4gICAgICBcclxuICAgICAgLy8gU2NhbiB0aHJvdWdoIGFjY291bnRzIHRvIGZpbmQgdXNlcidzIHByb2ZpbGVcclxuICAgICAgZm9yIChjb25zdCB7IGFjY291bnQsIHB1YmtleSB9IG9mIGFjY291bnRzKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgIGlmIChhY2NvdW50LmRhdGEubGVuZ3RoID09PSAwKSBjb250aW51ZVxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICAvLyBUcnkgbWFudWFsIHBhcnNpbmcgZmlyc3RcclxuICAgICAgICAgIGNvbnN0IHByb2ZpbGVBY2NvdW50ID0gbWFudWFsUGFyc2VQcm9maWxlKGFjY291bnQuZGF0YSlcclxuICAgICAgICAgIGlmICghcHJvZmlsZUFjY291bnQpIGNvbnRpbnVlXHJcbiAgICAgICAgICBcclxuICAgICAgICAgIHByb2ZpbGVzRm91bmQrK1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICBjb25zdCBhY2NvdW50T3duZXIgPSBuZXcgUHVibGljS2V5KHByb2ZpbGVBY2NvdW50Lm93bmVyKVxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICAvLyBDaGVjayBpZiB0aGlzIHByb2ZpbGUgYmVsb25ncyB0byB0aGUgdXNlciB3ZSdyZSBsb29raW5nIGZvclxyXG4gICAgICAgICAgaWYgKHByb2ZpbGVBY2NvdW50LmlzX2luaXRpYWxpemVkID09PSAxICYmIGFjY291bnRPd25lci5lcXVhbHModXNlclB1YmxpY0tleSkpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYPCfjq8gRk9VTkQgUFJPRklMRSEgVXNlcm5hbWU6IFwiJHtwcm9maWxlQWNjb3VudC51c2VybmFtZX1cIiBmb3IgJHt1c2VyUHVibGljS2V5LnRvU3RyaW5nKCkuc2xpY2UoMCwgOCl9YClcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYPCfk7ggUHJvZmlsZSBJbWFnZSBVUkw6IFwiJHtwcm9maWxlQWNjb3VudC5wcm9maWxlX2ltYWdlfVwiYClcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYPCflrzvuI8gQ292ZXIgSW1hZ2UgVVJMOiBcIiR7cHJvZmlsZUFjY291bnQuY292ZXJfaW1hZ2V9XCJgKVxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhg8J+TiiBQcm9maWxlIERhdGE6YCwge1xyXG4gICAgICAgICAgICAgIHVzZXJuYW1lOiBwcm9maWxlQWNjb3VudC51c2VybmFtZSxcclxuICAgICAgICAgICAgICBiaW86IHByb2ZpbGVBY2NvdW50LmJpbyxcclxuICAgICAgICAgICAgICBwcm9maWxlSW1hZ2U6IHByb2ZpbGVBY2NvdW50LnByb2ZpbGVfaW1hZ2UsXHJcbiAgICAgICAgICAgICAgY292ZXJJbWFnZTogcHJvZmlsZUFjY291bnQuY292ZXJfaW1hZ2UsXHJcbiAgICAgICAgICAgICAgcG9zdHNDb3VudDogTnVtYmVyKHByb2ZpbGVBY2NvdW50LnBvc3RzX2NvdW50KSxcclxuICAgICAgICAgICAgICBmb2xsb3dlcnNDb3VudDogTnVtYmVyKHByb2ZpbGVBY2NvdW50LmZvbGxvd2Vyc19jb3VudCksXHJcbiAgICAgICAgICAgICAgaXNWZXJpZmllZDogcHJvZmlsZUFjY291bnQuaXNfdmVyaWZpZWQgPT09IDFcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgY29uc3QgcHJvZmlsZSA9IGNvbnZlcnRQcm9maWxlQWNjb3VudChwcm9maWxlQWNjb3VudClcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIENhY2hlIGluIGJvdGggbWVtb3J5IGFuZCBsb2NhbFN0b3JhZ2VcclxuICAgICAgICAgICAgcHJvZmlsZUNhY2hlLnNldChjYWNoZUtleSwgcHJvZmlsZSlcclxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiBwcm9maWxlQ2FjaGUuZGVsZXRlKGNhY2hlS2V5KSwgQ0FDSEVfRFVSQVRJT04pXHJcbiAgICAgICAgICAgIHNhdmVQcm9maWxlVG9Mb2NhbFN0b3JhZ2UoY2FjaGVLZXksIHByb2ZpbGUpXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICByZXR1cm4gcHJvZmlsZVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAvLyBOb3QgYSBwcm9maWxlIGFjY291bnQgb3IgcGFyc2luZyBmYWlsZWQsIGNvbnRpbnVlXHJcbiAgICAgICAgICBjb250aW51ZVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc29sZS5sb2coYPCfk4ogU2Nhbm5lZCAke3Byb2ZpbGVzRm91bmR9IHByb2ZpbGVzLCBubyBtYXRjaCBmb3VuZCBmb3IgdXNlcjogJHt1c2VyUHVibGljS2V5LnRvU3RyaW5nKCkuc2xpY2UoMCwgOCl9YClcclxuXHJcbiAgICAgIC8vIE5vIHByb2ZpbGUgZm91bmQgLSBjYWNoZSBudWxsIHJlc3VsdCB0byBhdm9pZCByZXBlYXRlZCBzY2Fuc1xyXG4gICAgICBwcm9maWxlQ2FjaGUuc2V0KGNhY2hlS2V5LCBudWxsKVxyXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHByb2ZpbGVDYWNoZS5kZWxldGUoY2FjaGVLZXkpLCBDQUNIRV9EVVJBVElPTilcclxuICAgICAgc2F2ZVByb2ZpbGVUb0xvY2FsU3RvcmFnZShjYWNoZUtleSwgbnVsbClcclxuICAgICAgXHJcbiAgICAgIHJldHVybiBudWxsXHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKGBFcnJvciBmZXRjaGluZyBwcm9maWxlIGZvciAke3VzZXJQdWJsaWNLZXkudG9TdHJpbmcoKS5zbGljZSgwLCA4KX06YCwgZXJyb3IpXHJcbiAgICAgIHJldHVybiBudWxsXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBHZXQgcHJvZmlsZSBieSB1c2VybmFtZSAoZm9yIHNwZWNpZmljIGxvb2t1cHMpXHJcbiAgY29uc3QgZ2V0UHJvZmlsZUJ5VXNlcm5hbWUgPSBhc3luYyAodXNlclB1YmxpY0tleTogUHVibGljS2V5LCB1c2VybmFtZTogc3RyaW5nKTogUHJvbWlzZTxQcm9maWxlIHwgbnVsbD4gPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgcHJvZmlsZVBEQSA9IGF3YWl0IGdldFByb2ZpbGVQREEodXNlclB1YmxpY0tleSwgdXNlcm5hbWUpXHJcbiAgICAgIGNvbnN0IGFjY291bnRJbmZvID0gYXdhaXQgY29ubmVjdGlvbi5nZXRBY2NvdW50SW5mbyhwcm9maWxlUERBKVxyXG4gICAgICBcclxuICAgICAgaWYgKCFhY2NvdW50SW5mbyB8fCAhYWNjb3VudEluZm8uZGF0YSB8fCBhY2NvdW50SW5mby5kYXRhLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIHJldHVybiBudWxsXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIE5vdyB0cnkgbWFudWFsIHBhcnNpbmdcclxuICAgICAgY29uc3QgcHJvZmlsZUFjY291bnQgPSBtYW51YWxQYXJzZVByb2ZpbGUoYWNjb3VudEluZm8uZGF0YSlcclxuICAgICAgaWYgKHByb2ZpbGVBY2NvdW50KSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coYOKchSBTdWNjZXNzZnVsbHkgbWFudWFsbHkgcGFyc2VkIHByb2ZpbGU6YCwge1xyXG4gICAgICAgICAgdXNlcm5hbWU6IHByb2ZpbGVBY2NvdW50LnVzZXJuYW1lLFxyXG4gICAgICAgICAgYmlvOiBwcm9maWxlQWNjb3VudC5iaW8sXHJcbiAgICAgICAgICBpc0luaXRpYWxpemVkOiBwcm9maWxlQWNjb3VudC5pc19pbml0aWFsaXplZCA9PT0gMSxcclxuICAgICAgICAgIG93bmVyOiBuZXcgUHVibGljS2V5KHByb2ZpbGVBY2NvdW50Lm93bmVyKS50b1N0cmluZygpLFxyXG4gICAgICAgICAgcHJvZmlsZUltYWdlOiBwcm9maWxlQWNjb3VudC5wcm9maWxlX2ltYWdlLFxyXG4gICAgICAgICAgY292ZXJJbWFnZTogcHJvZmlsZUFjY291bnQuY292ZXJfaW1hZ2UsXHJcbiAgICAgICAgICBwb3N0c0NvdW50OiBOdW1iZXIocHJvZmlsZUFjY291bnQucG9zdHNfY291bnQpXHJcbiAgICAgICAgfSlcclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4gY29udmVydFByb2ZpbGVBY2NvdW50KHByb2ZpbGVBY2NvdW50KVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGDinYwgTWFudWFsIHBhcnNpbmcgZmFpbGVkYClcclxuICAgICAgICByZXR1cm4gbnVsbFxyXG4gICAgICB9XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICByZXR1cm4gbnVsbFxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gR2V0IHBvc3RzIC0gUkVBTCBJTVBMRU1FTlRBVElPTiB3aXRoIG1hbnVhbCBwYXJzaW5nIGFuZCBjYWNoaW5nXHJcbiAgY29uc3QgZ2V0UG9zdHMgPSBhc3luYyAoKTogUHJvbWlzZTxQb3N0W10+ID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIC8vIENoZWNrIGNhY2hlIGZpcnN0XHJcbiAgICAgIGlmIChwb3N0c0NhY2hlICYmIERhdGUubm93KCkgLSBwb3N0c0NhY2hlLnRpbWVzdGFtcCA8IFBPU1RTX0NBQ0hFX0RVUkFUSU9OKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ+KaoSBVc2luZyBjYWNoZWQgcG9zdHMnKVxyXG4gICAgICAgIHJldHVybiBwb3N0c0NhY2hlLnBvc3RzXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnNvbGUubG9nKCfwn5SNIEZldGNoaW5nIHBvc3RzIGZyb20gYmxvY2tjaGFpbi4uLicpXHJcbiAgICAgIFxyXG4gICAgICBjb25zdCBhY2NvdW50cyA9IGF3YWl0IGNvbm5lY3Rpb24uZ2V0UHJvZ3JhbUFjY291bnRzKFBST0dSQU1fSUQpXHJcbiAgICAgIGNvbnN0IHBvc3RzOiBQb3N0W10gPSBbXVxyXG5cclxuICAgICAgY29uc29sZS5sb2coYPCfk4ogU2Nhbm5pbmcgJHthY2NvdW50cy5sZW5ndGh9IHByb2dyYW0gYWNjb3VudHMgZm9yIHBvc3RzLi4uYClcclxuXHJcbiAgICAgIGZvciAoY29uc3QgeyBhY2NvdW50LCBwdWJrZXkgfSBvZiBhY2NvdW50cykge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICBpZiAoYWNjb3VudC5kYXRhLmxlbmd0aCA9PT0gMCkgY29udGludWVcclxuXHJcbiAgICAgICAgICAvLyBUcnkgbWFudWFsIHBvc3QgcGFyc2luZyBmaXJzdFxyXG4gICAgICAgICAgY29uc3QgcG9zdEFjY291bnQgPSBtYW51YWxQYXJzZVBvc3QoYWNjb3VudC5kYXRhKVxyXG4gICAgICAgICAgaWYgKHBvc3RBY2NvdW50ICYmIHBvc3RBY2NvdW50LmlzX2luaXRpYWxpemVkID09PSAxICYmIHBvc3RBY2NvdW50LmNvbnRlbnQpIHtcclxuICAgICAgICAgICAgY29uc3QgcG9zdCA9IGNvbnZlcnRQb3N0QWNjb3VudChwb3N0QWNjb3VudClcclxuICAgICAgICAgICAgcG9zdHMucHVzaChwb3N0KVxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhg8J+TnSBGb3VuZCBwb3N0OiBcIiR7cG9zdC5jb250ZW50LnN1YnN0cmluZygwLCA1MCl9Li4uXCIgYnkgJHtwb3N0LmF1dGhvci50b1N0cmluZygpfWApXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgIC8vIE5vdCBhIHBvc3QgYWNjb3VudCBvciBwYXJzaW5nIGZhaWxlZCwgY29udGludWVcclxuICAgICAgICAgIGNvbnRpbnVlXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBwb3N0cy5zb3J0KChhLCBiKSA9PiBiLnRpbWVzdGFtcCAtIGEudGltZXN0YW1wKVxyXG4gICAgICBjb25zb2xlLmxvZyhg4pyFIExvYWRlZCAke3Bvc3RzLmxlbmd0aH0gcG9zdHMgZnJvbSBibG9ja2NoYWluYClcclxuICAgICAgXHJcbiAgICAgIC8vIENhY2hlIHRoZSByZXN1bHRzXHJcbiAgICAgIHBvc3RzQ2FjaGUgPSB7IHBvc3RzLCB0aW1lc3RhbXA6IERhdGUubm93KCkgfVxyXG4gICAgICBcclxuICAgICAgcmV0dXJuIHBvc3RzXHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBwb3N0czonLCBlcnJvcilcclxuICAgICAgcmV0dXJuIFtdXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBDcmVhdGUgcG9zdCAtIFJFQUwgSU1QTEVNRU5UQVRJT05cclxuICBjb25zdCBjcmVhdGVQb3N0ID0gYXN5bmMgKGNvbnRlbnQ6IHN0cmluZywgaW1hZ2VzOiBzdHJpbmdbXSA9IFtdKSA9PiB7XHJcbiAgICBpZiAoIXB1YmxpY0tleSkgdGhyb3cgbmV3IEVycm9yKCdXYWxsZXQgbm90IGNvbm5lY3RlZCcpXHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc29sZS5sb2coJ/CflI0gQ3JlYXRpbmcgcG9zdCB3aXRoIGNvbnRlbnQ6JywgY29udGVudClcclxuICAgICAgXHJcbiAgICAgIC8vIENoZWNrIFNPTCBiYWxhbmNlXHJcbiAgICAgIGNvbnN0IGJhbGFuY2UgPSBhd2FpdCBjaGVja1NPTEJhbGFuY2UoKVxyXG4gICAgICBpZiAoYmFsYW5jZSA8IDAuMDUpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEluc3VmZmljaWVudCBTT0wgYmFsYW5jZTogJHtiYWxhbmNlfS4gWW91IG5lZWQgYXQgbGVhc3QgMC4wNSBTT0wgZm9yIHRyYW5zYWN0aW9uIGZlZXMgYW5kIGFjY291bnQgY3JlYXRpb24uYClcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gR2V0IHVzZXIncyBwcm9maWxlIFBEQSAtIHdlIG5lZWQgdGhpcyBmb3IgdGhlIGluc3RydWN0aW9uXHJcbiAgICAgIGNvbnN0IHVzZXJQcm9maWxlID0gYXdhaXQgZ2V0UHJvZmlsZShwdWJsaWNLZXkpXHJcbiAgICAgIGlmICghdXNlclByb2ZpbGUpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtdXN0IGNyZWF0ZSBhIHByb2ZpbGUgYmVmb3JlIHBvc3RpbmcnKVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBHZXQgdXNlcidzIGN1cnJlbnQgcG9zdCBjb3VudCB0byBnZW5lcmF0ZSB0aGUgY29ycmVjdCBwb3N0IElEXHJcbiAgICAgIC8vIFRoZSBSdXN0IGNvbnRyYWN0IGluY3JlbWVudHMgcG9zdHNfY291bnQgZmlyc3QsIHRoZW4gdXNlcyB0aGF0IGFzIHRoZSBwb3N0IElEXHJcbiAgICAgIGNvbnN0IHBvc3RJZCA9IHVzZXJQcm9maWxlLnBvc3RzQ291bnQgKyAxXHJcbiAgICAgIGNvbnN0IHBvc3RQREEgPSBhd2FpdCBnZXRQb3N0UERBKHB1YmxpY0tleSwgcG9zdElkKVxyXG4gICAgICBjb25zb2xlLmxvZyhg8J+TjSBQb3N0IFBEQTogJHtwb3N0UERBLnRvU3RyaW5nKCl9IGZvciBwb3N0IElEOiAke3Bvc3RJZH1gKVxyXG5cclxuICAgICAgLy8gR2VuZXJhdGUgYSBuZXcga2V5cGFpciBmb3IgdGhlIHBvc3QgYWNjb3VudFxyXG4gICAgICAvLyBUaGUgUnVzdCBjb250cmFjdCB1c2VzIGludm9rZSB3aXRoIHN5c3RlbV9pbnN0cnVjdGlvbjo6Y3JlYXRlX2FjY291bnRcclxuICAgICAgLy8gVGhpcyBtZWFucyB0aGUgcG9zdCBhY2NvdW50IE1VU1QgYmUgYSBrZXlwYWlyIHRoYXQgc2lnbnMgdGhlIHRyYW5zYWN0aW9uXHJcbiAgICAgIGNvbnN0IHBvc3RLZXlwYWlyID0gS2V5cGFpci5nZW5lcmF0ZSgpXHJcbiAgICAgIGNvbnNvbGUubG9nKGDwn5ONIFBvc3QgQWNjb3VudDogJHtwb3N0S2V5cGFpci5wdWJsaWNLZXkudG9TdHJpbmcoKX1gKVxyXG5cclxuICAgICAgLy8gR2V0IHByb2ZpbGUgUERBIGZvciB0aGUgdXNlciAod2UgbmVlZCB0aGUgYWN0dWFsIHVzZXJuYW1lKVxyXG4gICAgICAvLyBUcnkgdG8gZmluZCB0aGUgcHJvZmlsZSBhY2NvdW50IGFtb25nIGFsbCBwcm9ncmFtIGFjY291bnRzXHJcbiAgICAgIGNvbnN0IGFjY291bnRzID0gYXdhaXQgY29ubmVjdGlvbi5nZXRQcm9ncmFtQWNjb3VudHMoUFJPR1JBTV9JRClcclxuICAgICAgbGV0IHVzZXJQcm9maWxlUERBOiBQdWJsaWNLZXkgfCBudWxsID0gbnVsbFxyXG4gICAgICBcclxuICAgICAgZm9yIChjb25zdCB7IGFjY291bnQsIHB1YmtleSB9IG9mIGFjY291bnRzKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgIGNvbnN0IHByb2ZpbGVBY2NvdW50ID0gbWFudWFsUGFyc2VQcm9maWxlKGFjY291bnQuZGF0YSlcclxuICAgICAgICAgIGlmIChwcm9maWxlQWNjb3VudCAmJiBcclxuICAgICAgICAgICAgICBwcm9maWxlQWNjb3VudC5pc19pbml0aWFsaXplZCA9PT0gMSAmJiBcclxuICAgICAgICAgICAgICBuZXcgUHVibGljS2V5KHByb2ZpbGVBY2NvdW50Lm93bmVyKS5lcXVhbHMocHVibGljS2V5KSkge1xyXG4gICAgICAgICAgICB1c2VyUHJvZmlsZVBEQSA9IHB1YmtleVxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhg8J+TjSBVc2VyIFByb2ZpbGUgUERBOiAke3VzZXJQcm9maWxlUERBLnRvU3RyaW5nKCl9YClcclxuICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgY29udGludWVcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICghdXNlclByb2ZpbGVQREEpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBmaW5kIHlvdXIgcHJvZmlsZSBQREEuIFBsZWFzZSByZWZyZXNoIGFuZCB0cnkgYWdhaW4uJylcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3QgaW5zdHJ1Y3Rpb25EYXRhID0gbmV3IENyZWF0ZVBvc3RJbnN0cnVjdGlvbih7XHJcbiAgICAgICAgY29udGVudCxcclxuICAgICAgICBpbWFnZXMsXHJcbiAgICAgIH0pXHJcblxyXG4gICAgICBjb25zdCBjcmVhdGVQb3N0VmFyaWFudCA9IEJ1ZmZlci5mcm9tKFsyXSkgLy8gQ3JlYXRlUG9zdCBlbnVtIGluZGV4XHJcbiAgICAgIGNvbnN0IHNlcmlhbGl6ZWREYXRhID0gc2VyaWFsaXplKGNyZWF0ZVBvc3RTY2hlbWEsIGluc3RydWN0aW9uRGF0YSlcclxuICAgICAgY29uc3QgZnVsbEluc3RydWN0aW9uRGF0YSA9IEJ1ZmZlci5jb25jYXQoW2NyZWF0ZVBvc3RWYXJpYW50LCBCdWZmZXIuZnJvbShzZXJpYWxpemVkRGF0YSldKVxyXG5cclxuICAgICAgY29uc29sZS5sb2coYPCflKIgSW5zdHJ1Y3Rpb24gZGF0YSBsZW5ndGg6ICR7ZnVsbEluc3RydWN0aW9uRGF0YS5sZW5ndGh9IGJ5dGVzYClcclxuXHJcbiAgICAgIGNvbnN0IGluc3RydWN0aW9uID0gbmV3IFRyYW5zYWN0aW9uSW5zdHJ1Y3Rpb24oe1xyXG4gICAgICAgIGtleXM6IFtcclxuICAgICAgICAgIHsgcHVia2V5OiBwdWJsaWNLZXksIGlzU2lnbmVyOiB0cnVlLCBpc1dyaXRhYmxlOiB0cnVlIH0sIC8vIFVzZXIgYWNjb3VudCAocGF5ZXIpXHJcbiAgICAgICAgICB7IHB1YmtleTogcG9zdEtleXBhaXIucHVibGljS2V5LCBpc1NpZ25lcjogdHJ1ZSwgaXNXcml0YWJsZTogdHJ1ZSB9LCAvLyBQb3N0IGFjY291bnQgKG11c3QgYmUgc2lnbmVyKVxyXG4gICAgICAgICAgeyBwdWJrZXk6IHVzZXJQcm9maWxlUERBLCBpc1NpZ25lcjogZmFsc2UsIGlzV3JpdGFibGU6IHRydWUgfSwgLy8gVXNlciBwcm9maWxlIChmb3IgcG9zdCBjb3VudClcclxuICAgICAgICAgIHsgcHVia2V5OiBTeXN0ZW1Qcm9ncmFtLnByb2dyYW1JZCwgaXNTaWduZXI6IGZhbHNlLCBpc1dyaXRhYmxlOiBmYWxzZSB9LCAvLyBTeXN0ZW0gcHJvZ3JhbVxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgcHJvZ3JhbUlkOiBQUk9HUkFNX0lELFxyXG4gICAgICAgIGRhdGE6IGZ1bGxJbnN0cnVjdGlvbkRhdGEsXHJcbiAgICAgIH0pXHJcblxyXG4gICAgICBjb25zb2xlLmxvZygn8J+TnSBUcmFuc2FjdGlvbiBpbnN0cnVjdGlvbiBjcmVhdGVkJylcclxuICAgICAgY29uc29sZS5sb2coJ/CflJEgS2V5czonLCBpbnN0cnVjdGlvbi5rZXlzLm1hcChrID0+ICh7XHJcbiAgICAgICAgcHVia2V5OiBrLnB1YmtleS50b1N0cmluZygpLFxyXG4gICAgICAgIGlzU2lnbmVyOiBrLmlzU2lnbmVyLFxyXG4gICAgICAgIGlzV3JpdGFibGU6IGsuaXNXcml0YWJsZVxyXG4gICAgICB9KSkpXHJcblxyXG4gICAgICBjb25zdCB0cmFuc2FjdGlvbiA9IG5ldyBUcmFuc2FjdGlvbigpLmFkZChpbnN0cnVjdGlvbilcclxuICAgICAgY29uc3QgeyBibG9ja2hhc2ggfSA9IGF3YWl0IGNvbm5lY3Rpb24uZ2V0TGF0ZXN0QmxvY2toYXNoKCdwcm9jZXNzZWQnKVxyXG4gICAgICB0cmFuc2FjdGlvbi5yZWNlbnRCbG9ja2hhc2ggPSBibG9ja2hhc2hcclxuICAgICAgdHJhbnNhY3Rpb24uZmVlUGF5ZXIgPSBwdWJsaWNLZXlcclxuXHJcbiAgICAgIGNvbnNvbGUubG9nKCfwn5qAIFNlbmRpbmcgdHJhbnNhY3Rpb24uLi4nKVxyXG4gICAgICBcclxuICAgICAgLy8gU2lnbiB0cmFuc2FjdGlvbiBiZWZvcmUgc2ltdWxhdGlvblxyXG4gICAgICB0cmFuc2FjdGlvbi5wYXJ0aWFsU2lnbihwb3N0S2V5cGFpcilcclxuICAgICAgXHJcbiAgICAgIC8vIFNpbXVsYXRlIHRyYW5zYWN0aW9uIFxyXG4gICAgICBjb25zdCBzaW11bGF0aW9uID0gYXdhaXQgY29ubmVjdGlvbi5zaW11bGF0ZVRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uKVxyXG4gICAgICBjb25zb2xlLmxvZygn8J+OryBUcmFuc2FjdGlvbiBzaW11bGF0aW9uOicsIHNpbXVsYXRpb24pXHJcbiAgICAgIFxyXG4gICAgICBpZiAoc2ltdWxhdGlvbi52YWx1ZS5lcnIpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFRyYW5zYWN0aW9uIHNpbXVsYXRpb24gZmFpbGVkOiAke0pTT04uc3RyaW5naWZ5KHNpbXVsYXRpb24udmFsdWUuZXJyKX1gKVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBTZW5kIHRyYW5zYWN0aW9uIHdpdGggcG9zdCBrZXlwYWlyIGFzIGFkZGl0aW9uYWwgc2lnbmVyXHJcbiAgICAgIGNvbnN0IHNpZ25hdHVyZSA9IGF3YWl0IHNlbmRUcmFuc2FjdGlvbih0cmFuc2FjdGlvbiwgY29ubmVjdGlvbiwge1xyXG4gICAgICAgIHNraXBQcmVmbGlnaHQ6IGZhbHNlLFxyXG4gICAgICAgIHByZWZsaWdodENvbW1pdG1lbnQ6ICdwcm9jZXNzZWQnLFxyXG4gICAgICAgIG1heFJldHJpZXM6IDMsXHJcbiAgICAgICAgc2lnbmVyczogW3Bvc3RLZXlwYWlyXSwgLy8gUG9zdCBrZXlwYWlyIG11c3Qgc2lnbiB0aGUgdHJhbnNhY3Rpb25cclxuICAgICAgfSlcclxuXHJcbiAgICAgIGNvbnNvbGUubG9nKGDwn5OLIFRyYW5zYWN0aW9uIHNpZ25hdHVyZTogJHtzaWduYXR1cmV9YClcclxuICAgICAgXHJcbiAgICAgIGF3YWl0IGNvbm5lY3Rpb24uY29uZmlybVRyYW5zYWN0aW9uKHtcclxuICAgICAgICBzaWduYXR1cmUsXHJcbiAgICAgICAgYmxvY2toYXNoLFxyXG4gICAgICAgIGxhc3RWYWxpZEJsb2NrSGVpZ2h0OiAoYXdhaXQgY29ubmVjdGlvbi5nZXRMYXRlc3RCbG9ja2hhc2goKSkubGFzdFZhbGlkQmxvY2tIZWlnaHQsXHJcbiAgICAgIH0sICdwcm9jZXNzZWQnKVxyXG5cclxuICAgICAgLy8gSW52YWxpZGF0ZSBjYWNoZSBhZnRlciBwb3N0IGNyZWF0aW9uIChwcm9maWxlIHBvc3QgY291bnQgY2hhbmdlZClcclxuICAgICAgY2xlYXJQcm9maWxlQ2FjaGUocHVibGljS2V5LnRvU3RyaW5nKCkpXHJcblxyXG4gICAgICBjb25zb2xlLmxvZygn4pyFIFBvc3QgY3JlYXRlZCBzdWNjZXNzZnVsbHkhJylcclxuICAgICAgdG9hc3Quc3VjY2VzcygnUG9zdCBjcmVhdGVkIHN1Y2Nlc3NmdWxseSEnKVxyXG4gICAgICByZXR1cm4gc2lnbmF0dXJlXHJcbiAgICB9IGNhdGNoIChlcnJvcjogYW55KSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBQb3N0IGNyZWF0aW9uIGVycm9yOicsIGVycm9yKVxyXG4gICAgICBcclxuICAgICAgaWYgKGVycm9yLm1lc3NhZ2U/LmluY2x1ZGVzKCdpbnN1ZmZpY2llbnQgZnVuZHMnKSkge1xyXG4gICAgICAgIGNvbnN0IGJhbGFuY2UgPSBhd2FpdCBjaGVja1NPTEJhbGFuY2UoKVxyXG4gICAgICAgIHRvYXN0LmVycm9yKGBJbnN1ZmZpY2llbnQgU09MOiAke2JhbGFuY2UudG9GaXhlZCg0KX0gU09MLiBOZWVkIGF0IGxlYXN0IDAuMDUgU09MIGZvciBmZWVzLmApXHJcbiAgICAgIH0gZWxzZSBpZiAoZXJyb3IubWVzc2FnZT8uaW5jbHVkZXMoJ3NpbXVsYXRpb24gZmFpbGVkJykpIHtcclxuICAgICAgICB0b2FzdC5lcnJvcignVHJhbnNhY3Rpb24gd291bGQgZmFpbDogQ2hlY2sgYWNjb3VudCBzZXR1cCBhbmQgYmFsYW5jZScpXHJcbiAgICAgICAgY29uc29sZS5lcnJvcignU2ltdWxhdGlvbiBlcnJvciBkZXRhaWxzOicsIGVycm9yLm1lc3NhZ2UpXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdG9hc3QuZXJyb3IoYEZhaWxlZCB0byBjcmVhdGUgcG9zdDogJHtlcnJvci5tZXNzYWdlIHx8ICdVbmtub3duIGVycm9yJ31gKVxyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICB0aHJvdyBlcnJvclxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gTGlrZSBwb3N0IC0gUkVBTCBJTVBMRU1FTlRBVElPTiAtIEZpeGVkIHRvIGZpbmQgYWN0dWFsIHBvc3QgYWNjb3VudHNcclxuICBjb25zdCBsaWtlUG9zdCA9IGFzeW5jIChwb3N0SWQ6IG51bWJlciwgcG9zdEF1dGhvcjogUHVibGljS2V5KSA9PiB7XHJcbiAgICBpZiAoIXB1YmxpY0tleSkgdGhyb3cgbmV3IEVycm9yKCdXYWxsZXQgbm90IGNvbm5lY3RlZCcpXHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc29sZS5sb2coYPCflI0gQXR0ZW1wdGluZyB0byBsaWtlIHBvc3QgSUQgJHtwb3N0SWR9IGJ5IGF1dGhvciAke3Bvc3RBdXRob3IudG9TdHJpbmcoKS5zbGljZSgwLCA4KX0uLi5gKVxyXG4gICAgICBcclxuICAgICAgLy8gQ2hlY2sgU09MIGJhbGFuY2UgZmlyc3RcclxuICAgICAgY29uc3QgYmFsYW5jZSA9IGF3YWl0IGNoZWNrU09MQmFsYW5jZSgpXHJcbiAgICAgIGNvbnNvbGUubG9nKGDwn5KwIEN1cnJlbnQgU09MIGJhbGFuY2U6ICR7YmFsYW5jZX1gKVxyXG4gICAgICBpZiAoYmFsYW5jZSA8IDAuMDEpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEluc3VmZmljaWVudCBTT0wgYmFsYW5jZTogJHtiYWxhbmNlfS4gTmVlZCBhdCBsZWFzdCAwLjAxIFNPTCBmb3IgdHJhbnNhY3Rpb24gZmVlcy5gKVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBGaW5kIHRoZSBhY3R1YWwgcG9zdCBhY2NvdW50IGJ5IHNjYW5uaW5nIGFsbCBwcm9ncmFtIGFjY291bnRzXHJcbiAgICAgIC8vIFNpbmNlIHBvc3RzIGFyZSBzdG9yZWQgYXQgcmFuZG9tIGtleXBhaXJzLCBub3QgUERBcywgd2UgbmVlZCB0byBmaW5kIHRoZSByaWdodCBvbmVcclxuICAgICAgY29uc29sZS5sb2coYPCflI0gU2VhcmNoaW5nIGZvciBwb3N0IElEICR7cG9zdElkfSBieSBhdXRob3IgJHtwb3N0QXV0aG9yLnRvU3RyaW5nKCkuc2xpY2UoMCwgOCl9Li4uYClcclxuICAgICAgXHJcbiAgICAgIGNvbnN0IGFjY291bnRzID0gYXdhaXQgY29ubmVjdGlvbi5nZXRQcm9ncmFtQWNjb3VudHMoUFJPR1JBTV9JRClcclxuICAgICAgbGV0IHBvc3RBY2NvdW50QWRkcmVzczogUHVibGljS2V5IHwgbnVsbCA9IG51bGxcclxuICAgICAgbGV0IHBvc3RBY2NvdW50OiBQb3N0QWNjb3VudCB8IG51bGwgPSBudWxsXHJcbiAgICAgIFxyXG4gICAgICBmb3IgKGNvbnN0IHsgYWNjb3VudCwgcHVia2V5IH0gb2YgYWNjb3VudHMpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgY29uc3QgcGFyc2VkUG9zdCA9IG1hbnVhbFBhcnNlUG9zdChhY2NvdW50LmRhdGEpXHJcbiAgICAgICAgICBpZiAocGFyc2VkUG9zdCAmJiBcclxuICAgICAgICAgICAgICBwYXJzZWRQb3N0LmlzX2luaXRpYWxpemVkID09PSAxICYmIFxyXG4gICAgICAgICAgICAgIE51bWJlcihwYXJzZWRQb3N0LmlkKSA9PT0gcG9zdElkICYmXHJcbiAgICAgICAgICAgICAgbmV3IFB1YmxpY0tleShwYXJzZWRQb3N0LmF1dGhvcikuZXF1YWxzKHBvc3RBdXRob3IpKSB7XHJcbiAgICAgICAgICAgIHBvc3RBY2NvdW50QWRkcmVzcyA9IHB1YmtleVxyXG4gICAgICAgICAgICBwb3N0QWNjb3VudCA9IHBhcnNlZFBvc3RcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYPCfjq8gRm91bmQgcG9zdCBJRCAke3Bvc3RJZH0gYXQgYWRkcmVzczogJHtwdWJrZXkudG9TdHJpbmcoKX1gKVxyXG4gICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAvLyBOb3QgYSBwb3N0IGFjY291bnQsIGNvbnRpbnVlXHJcbiAgICAgICAgICBjb250aW51ZVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKCFwb3N0QWNjb3VudEFkZHJlc3MgfHwgIXBvc3RBY2NvdW50KSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBQb3N0IElEICR7cG9zdElkfSBieSBhdXRob3IgJHtwb3N0QXV0aG9yLnRvU3RyaW5nKCkuc2xpY2UoMCwgOCl9IG5vdCBmb3VuZCBvbiBibG9ja2NoYWluYClcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc29sZS5sb2coYPCfk50gUG9zdCBkYXRhIHZlcmlmaWVkOiBcIiR7cG9zdEFjY291bnQuY29udGVudC5zbGljZSgwLCAzMCl9Li4uXCIgd2l0aCAke051bWJlcihwb3N0QWNjb3VudC5saWtlcyl9IGxpa2VzYClcclxuXHJcbiAgICAgIC8vIEZpbmQgdGhlIGF1dGhvcidzIHByb2ZpbGUgYWNjb3VudFxyXG4gICAgICBjb25zb2xlLmxvZyhg8J+UjSBTZWFyY2hpbmcgZm9yIGF1dGhvciBwcm9maWxlOiAke3Bvc3RBdXRob3IudG9TdHJpbmcoKS5zbGljZSgwLCA4KX0uLi5gKVxyXG4gICAgICBsZXQgYXV0aG9yUHJvZmlsZUFkZHJlc3M6IFB1YmxpY0tleSB8IG51bGwgPSBudWxsXHJcbiAgICAgIFxyXG4gICAgICBmb3IgKGNvbnN0IHsgYWNjb3VudCwgcHVia2V5IH0gb2YgYWNjb3VudHMpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgY29uc3QgcGFyc2VkUHJvZmlsZSA9IG1hbnVhbFBhcnNlUHJvZmlsZShhY2NvdW50LmRhdGEpXHJcbiAgICAgICAgICBpZiAocGFyc2VkUHJvZmlsZSAmJiBcclxuICAgICAgICAgICAgICBwYXJzZWRQcm9maWxlLmlzX2luaXRpYWxpemVkID09PSAxICYmIFxyXG4gICAgICAgICAgICAgIG5ldyBQdWJsaWNLZXkocGFyc2VkUHJvZmlsZS5vd25lcikuZXF1YWxzKHBvc3RBdXRob3IpKSB7XHJcbiAgICAgICAgICAgIGF1dGhvclByb2ZpbGVBZGRyZXNzID0gcHVia2V5XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGDwn46vIEZvdW5kIGF1dGhvciBwcm9maWxlIGF0IGFkZHJlc3M6ICR7cHVia2V5LnRvU3RyaW5nKCl9YClcclxuICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgLy8gTm90IGEgcHJvZmlsZSBhY2NvdW50LCBjb250aW51ZVxyXG4gICAgICAgICAgY29udGludWVcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICghYXV0aG9yUHJvZmlsZUFkZHJlc3MpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEF1dGhvciBwcm9maWxlIGZvciAke3Bvc3RBdXRob3IudG9TdHJpbmcoKS5zbGljZSgwLCA4KX0gbm90IGZvdW5kIG9uIGJsb2NrY2hhaW5gKVxyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCBpbnN0cnVjdGlvbkRhdGEgPSBuZXcgTGlrZVBvc3RJbnN0cnVjdGlvbih7XHJcbiAgICAgICAgcG9zdF9pZDogQmlnSW50KHBvc3RJZCksXHJcbiAgICAgIH0pXHJcblxyXG4gICAgICBjb25zdCBsaWtlUG9zdFZhcmlhbnQgPSBCdWZmZXIuZnJvbShbM10pIC8vIExpa2VQb3N0IGluc3RydWN0aW9uIHZhcmlhbnRcclxuICAgICAgY29uc3Qgc2VyaWFsaXplZERhdGEgPSBzZXJpYWxpemUobGlrZVBvc3RTY2hlbWEsIGluc3RydWN0aW9uRGF0YSlcclxuICAgICAgY29uc3QgZnVsbEluc3RydWN0aW9uRGF0YSA9IEJ1ZmZlci5jb25jYXQoW2xpa2VQb3N0VmFyaWFudCwgQnVmZmVyLmZyb20oc2VyaWFsaXplZERhdGEpXSlcclxuXHJcbiAgICAgIGNvbnNvbGUubG9nKGDwn5SiIEluc3RydWN0aW9uIGRhdGE6IHZhcmlhbnQgWzNdLCBzZXJpYWxpemVkIGxlbmd0aDogJHtzZXJpYWxpemVkRGF0YS5sZW5ndGh9LCB0b3RhbDogJHtmdWxsSW5zdHJ1Y3Rpb25EYXRhLmxlbmd0aH0gYnl0ZXNgKVxyXG5cclxuICAgICAgY29uc3QgaW5zdHJ1Y3Rpb24gPSBuZXcgVHJhbnNhY3Rpb25JbnN0cnVjdGlvbih7XHJcbiAgICAgICAga2V5czogW1xyXG4gICAgICAgICAgeyBwdWJrZXk6IHB1YmxpY0tleSwgaXNTaWduZXI6IHRydWUsIGlzV3JpdGFibGU6IGZhbHNlIH0sIC8vIFVzZXIgYWNjb3VudCAobGlrZXIpXHJcbiAgICAgICAgICB7IHB1YmtleTogcG9zdEFjY291bnRBZGRyZXNzLCBpc1NpZ25lcjogZmFsc2UsIGlzV3JpdGFibGU6IHRydWUgfSwgLy8gUG9zdCBhY2NvdW50ICh0byB1cGRhdGUgbGlrZXMpXHJcbiAgICAgICAgICB7IHB1YmtleTogYXV0aG9yUHJvZmlsZUFkZHJlc3MsIGlzU2lnbmVyOiBmYWxzZSwgaXNXcml0YWJsZTogdHJ1ZSB9LCAvLyBBdXRob3IgcHJvZmlsZSBhY2NvdW50ICh0byB1cGRhdGUgVUNSKVxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgcHJvZ3JhbUlkOiBQUk9HUkFNX0lELFxyXG4gICAgICAgIGRhdGE6IGZ1bGxJbnN0cnVjdGlvbkRhdGEsXHJcbiAgICAgIH0pXHJcblxyXG4gICAgICBjb25zb2xlLmxvZygn8J+UkSBUcmFuc2FjdGlvbiBhY2NvdW50czonKVxyXG4gICAgICBjb25zb2xlLmxvZyhgICBVc2VyIChsaWtlcik6ICR7cHVibGljS2V5LnRvU3RyaW5nKCl9IChzaWduZXIsIHJlYWRvbmx5KWApXHJcbiAgICAgIGNvbnNvbGUubG9nKGAgIFBvc3Q6ICR7cG9zdEFjY291bnRBZGRyZXNzLnRvU3RyaW5nKCl9IChub3Qgc2lnbmVyLCB3cml0YWJsZSlgKVxyXG4gICAgICBjb25zb2xlLmxvZyhgICBBdXRob3IgUHJvZmlsZTogJHthdXRob3JQcm9maWxlQWRkcmVzcy50b1N0cmluZygpfSAobm90IHNpZ25lciwgd3JpdGFibGUpYClcclxuICAgICAgY29uc29sZS5sb2coYCAgUHJvZ3JhbTogJHtQUk9HUkFNX0lELnRvU3RyaW5nKCl9YClcclxuXHJcbiAgICAgIGNvbnN0IHRyYW5zYWN0aW9uID0gbmV3IFRyYW5zYWN0aW9uKCkuYWRkKGluc3RydWN0aW9uKVxyXG4gICAgICBjb25zdCB7IGJsb2NraGFzaCB9ID0gYXdhaXQgY29ubmVjdGlvbi5nZXRMYXRlc3RCbG9ja2hhc2goJ3Byb2Nlc3NlZCcpXHJcbiAgICAgIHRyYW5zYWN0aW9uLnJlY2VudEJsb2NraGFzaCA9IGJsb2NraGFzaFxyXG4gICAgICB0cmFuc2FjdGlvbi5mZWVQYXllciA9IHB1YmxpY0tleVxyXG5cclxuICAgICAgLy8gU2ltdWxhdGUgdHJhbnNhY3Rpb24gYmVmb3JlIHNlbmRpbmdcclxuICAgICAgY29uc29sZS5sb2coJ/Cfjq8gU2ltdWxhdGluZyB0cmFuc2FjdGlvbi4uLicpXHJcbiAgICAgIGNvbnN0IHNpbXVsYXRpb24gPSBhd2FpdCBjb25uZWN0aW9uLnNpbXVsYXRlVHJhbnNhY3Rpb24odHJhbnNhY3Rpb24pXHJcbiAgICAgIGNvbnNvbGUubG9nKCfwn5OKIFNpbXVsYXRpb24gcmVzdWx0OicsIHNpbXVsYXRpb24pXHJcbiAgICAgIFxyXG4gICAgICBpZiAoc2ltdWxhdGlvbi52YWx1ZS5lcnIpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFRyYW5zYWN0aW9uIHNpbXVsYXRpb24gZmFpbGVkOiAke0pTT04uc3RyaW5naWZ5KHNpbXVsYXRpb24udmFsdWUuZXJyKX1gKVxyXG4gICAgICB9XHJcbiAgICAgIGNvbnNvbGUubG9nKCfinIUgVHJhbnNhY3Rpb24gc2ltdWxhdGlvbiBzdWNjZXNzZnVsJylcclxuXHJcbiAgICAgIGNvbnNvbGUubG9nKCfwn5qAIFNlbmRpbmcgdHJhbnNhY3Rpb24uLi4nKVxyXG4gICAgICBjb25zdCBzaWduYXR1cmUgPSBhd2FpdCBzZW5kVHJhbnNhY3Rpb24odHJhbnNhY3Rpb24sIGNvbm5lY3Rpb24sIHtcclxuICAgICAgICBza2lwUHJlZmxpZ2h0OiBmYWxzZSxcclxuICAgICAgICBwcmVmbGlnaHRDb21taXRtZW50OiAncHJvY2Vzc2VkJyxcclxuICAgICAgICBtYXhSZXRyaWVzOiAzLFxyXG4gICAgICB9KVxyXG5cclxuICAgICAgY29uc29sZS5sb2coYPCfk4sgVHJhbnNhY3Rpb24gc2VudCB3aXRoIHNpZ25hdHVyZTogJHtzaWduYXR1cmV9YClcclxuICAgICAgXHJcbiAgICAgIGNvbnNvbGUubG9nKCfij7MgQ29uZmlybWluZyB0cmFuc2FjdGlvbi4uLicpXHJcbiAgICAgIGF3YWl0IGNvbm5lY3Rpb24uY29uZmlybVRyYW5zYWN0aW9uKHtcclxuICAgICAgICBzaWduYXR1cmUsXHJcbiAgICAgICAgYmxvY2toYXNoLFxyXG4gICAgICAgIGxhc3RWYWxpZEJsb2NrSGVpZ2h0OiAoYXdhaXQgY29ubmVjdGlvbi5nZXRMYXRlc3RCbG9ja2hhc2goKSkubGFzdFZhbGlkQmxvY2tIZWlnaHQsXHJcbiAgICAgIH0sICdwcm9jZXNzZWQnKVxyXG5cclxuICAgICAgY29uc29sZS5sb2coJ+KchSBUcmFuc2FjdGlvbiBjb25maXJtZWQhIFBvc3QgbGlrZWQgc3VjY2Vzc2Z1bGx5IScpXHJcbiAgICAgIHRvYXN0LnN1Y2Nlc3MoJ1Bvc3QgbGlrZWQhJylcclxuICAgICAgcmV0dXJuIHNpZ25hdHVyZVxyXG4gICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCfinYwgTGlrZSBwb3N0IGVycm9yOicsIGVycm9yKVxyXG4gICAgICBcclxuICAgICAgLy8gTW9yZSBzcGVjaWZpYyBlcnJvciBtZXNzYWdlc1xyXG4gICAgICBpZiAoZXJyb3IubWVzc2FnZT8uaW5jbHVkZXMoJ2luc3VmZmljaWVudCBmdW5kcycpKSB7XHJcbiAgICAgICAgY29uc3QgYmFsYW5jZSA9IGF3YWl0IGNoZWNrU09MQmFsYW5jZSgpXHJcbiAgICAgICAgdG9hc3QuZXJyb3IoYEluc3VmZmljaWVudCBTT0w6ICR7YmFsYW5jZS50b0ZpeGVkKDQpfSBTT0wuIE5lZWQgYXQgbGVhc3QgMC4wMSBTT0wgZm9yIGZlZXMuYClcclxuICAgICAgfSBlbHNlIGlmIChlcnJvci5tZXNzYWdlPy5pbmNsdWRlcygnc2ltdWxhdGlvbiBmYWlsZWQnKSkge1xyXG4gICAgICAgIHRvYXN0LmVycm9yKCdUcmFuc2FjdGlvbiB3b3VsZCBmYWlsOiBDaGVjayBwb3N0IGV4aXN0cyBhbmQgd2FsbGV0IGhhcyBwZXJtaXNzaW9uJylcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdTaW11bGF0aW9uIGVycm9yIGRldGFpbHM6JywgZXJyb3IubWVzc2FnZSlcclxuICAgICAgfSBlbHNlIGlmIChlcnJvci5tZXNzYWdlPy5pbmNsdWRlcygnbm90IGZvdW5kIG9uIGJsb2NrY2hhaW4nKSkge1xyXG4gICAgICAgIHRvYXN0LmVycm9yKCdQb3N0IG5vdCBmb3VuZCBvbiBibG9ja2NoYWluJylcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0b2FzdC5lcnJvcihgRmFpbGVkIHRvIGxpa2UgcG9zdDogJHtlcnJvci5tZXNzYWdlIHx8ICdVbmtub3duIGVycm9yJ31gKVxyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICB0aHJvdyBlcnJvclxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gQ2hlY2sgc3BlY2lmaWMgcHJvZmlsZSBQREEgLSBmb3IgZGVidWdnaW5nIHByb2ZpbGUgZGV0ZWN0aW9uIGlzc3Vlc1xyXG4gIGNvbnN0IGNoZWNrUHJvZmlsZUF0UERBID0gYXN5bmMgKHBkYUFkZHJlc3M6IHN0cmluZyk6IFByb21pc2U8dm9pZD4gPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc29sZS5sb2coYPCflI0gQ2hlY2tpbmcgc3BlY2lmaWMgUERBOiAke3BkYUFkZHJlc3N9YClcclxuICAgICAgY29uc3QgcGRhID0gbmV3IFB1YmxpY0tleShwZGFBZGRyZXNzKVxyXG4gICAgICBjb25zdCBhY2NvdW50SW5mbyA9IGF3YWl0IGNvbm5lY3Rpb24uZ2V0QWNjb3VudEluZm8ocGRhKVxyXG4gICAgICBcclxuICAgICAgaWYgKCFhY2NvdW50SW5mbykge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGDinYwgTm8gYWNjb3VudCBmb3VuZCBhdCBQREE6ICR7cGRhQWRkcmVzc31gKVxyXG4gICAgICAgIHJldHVyblxyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICBjb25zb2xlLmxvZyhg4pyFIEFjY291bnQgZXhpc3RzISBPd25lcjogJHthY2NvdW50SW5mby5vd25lci50b1N0cmluZygpfSwgU2l6ZTogJHthY2NvdW50SW5mby5kYXRhLmxlbmd0aH0gYnl0ZXNgKVxyXG4gICAgICBcclxuICAgICAgLy8gSW5zcGVjdCByYXcgZGF0YVxyXG4gICAgICBjb25zb2xlLmxvZyhg8J+UjSBSYXcgZGF0YSAoZmlyc3QgMTAwIGJ5dGVzKTpgLCBBcnJheS5mcm9tKGFjY291bnRJbmZvLmRhdGEuc2xpY2UoMCwgMTAwKSkpXHJcbiAgICAgIFxyXG4gICAgICBpZiAoYWNjb3VudEluZm8ub3duZXIuZXF1YWxzKFBST0dSQU1fSUQpKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coYOKchSBBY2NvdW50IGlzIG93bmVkIGJ5IG91ciBwcm9ncmFtYClcclxuICAgICAgICBcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgLy8gVHJ5IG1hbnVhbCBwYXJzaW5nIHRvIHVuZGVyc3RhbmQgdGhlIHN0cnVjdHVyZVxyXG4gICAgICAgICAgbGV0IG9mZnNldCA9IDBcclxuICAgICAgICAgIGNvbnN0IGlzX2luaXRpYWxpemVkID0gYWNjb3VudEluZm8uZGF0YVtvZmZzZXRdXHJcbiAgICAgICAgICBvZmZzZXQgKz0gMVxyXG4gICAgICAgICAgY29uc29sZS5sb2coYPCfk4ogaXNfaW5pdGlhbGl6ZWQ6ICR7aXNfaW5pdGlhbGl6ZWR9YClcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgY29uc3Qgb3duZXIgPSBhY2NvdW50SW5mby5kYXRhLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgMzIpXHJcbiAgICAgICAgICBvZmZzZXQgKz0gMzJcclxuICAgICAgICAgIGNvbnNvbGUubG9nKGDwn5OKIG93bmVyOiAke25ldyBQdWJsaWNLZXkob3duZXIpLnRvU3RyaW5nKCl9YClcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgLy8gVHJ5IHRvIHJlYWQgdGhlIHVzZXJuYW1lIGxlbmd0aCAoQm9yc2ggc3RyaW5nIGZvcm1hdDogNCBieXRlcyBsZW5ndGggKyBzdHJpbmcpXHJcbiAgICAgICAgICBjb25zdCB1c2VybmFtZUxlbmd0aCA9IGFjY291bnRJbmZvLmRhdGEucmVhZFVJbnQzMkxFKG9mZnNldClcclxuICAgICAgICAgIG9mZnNldCArPSA0XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhg8J+TiiB1c2VybmFtZSBsZW5ndGg6ICR7dXNlcm5hbWVMZW5ndGh9YClcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgaWYgKHVzZXJuYW1lTGVuZ3RoID4gMCAmJiB1c2VybmFtZUxlbmd0aCA8IDEwMCkge1xyXG4gICAgICAgICAgICBjb25zdCB1c2VybmFtZSA9IGFjY291bnRJbmZvLmRhdGEuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyB1c2VybmFtZUxlbmd0aCkudG9TdHJpbmcoJ3V0ZjgnKVxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhg8J+TiiB1c2VybmFtZTogXCIke3VzZXJuYW1lfVwiYClcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIFxyXG4gICAgICAgICAgLy8gTm93IHRyeSBtYW51YWwgcGFyc2luZ1xyXG4gICAgICAgICAgY29uc3QgcHJvZmlsZUFjY291bnQgPSBtYW51YWxQYXJzZVByb2ZpbGUoYWNjb3VudEluZm8uZGF0YSlcclxuICAgICAgICAgIGlmIChwcm9maWxlQWNjb3VudCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhg4pyFIFN1Y2Nlc3NmdWxseSBtYW51YWxseSBwYXJzZWQgcHJvZmlsZTpgLCB7XHJcbiAgICAgICAgICAgICAgdXNlcm5hbWU6IHByb2ZpbGVBY2NvdW50LnVzZXJuYW1lLFxyXG4gICAgICAgICAgICAgIGJpbzogcHJvZmlsZUFjY291bnQuYmlvLFxyXG4gICAgICAgICAgICAgIGlzSW5pdGlhbGl6ZWQ6IHByb2ZpbGVBY2NvdW50LmlzX2luaXRpYWxpemVkID09PSAxLFxyXG4gICAgICAgICAgICAgIG93bmVyOiBuZXcgUHVibGljS2V5KHByb2ZpbGVBY2NvdW50Lm93bmVyKS50b1N0cmluZygpLFxyXG4gICAgICAgICAgICAgIHByb2ZpbGVJbWFnZTogcHJvZmlsZUFjY291bnQucHJvZmlsZV9pbWFnZSxcclxuICAgICAgICAgICAgICBjb3ZlckltYWdlOiBwcm9maWxlQWNjb3VudC5jb3Zlcl9pbWFnZSxcclxuICAgICAgICAgICAgICBwb3N0c0NvdW50OiBOdW1iZXIocHJvZmlsZUFjY291bnQucG9zdHNfY291bnQpXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhg4p2MIE1hbnVhbCBwYXJzaW5nIGZhaWxlZGApXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIC8vIEFsc28gdHJ5IEJvcnNoIGZvciBjb21wYXJpc29uXHJcbiAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCBwcm9maWxlQWNjb3VudCA9IGRlc2VyaWFsaXplKHByb2ZpbGVBY2NvdW50U2NoZW1hLCBQcm9maWxlQWNjb3VudCwgYWNjb3VudEluZm8uZGF0YSkgYXMgUHJvZmlsZUFjY291bnRcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYOKchSBCb3JzaCBkZXNlcmlhbGl6YXRpb24gYWxzbyB3b3JrZWQ6YCwge1xyXG4gICAgICAgICAgICAgIHVzZXJuYW1lOiBwcm9maWxlQWNjb3VudC51c2VybmFtZSxcclxuICAgICAgICAgICAgICBiaW86IHByb2ZpbGVBY2NvdW50LmJpbyxcclxuICAgICAgICAgICAgICBpc0luaXRpYWxpemVkOiBwcm9maWxlQWNjb3VudC5pc19pbml0aWFsaXplZCA9PT0gMSxcclxuICAgICAgICAgICAgICBvd25lcjogbmV3IFB1YmxpY0tleShwcm9maWxlQWNjb3VudC5vd25lcikudG9TdHJpbmcoKVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYOKdjCBCb3JzaCBkZXNlcmlhbGl6YXRpb24gc3RpbGwgZmFpbHM6YCwgZXJyb3IpXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKGDinYwgRXJyb3IgY2hlY2tpbmcgUERBOmAsIGVycm9yKVxyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhg4p2MIEFjY291bnQgaXMgb3duZWQgYnkgZGlmZmVyZW50IHByb2dyYW06ICR7YWNjb3VudEluZm8ub3duZXIudG9TdHJpbmcoKX1gKVxyXG4gICAgICB9XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmxvZyhg4p2MIEVycm9yIGNoZWNraW5nIFBEQTpgLCBlcnJvcilcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIE1hbnVhbCBwcm9maWxlIHBhcnNlciAtIGJ5cGFzc2VzIEJvcnNoIGRlc2VyaWFsaXphdGlvbiBpc3N1ZXNcclxuICBjb25zdCBtYW51YWxQYXJzZVByb2ZpbGUgPSAoZGF0YTogQnVmZmVyKTogUHJvZmlsZUFjY291bnQgfCBudWxsID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIC8vIEJhc2ljIHZhbGlkYXRpb24gLSBwcm9maWxlcyBzaG91bGQgaGF2ZSBhIG1pbmltdW0gc2l6ZVxyXG4gICAgICBpZiAoZGF0YS5sZW5ndGggPCAxNTApIHJldHVybiBudWxsIC8vIFByb2ZpbGVzIG5lZWQgYXQgbGVhc3QgMTUwIGJ5dGVzIGZvciBiYXNpYyBzdHJ1Y3R1cmVcclxuICAgICAgXHJcbiAgICAgIGxldCBvZmZzZXQgPSAwXHJcbiAgICAgIFxyXG4gICAgICAvLyBQYXJzZSBlYWNoIGZpZWxkIG1hbnVhbGx5XHJcbiAgICAgIGNvbnN0IGlzX2luaXRpYWxpemVkID0gZGF0YVtvZmZzZXRdXHJcbiAgICAgIGlmIChpc19pbml0aWFsaXplZCAhPT0gMSkgcmV0dXJuIG51bGwgLy8gTXVzdCBiZSBpbml0aWFsaXplZFxyXG4gICAgICBvZmZzZXQgKz0gMVxyXG4gICAgICBcclxuICAgICAgY29uc3Qgb3duZXIgPSBkYXRhLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgMzIpXHJcbiAgICAgIG9mZnNldCArPSAzMlxyXG4gICAgICBcclxuICAgICAgLy8gVmFsaWRhdGUgd2UgaGF2ZSBlbm91Z2ggZGF0YSBmb3IgdXNlcm5hbWUgbGVuZ3RoXHJcbiAgICAgIGlmIChvZmZzZXQgKyA0ID4gZGF0YS5sZW5ndGgpIHJldHVybiBudWxsXHJcbiAgICAgIFxyXG4gICAgICAvLyBTdHJpbmcgZmllbGRzICh1c2VybmFtZSwgYmlvLCBwcm9maWxlX2ltYWdlLCBjb3Zlcl9pbWFnZSlcclxuICAgICAgY29uc3QgdXNlcm5hbWVMZW5ndGggPSBkYXRhLnJlYWRVSW50MzJMRShvZmZzZXQpXHJcbiAgICAgIG9mZnNldCArPSA0XHJcbiAgICAgIFxyXG4gICAgICAvLyBWYWxpZGF0ZSB1c2VybmFtZSBsZW5ndGggaXMgcmVhc29uYWJsZVxyXG4gICAgICBpZiAodXNlcm5hbWVMZW5ndGggPiAxMDAgfHwgdXNlcm5hbWVMZW5ndGggPT09IDApIHJldHVybiBudWxsXHJcbiAgICAgIGlmIChvZmZzZXQgKyB1c2VybmFtZUxlbmd0aCA+IGRhdGEubGVuZ3RoKSByZXR1cm4gbnVsbFxyXG4gICAgICBcclxuICAgICAgY29uc3QgdXNlcm5hbWUgPSBkYXRhLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgdXNlcm5hbWVMZW5ndGgpLnRvU3RyaW5nKCd1dGY4JylcclxuICAgICAgb2Zmc2V0ICs9IHVzZXJuYW1lTGVuZ3RoXHJcbiAgICAgIFxyXG4gICAgICAvLyBWYWxpZGF0ZSB3ZSBoYXZlIGVub3VnaCBkYXRhIGZvciBiaW8gbGVuZ3RoXHJcbiAgICAgIGlmIChvZmZzZXQgKyA0ID4gZGF0YS5sZW5ndGgpIHJldHVybiBudWxsXHJcbiAgICAgIFxyXG4gICAgICBjb25zdCBiaW9MZW5ndGggPSBkYXRhLnJlYWRVSW50MzJMRShvZmZzZXQpXHJcbiAgICAgIG9mZnNldCArPSA0XHJcbiAgICAgIFxyXG4gICAgICAvLyBWYWxpZGF0ZSBiaW8gbGVuZ3RoIGlzIHJlYXNvbmFibGVcclxuICAgICAgaWYgKGJpb0xlbmd0aCA+IDEwMDApIHJldHVybiBudWxsXHJcbiAgICAgIGlmIChvZmZzZXQgKyBiaW9MZW5ndGggPiBkYXRhLmxlbmd0aCkgcmV0dXJuIG51bGxcclxuICAgICAgXHJcbiAgICAgIGNvbnN0IGJpbyA9IGRhdGEuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyBiaW9MZW5ndGgpLnRvU3RyaW5nKCd1dGY4JylcclxuICAgICAgb2Zmc2V0ICs9IGJpb0xlbmd0aFxyXG4gICAgICBcclxuICAgICAgLy8gVmFsaWRhdGUgd2UgaGF2ZSBlbm91Z2ggZGF0YSBmb3IgcHJvZmlsZSBpbWFnZSBsZW5ndGhcclxuICAgICAgaWYgKG9mZnNldCArIDQgPiBkYXRhLmxlbmd0aCkgcmV0dXJuIG51bGxcclxuICAgICAgXHJcbiAgICAgIGNvbnN0IHByb2ZpbGVJbWFnZUxlbmd0aCA9IGRhdGEucmVhZFVJbnQzMkxFKG9mZnNldClcclxuICAgICAgb2Zmc2V0ICs9IDRcclxuICAgICAgXHJcbiAgICAgIC8vIFZhbGlkYXRlIHByb2ZpbGUgaW1hZ2UgbGVuZ3RoIGlzIHJlYXNvbmFibGVcclxuICAgICAgaWYgKHByb2ZpbGVJbWFnZUxlbmd0aCA+IDUwMCkgcmV0dXJuIG51bGxcclxuICAgICAgaWYgKG9mZnNldCArIHByb2ZpbGVJbWFnZUxlbmd0aCA+IGRhdGEubGVuZ3RoKSByZXR1cm4gbnVsbFxyXG4gICAgICBcclxuICAgICAgY29uc3QgcHJvZmlsZV9pbWFnZSA9IGRhdGEuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyBwcm9maWxlSW1hZ2VMZW5ndGgpLnRvU3RyaW5nKCd1dGY4JylcclxuICAgICAgb2Zmc2V0ICs9IHByb2ZpbGVJbWFnZUxlbmd0aFxyXG4gICAgICBcclxuICAgICAgLy8gVmFsaWRhdGUgd2UgaGF2ZSBlbm91Z2ggZGF0YSBmb3IgY292ZXIgaW1hZ2UgbGVuZ3RoXHJcbiAgICAgIGlmIChvZmZzZXQgKyA0ID4gZGF0YS5sZW5ndGgpIHJldHVybiBudWxsXHJcbiAgICAgIFxyXG4gICAgICBjb25zdCBjb3ZlckltYWdlTGVuZ3RoID0gZGF0YS5yZWFkVUludDMyTEUob2Zmc2V0KVxyXG4gICAgICBvZmZzZXQgKz0gNFxyXG4gICAgICBcclxuICAgICAgLy8gVmFsaWRhdGUgY292ZXIgaW1hZ2UgbGVuZ3RoIGlzIHJlYXNvbmFibGVcclxuICAgICAgaWYgKGNvdmVySW1hZ2VMZW5ndGggPiA1MDApIHJldHVybiBudWxsXHJcbiAgICAgIGlmIChvZmZzZXQgKyBjb3ZlckltYWdlTGVuZ3RoID4gZGF0YS5sZW5ndGgpIHJldHVybiBudWxsXHJcbiAgICAgIFxyXG4gICAgICBjb25zdCBjb3Zlcl9pbWFnZSA9IGRhdGEuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyBjb3ZlckltYWdlTGVuZ3RoKS50b1N0cmluZygndXRmOCcpXHJcbiAgICAgIG9mZnNldCArPSBjb3ZlckltYWdlTGVuZ3RoXHJcbiAgICAgIFxyXG4gICAgICAvLyBWYWxpZGF0ZSB3ZSBoYXZlIGVub3VnaCBkYXRhIGZvciBhbGwgdGhlIHU2NCBmaWVsZHMgKDggYnl0ZXMgZWFjaCAqIDYgZmllbGRzID0gNDggYnl0ZXMpXHJcbiAgICAgIGlmIChvZmZzZXQgKyA0OCA+IGRhdGEubGVuZ3RoKSByZXR1cm4gbnVsbFxyXG4gICAgICBcclxuICAgICAgLy8gdTY0IGZpZWxkc1xyXG4gICAgICBjb25zdCBjcmVhdGVkX2F0ID0gZGF0YS5yZWFkQmlnVUludDY0TEUob2Zmc2V0KVxyXG4gICAgICBvZmZzZXQgKz0gOFxyXG4gICAgICBcclxuICAgICAgY29uc3QgZm9sbG93ZXJzX2NvdW50ID0gZGF0YS5yZWFkQmlnVUludDY0TEUob2Zmc2V0KVxyXG4gICAgICBvZmZzZXQgKz0gOFxyXG4gICAgICBcclxuICAgICAgY29uc3QgZm9sbG93aW5nX2NvdW50ID0gZGF0YS5yZWFkQmlnVUludDY0TEUob2Zmc2V0KVxyXG4gICAgICBvZmZzZXQgKz0gOFxyXG4gICAgICBcclxuICAgICAgLy8gaTY0IGZpZWxkXHJcbiAgICAgIGNvbnN0IHVzZXJfY3JlZGl0X3JhdGluZyA9IGRhdGEucmVhZEJpZ0ludDY0TEUob2Zmc2V0KVxyXG4gICAgICBvZmZzZXQgKz0gOFxyXG4gICAgICBcclxuICAgICAgY29uc3QgcG9zdHNfY291bnQgPSBkYXRhLnJlYWRCaWdVSW50NjRMRShvZmZzZXQpXHJcbiAgICAgIG9mZnNldCArPSA4XHJcbiAgICAgIFxyXG4gICAgICBjb25zdCBsYXN0X3Bvc3RfdGltZXN0YW1wID0gZGF0YS5yZWFkQmlnVUludDY0TEUob2Zmc2V0KVxyXG4gICAgICBvZmZzZXQgKz0gOFxyXG4gICAgICBcclxuICAgICAgY29uc3QgZGFpbHlfcG9zdF9jb3VudCA9IGRhdGEucmVhZEJpZ1VJbnQ2NExFKG9mZnNldClcclxuICAgICAgb2Zmc2V0ICs9IDhcclxuICAgICAgXHJcbiAgICAgIC8vIFZhbGlkYXRlIHdlIGhhdmUgZW5vdWdoIGRhdGEgZm9yIHRoZSBmaW5hbCB1OCBmaWVsZFxyXG4gICAgICBpZiAob2Zmc2V0ICsgMSA+IGRhdGEubGVuZ3RoKSByZXR1cm4gbnVsbFxyXG4gICAgICBcclxuICAgICAgY29uc3QgaXNfdmVyaWZpZWQgPSBkYXRhW29mZnNldF1cclxuICAgICAgb2Zmc2V0ICs9IDFcclxuICAgICAgXHJcbiAgICAgIHJldHVybiBuZXcgUHJvZmlsZUFjY291bnQoe1xyXG4gICAgICAgIGlzX2luaXRpYWxpemVkLFxyXG4gICAgICAgIG93bmVyOiBuZXcgVWludDhBcnJheShvd25lciksXHJcbiAgICAgICAgdXNlcm5hbWUsXHJcbiAgICAgICAgYmlvLFxyXG4gICAgICAgIHByb2ZpbGVfaW1hZ2UsXHJcbiAgICAgICAgY292ZXJfaW1hZ2UsXHJcbiAgICAgICAgY3JlYXRlZF9hdCxcclxuICAgICAgICBmb2xsb3dlcnNfY291bnQsXHJcbiAgICAgICAgZm9sbG93aW5nX2NvdW50LFxyXG4gICAgICAgIHVzZXJfY3JlZGl0X3JhdGluZyxcclxuICAgICAgICBwb3N0c19jb3VudCxcclxuICAgICAgICBsYXN0X3Bvc3RfdGltZXN0YW1wLFxyXG4gICAgICAgIGRhaWx5X3Bvc3RfY291bnQsXHJcbiAgICAgICAgaXNfdmVyaWZpZWRcclxuICAgICAgfSlcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIC8vIFNpbGVudCBmYWlsdXJlIC0gbm90IGEgcHJvZmlsZSBhY2NvdW50IG9yIGludmFsaWQgZGF0YVxyXG4gICAgICByZXR1cm4gbnVsbFxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gTWFudWFsIHBvc3QgcGFyc2VyIC0gYnlwYXNzZXMgQm9yc2ggZGVzZXJpYWxpemF0aW9uIGlzc3Vlc1xyXG4gIGNvbnN0IG1hbnVhbFBhcnNlUG9zdCA9IChkYXRhOiBCdWZmZXIpOiBQb3N0QWNjb3VudCB8IG51bGwgPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgLy8gUXVpY2sgdmFsaWRhdGlvbjogcG9zdHMgc2hvdWxkIGhhdmUgc3BlY2lmaWMgc2l6ZSBhbmQgc3RydWN0dXJlXHJcbiAgICAgIGlmIChkYXRhLmxlbmd0aCA8IDEwMCkgcmV0dXJuIG51bGwgLy8gUG9zdHMgc2hvdWxkIGJlIGxhcmdlciB0aGFuIHByb2ZpbGVzXHJcbiAgICAgIFxyXG4gICAgICBsZXQgb2Zmc2V0ID0gMFxyXG4gICAgICBcclxuICAgICAgLy8gUGFyc2UgZWFjaCBmaWVsZCBtYW51YWxseVxyXG4gICAgICBjb25zdCBpc19pbml0aWFsaXplZCA9IGRhdGFbb2Zmc2V0XVxyXG4gICAgICBpZiAoaXNfaW5pdGlhbGl6ZWQgIT09IDEpIHJldHVybiBudWxsIC8vIE11c3QgYmUgaW5pdGlhbGl6ZWRcclxuICAgICAgb2Zmc2V0ICs9IDFcclxuICAgICAgXHJcbiAgICAgIC8vIENoZWNrIGlmIHRoaXMgbG9va3MgbGlrZSBhIHBvc3QgdnMgcHJvZmlsZSBieSBleGFtaW5pbmcgdGhlIHN0cnVjdHVyZVxyXG4gICAgICAvLyBQb3N0cyBzdGFydCB3aXRoOiB1OCAoaW5pdCksIHU2NCAoaWQpLCBbMzJddTggKGF1dGhvciksIHN0cmluZyAoY29udGVudClcclxuICAgICAgLy8gUHJvZmlsZXMgc3RhcnQgd2l0aDogdTggKGluaXQpLCBbMzJddTggKG93bmVyKSwgc3RyaW5nICh1c2VybmFtZSlcclxuICAgICAgXHJcbiAgICAgIGNvbnN0IGlkID0gZGF0YS5yZWFkQmlnVUludDY0TEUob2Zmc2V0KVxyXG4gICAgICBvZmZzZXQgKz0gOFxyXG4gICAgICBcclxuICAgICAgY29uc3QgYXV0aG9yID0gZGF0YS5zbGljZShvZmZzZXQsIG9mZnNldCArIDMyKVxyXG4gICAgICBvZmZzZXQgKz0gMzJcclxuICAgICAgXHJcbiAgICAgIGNvbnN0IGNvbnRlbnRMZW5ndGggPSBkYXRhLnJlYWRVSW50MzJMRShvZmZzZXQpXHJcbiAgICAgIG9mZnNldCArPSA0XHJcbiAgICAgIFxyXG4gICAgICAvLyBWYWxpZGF0ZSBjb250ZW50IGxlbmd0aCBpcyByZWFzb25hYmxlIChub3QgdG9vIGxhcmdlKVxyXG4gICAgICBpZiAoY29udGVudExlbmd0aCA+IDEwMDAwIHx8IGNvbnRlbnRMZW5ndGggPT09IDApIHJldHVybiBudWxsXHJcbiAgICAgIGlmIChvZmZzZXQgKyBjb250ZW50TGVuZ3RoID4gZGF0YS5sZW5ndGgpIHJldHVybiBudWxsXHJcbiAgICAgIFxyXG4gICAgICBjb25zdCBjb250ZW50ID0gZGF0YS5zbGljZShvZmZzZXQsIG9mZnNldCArIGNvbnRlbnRMZW5ndGgpLnRvU3RyaW5nKCd1dGY4JylcclxuICAgICAgb2Zmc2V0ICs9IGNvbnRlbnRMZW5ndGhcclxuICAgICAgXHJcbiAgICAgIC8vIEVuc3VyZSB3ZSBoYXZlIGVub3VnaCByZW1haW5pbmcgZGF0YSBmb3IgdGhlIHJlc3Qgb2YgdGhlIHBvc3Qgc3RydWN0dXJlXHJcbiAgICAgIGlmIChvZmZzZXQgKyA0MCA+IGRhdGEubGVuZ3RoKSByZXR1cm4gbnVsbCAvLyBOZWVkIGF0IGxlYXN0IDQwIG1vcmUgYnl0ZXMgZm9yIHRpbWVzdGFtcHMgYW5kIGNvdW50c1xyXG4gICAgICBcclxuICAgICAgY29uc3QgdGltZXN0YW1wID0gZGF0YS5yZWFkQmlnVUludDY0TEUob2Zmc2V0KVxyXG4gICAgICBvZmZzZXQgKz0gOFxyXG4gICAgICBcclxuICAgICAgY29uc3QgbGlrZXMgPSBkYXRhLnJlYWRCaWdVSW50NjRMRShvZmZzZXQpXHJcbiAgICAgIG9mZnNldCArPSA4XHJcbiAgICAgIFxyXG4gICAgICBjb25zdCBjb21tZW50cyA9IGRhdGEucmVhZEJpZ1VJbnQ2NExFKG9mZnNldClcclxuICAgICAgb2Zmc2V0ICs9IDhcclxuICAgICAgXHJcbiAgICAgIGNvbnN0IG1pcnJvcnMgPSBkYXRhLnJlYWRCaWdVSW50NjRMRShvZmZzZXQpXHJcbiAgICAgIG9mZnNldCArPSA4XHJcbiAgICAgIFxyXG4gICAgICAvLyBQYXJzZSBpbWFnZXMgYXJyYXkgbGVuZ3RoXHJcbiAgICAgIGlmIChvZmZzZXQgKyA0ID4gZGF0YS5sZW5ndGgpIHJldHVybiBudWxsXHJcbiAgICAgIGNvbnN0IGltYWdlc0xlbmd0aCA9IGRhdGEucmVhZFVJbnQzMkxFKG9mZnNldClcclxuICAgICAgb2Zmc2V0ICs9IDRcclxuICAgICAgY29uc3QgaW1hZ2VzOiBzdHJpbmdbXSA9IFtdXHJcbiAgICAgIFxyXG4gICAgICAvLyBQYXJzZSBpbWFnZXMgYXJyYXkgLSBlYWNoIGltYWdlIGlzIGEgbGVuZ3RoLXByZWZpeGVkIHN0cmluZ1xyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGltYWdlc0xlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgaWYgKG9mZnNldCArIDQgPiBkYXRhLmxlbmd0aCkgcmV0dXJuIG51bGxcclxuICAgICAgICBjb25zdCBpbWFnZUxlbmd0aCA9IGRhdGEucmVhZFVJbnQzMkxFKG9mZnNldClcclxuICAgICAgICBvZmZzZXQgKz0gNFxyXG4gICAgICAgIGlmIChvZmZzZXQgKyBpbWFnZUxlbmd0aCA+IGRhdGEubGVuZ3RoKSByZXR1cm4gbnVsbFxyXG4gICAgICAgIGNvbnN0IGltYWdlID0gZGF0YS5zbGljZShvZmZzZXQsIG9mZnNldCArIGltYWdlTGVuZ3RoKS50b1N0cmluZygndXRmOCcpXHJcbiAgICAgICAgb2Zmc2V0ICs9IGltYWdlTGVuZ3RoXHJcbiAgICAgICAgaW1hZ2VzLnB1c2goaW1hZ2UpXHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIC8vIEVuc3VyZSB3ZSBoYXZlIGVub3VnaCBkYXRhIGZvciByYXRpbmcgYW5kIGtpbGwgem9uZVxyXG4gICAgICBpZiAob2Zmc2V0ICsgMiA+IGRhdGEubGVuZ3RoKSByZXR1cm4gbnVsbFxyXG4gICAgICBcclxuICAgICAgY29uc3QgcmF0aW5nID0gZGF0YVtvZmZzZXRdXHJcbiAgICAgIG9mZnNldCArPSAxXHJcbiAgICAgIFxyXG4gICAgICBjb25zdCBpbl9raWxsX3pvbmUgPSBkYXRhW29mZnNldF1cclxuICAgICAgb2Zmc2V0ICs9IDFcclxuICAgICAgXHJcbiAgICAgIHJldHVybiBuZXcgUG9zdEFjY291bnQoe1xyXG4gICAgICAgIGlzX2luaXRpYWxpemVkLFxyXG4gICAgICAgIGlkLFxyXG4gICAgICAgIGF1dGhvcjogbmV3IFVpbnQ4QXJyYXkoYXV0aG9yKSxcclxuICAgICAgICBjb250ZW50LFxyXG4gICAgICAgIHRpbWVzdGFtcCxcclxuICAgICAgICBsaWtlcyxcclxuICAgICAgICBjb21tZW50cyxcclxuICAgICAgICBtaXJyb3JzLFxyXG4gICAgICAgIGltYWdlcyxcclxuICAgICAgICByYXRpbmcsXHJcbiAgICAgICAgaW5fa2lsbF96b25lXHJcbiAgICAgIH0pXHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAvLyBTaWxlbnQgZmFpbHVyZSAtIG5vdCBhIHBvc3QgYWNjb3VudFxyXG4gICAgICByZXR1cm4gbnVsbFxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gQ29udmVydCBDb21tdW5pdHlBY2NvdW50IHRvIENvbW11bml0eSBpbnRlcmZhY2VcclxuICBjb25zdCBjb252ZXJ0Q29tbXVuaXR5QWNjb3VudCA9IChjb21tdW5pdHlBY2NvdW50OiBDb21tdW5pdHlBY2NvdW50KTogQ29tbXVuaXR5ID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGlzSW5pdGlhbGl6ZWQ6IGNvbW11bml0eUFjY291bnQuaXNfaW5pdGlhbGl6ZWQgPT09IDEsXHJcbiAgICAgIGlkOiBOdW1iZXIoY29tbXVuaXR5QWNjb3VudC5pZCksXHJcbiAgICAgIGNyZWF0b3I6IG5ldyBQdWJsaWNLZXkoY29tbXVuaXR5QWNjb3VudC5jcmVhdG9yKSxcclxuICAgICAgbmFtZTogY29tbXVuaXR5QWNjb3VudC5uYW1lLFxyXG4gICAgICBkZXNjcmlwdGlvbjogY29tbXVuaXR5QWNjb3VudC5kZXNjcmlwdGlvbixcclxuICAgICAgYXZhdGFyOiBjb21tdW5pdHlBY2NvdW50LmF2YXRhcixcclxuICAgICAgcnVsZXM6IGNvbW11bml0eUFjY291bnQucnVsZXMsXHJcbiAgICAgIG1lbWJlckNvdW50OiBOdW1iZXIoY29tbXVuaXR5QWNjb3VudC5tZW1iZXJfY291bnQpLFxyXG4gICAgICBjcmVhdGVkQXQ6IE51bWJlcihjb21tdW5pdHlBY2NvdW50LmNyZWF0ZWRfYXQpICogMTAwMCwgLy8gQ29udmVydCBzZWNvbmRzIHRvIG1pbGxpc2Vjb25kc1xyXG4gICAgICBpc1ByaXZhdGU6IGNvbW11bml0eUFjY291bnQuaXNfcHJpdmF0ZSA9PT0gMSxcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIENyZWF0ZSBDb21tdW5pdHlcclxuICBjb25zdCBjcmVhdGVDb21tdW5pdHkgPSBhc3luYyAoXHJcbiAgICBuYW1lOiBzdHJpbmcsXHJcbiAgICBkZXNjcmlwdGlvbjogc3RyaW5nLFxyXG4gICAgYXZhdGFyOiBzdHJpbmcsXHJcbiAgICBydWxlczogc3RyaW5nW10gPSBbXVxyXG4gICkgPT4ge1xyXG4gICAgaWYgKCFwdWJsaWNLZXkpIHRocm93IG5ldyBFcnJvcignV2FsbGV0IG5vdCBjb25uZWN0ZWQnKVxyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCfwn4+Y77iPIENyZWF0aW5nIGNvbW11bml0eTonLCBuYW1lKVxyXG4gICAgICBcclxuICAgICAgY29uc3QgYmFsYW5jZSA9IGF3YWl0IGNoZWNrU09MQmFsYW5jZSgpXHJcbiAgICAgIGlmIChiYWxhbmNlIDwgMC4wNSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgSW5zdWZmaWNpZW50IFNPTCBiYWxhbmNlOiAke2JhbGFuY2V9LiBOZWVkIGF0IGxlYXN0IDAuMDUgU09MLmApXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIEdlbmVyYXRlIGEga2V5cGFpciBmb3IgdGhlIGNvbW11bml0eSBhY2NvdW50XHJcbiAgICAgIGNvbnN0IGNvbW11bml0eUtleXBhaXIgPSBLZXlwYWlyLmdlbmVyYXRlKClcclxuICAgICAgY29uc29sZS5sb2coYPCfk40gQ29tbXVuaXR5IEFjY291bnQ6ICR7Y29tbXVuaXR5S2V5cGFpci5wdWJsaWNLZXkudG9TdHJpbmcoKX1gKVxyXG5cclxuICAgICAgY29uc3QgaW5zdHJ1Y3Rpb25EYXRhID0gbmV3IENyZWF0ZUNvbW11bml0eUluc3RydWN0aW9uKHtcclxuICAgICAgICBuYW1lLFxyXG4gICAgICAgIGRlc2NyaXB0aW9uLFxyXG4gICAgICAgIGF2YXRhcixcclxuICAgICAgICBydWxlcyxcclxuICAgICAgfSlcclxuXHJcbiAgICAgIGNvbnN0IGNyZWF0ZUNvbW11bml0eVZhcmlhbnQgPSBCdWZmZXIuZnJvbShbN10pIC8vIENyZWF0ZUNvbW11bml0eSBlbnVtIGluZGV4XHJcbiAgICAgIGNvbnN0IHNlcmlhbGl6ZWREYXRhID0gc2VyaWFsaXplKGNyZWF0ZUNvbW11bml0eVNjaGVtYSwgaW5zdHJ1Y3Rpb25EYXRhKVxyXG4gICAgICBjb25zdCBmdWxsSW5zdHJ1Y3Rpb25EYXRhID0gQnVmZmVyLmNvbmNhdChbY3JlYXRlQ29tbXVuaXR5VmFyaWFudCwgQnVmZmVyLmZyb20oc2VyaWFsaXplZERhdGEpXSlcclxuXHJcbiAgICAgIGNvbnN0IGluc3RydWN0aW9uID0gbmV3IFRyYW5zYWN0aW9uSW5zdHJ1Y3Rpb24oe1xyXG4gICAgICAgIGtleXM6IFtcclxuICAgICAgICAgIHsgcHVia2V5OiBwdWJsaWNLZXksIGlzU2lnbmVyOiB0cnVlLCBpc1dyaXRhYmxlOiB0cnVlIH0sIC8vIENyZWF0b3IgYWNjb3VudFxyXG4gICAgICAgICAgeyBwdWJrZXk6IGNvbW11bml0eUtleXBhaXIucHVibGljS2V5LCBpc1NpZ25lcjogdHJ1ZSwgaXNXcml0YWJsZTogdHJ1ZSB9LCAvLyBDb21tdW5pdHkgYWNjb3VudFxyXG4gICAgICAgICAgeyBwdWJrZXk6IFN5c3RlbVByb2dyYW0ucHJvZ3JhbUlkLCBpc1NpZ25lcjogZmFsc2UsIGlzV3JpdGFibGU6IGZhbHNlIH0sIC8vIFN5c3RlbSBwcm9ncmFtXHJcbiAgICAgICAgXSxcclxuICAgICAgICBwcm9ncmFtSWQ6IFBST0dSQU1fSUQsXHJcbiAgICAgICAgZGF0YTogZnVsbEluc3RydWN0aW9uRGF0YSxcclxuICAgICAgfSlcclxuXHJcbiAgICAgIGNvbnN0IHRyYW5zYWN0aW9uID0gbmV3IFRyYW5zYWN0aW9uKCkuYWRkKGluc3RydWN0aW9uKVxyXG4gICAgICBjb25zdCB7IGJsb2NraGFzaCB9ID0gYXdhaXQgY29ubmVjdGlvbi5nZXRMYXRlc3RCbG9ja2hhc2goJ3Byb2Nlc3NlZCcpXHJcbiAgICAgIHRyYW5zYWN0aW9uLnJlY2VudEJsb2NraGFzaCA9IGJsb2NraGFzaFxyXG4gICAgICB0cmFuc2FjdGlvbi5mZWVQYXllciA9IHB1YmxpY0tleVxyXG5cclxuICAgICAgLy8gU2lnbiB3aXRoIGNvbW11bml0eSBrZXlwYWlyXHJcbiAgICAgIHRyYW5zYWN0aW9uLnBhcnRpYWxTaWduKGNvbW11bml0eUtleXBhaXIpXHJcblxyXG4gICAgICBjb25zdCBzaWduYXR1cmUgPSBhd2FpdCBzZW5kVHJhbnNhY3Rpb24odHJhbnNhY3Rpb24sIGNvbm5lY3Rpb24sIHtcclxuICAgICAgICBza2lwUHJlZmxpZ2h0OiBmYWxzZSxcclxuICAgICAgICBwcmVmbGlnaHRDb21taXRtZW50OiAncHJvY2Vzc2VkJyxcclxuICAgICAgICBtYXhSZXRyaWVzOiAzLFxyXG4gICAgICAgIHNpZ25lcnM6IFtjb21tdW5pdHlLZXlwYWlyXSxcclxuICAgICAgfSlcclxuXHJcbiAgICAgIGF3YWl0IGNvbm5lY3Rpb24uY29uZmlybVRyYW5zYWN0aW9uKHtcclxuICAgICAgICBzaWduYXR1cmUsXHJcbiAgICAgICAgYmxvY2toYXNoLFxyXG4gICAgICAgIGxhc3RWYWxpZEJsb2NrSGVpZ2h0OiAoYXdhaXQgY29ubmVjdGlvbi5nZXRMYXRlc3RCbG9ja2hhc2goKSkubGFzdFZhbGlkQmxvY2tIZWlnaHQsXHJcbiAgICAgIH0sICdwcm9jZXNzZWQnKVxyXG5cclxuICAgICAgY29uc29sZS5sb2coJ+KchSBDb21tdW5pdHkgY3JlYXRlZCBzdWNjZXNzZnVsbHkhJylcclxuICAgICAgdG9hc3Quc3VjY2VzcyhgQ29tbXVuaXR5IFwiJHtuYW1lfVwiIGNyZWF0ZWQgc3VjY2Vzc2Z1bGx5IWApXHJcbiAgICAgIHJldHVybiBzaWduYXR1cmVcclxuICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcclxuICAgICAgY29uc29sZS5lcnJvcign4p2MIENvbW11bml0eSBjcmVhdGlvbiBlcnJvcjonLCBlcnJvcilcclxuICAgICAgdG9hc3QuZXJyb3IoYEZhaWxlZCB0byBjcmVhdGUgY29tbXVuaXR5OiAke2Vycm9yLm1lc3NhZ2UgfHwgJ1Vua25vd24gZXJyb3InfWApXHJcbiAgICAgIHRocm93IGVycm9yXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBGb2xsb3cgUHJvZmlsZVxyXG4gIGNvbnN0IGZvbGxvd1Byb2ZpbGUgPSBhc3luYyAocHJvZmlsZVB1YmxpY0tleTogUHVibGljS2V5KSA9PiB7XHJcbiAgICBpZiAoIXB1YmxpY0tleSkgdGhyb3cgbmV3IEVycm9yKCdXYWxsZXQgbm90IGNvbm5lY3RlZCcpXHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc29sZS5sb2coJ/CfkaUgRm9sbG93aW5nIHByb2ZpbGU6JywgcHJvZmlsZVB1YmxpY0tleS50b1N0cmluZygpKVxyXG5cclxuICAgICAgLy8gRmluZCB0aGUgZm9sbG93ZXIncyBwcm9maWxlIGFjY291bnQgKGN1cnJlbnQgdXNlcidzIHByb2ZpbGUpXHJcbiAgICAgIGNvbnNvbGUubG9nKGDwn5SNIFNlYXJjaGluZyBmb3IgZm9sbG93ZXIgcHJvZmlsZTogJHtwdWJsaWNLZXkudG9TdHJpbmcoKS5zbGljZSgwLCA4KX0uLi5gKVxyXG4gICAgICBjb25zdCBhY2NvdW50cyA9IGF3YWl0IGNvbm5lY3Rpb24uZ2V0UHJvZ3JhbUFjY291bnRzKFBST0dSQU1fSUQpXHJcbiAgICAgIGxldCBmb2xsb3dlclByb2ZpbGVBZGRyZXNzOiBQdWJsaWNLZXkgfCBudWxsID0gbnVsbFxyXG4gICAgICBcclxuICAgICAgZm9yIChjb25zdCB7IGFjY291bnQsIHB1YmtleSB9IG9mIGFjY291bnRzKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgIGNvbnN0IHBhcnNlZFByb2ZpbGUgPSBtYW51YWxQYXJzZVByb2ZpbGUoYWNjb3VudC5kYXRhKVxyXG4gICAgICAgICAgaWYgKHBhcnNlZFByb2ZpbGUgJiYgXHJcbiAgICAgICAgICAgICAgcGFyc2VkUHJvZmlsZS5pc19pbml0aWFsaXplZCA9PT0gMSAmJiBcclxuICAgICAgICAgICAgICBuZXcgUHVibGljS2V5KHBhcnNlZFByb2ZpbGUub3duZXIpLmVxdWFscyhwdWJsaWNLZXkpKSB7XHJcbiAgICAgICAgICAgIGZvbGxvd2VyUHJvZmlsZUFkZHJlc3MgPSBwdWJrZXlcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYPCfjq8gRm91bmQgZm9sbG93ZXIgcHJvZmlsZSBhdCBhZGRyZXNzOiAke3B1YmtleS50b1N0cmluZygpfWApXHJcbiAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgIC8vIE5vdCBhIHByb2ZpbGUgYWNjb3VudCwgY29udGludWVcclxuICAgICAgICAgIGNvbnRpbnVlXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoIWZvbGxvd2VyUHJvZmlsZUFkZHJlc3MpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZvbGxvd2VyIHByb2ZpbGUgZm9yICR7cHVibGljS2V5LnRvU3RyaW5nKCkuc2xpY2UoMCwgOCl9IG5vdCBmb3VuZCBvbiBibG9ja2NoYWluLiBQbGVhc2UgY3JlYXRlIGEgcHJvZmlsZSBmaXJzdC5gKVxyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCBpbnN0cnVjdGlvbkRhdGEgPSBuZXcgRm9sbG93UHJvZmlsZUluc3RydWN0aW9uKHtcclxuICAgICAgICBwcm9maWxlX2lkOiBwcm9maWxlUHVibGljS2V5LFxyXG4gICAgICB9KVxyXG5cclxuICAgICAgY29uc3QgZm9sbG93UHJvZmlsZVZhcmlhbnQgPSBCdWZmZXIuZnJvbShbNV0pIC8vIEZvbGxvd1Byb2ZpbGUgZW51bSBpbmRleFxyXG4gICAgICBjb25zdCBzZXJpYWxpemVkRGF0YSA9IHNlcmlhbGl6ZShmb2xsb3dQcm9maWxlU2NoZW1hLCBpbnN0cnVjdGlvbkRhdGEpXHJcbiAgICAgIGNvbnN0IGZ1bGxJbnN0cnVjdGlvbkRhdGEgPSBCdWZmZXIuY29uY2F0KFtmb2xsb3dQcm9maWxlVmFyaWFudCwgQnVmZmVyLmZyb20oc2VyaWFsaXplZERhdGEpXSlcclxuXHJcbiAgICAgIGNvbnN0IGluc3RydWN0aW9uID0gbmV3IFRyYW5zYWN0aW9uSW5zdHJ1Y3Rpb24oe1xyXG4gICAgICAgIGtleXM6IFtcclxuICAgICAgICAgIHsgcHVia2V5OiBwdWJsaWNLZXksIGlzU2lnbmVyOiB0cnVlLCBpc1dyaXRhYmxlOiBmYWxzZSB9LCAvLyBGb2xsb3dlciBhY2NvdW50XHJcbiAgICAgICAgICB7IHB1YmtleTogcHJvZmlsZVB1YmxpY0tleSwgaXNTaWduZXI6IGZhbHNlLCBpc1dyaXRhYmxlOiB0cnVlIH0sIC8vIFByb2ZpbGUgdG8gZm9sbG93XHJcbiAgICAgICAgICB7IHB1YmtleTogZm9sbG93ZXJQcm9maWxlQWRkcmVzcywgaXNTaWduZXI6IGZhbHNlLCBpc1dyaXRhYmxlOiB0cnVlIH0sIC8vIEZvbGxvd2VyJ3MgcHJvZmlsZSBhY2NvdW50XHJcbiAgICAgICAgXSxcclxuICAgICAgICBwcm9ncmFtSWQ6IFBST0dSQU1fSUQsXHJcbiAgICAgICAgZGF0YTogZnVsbEluc3RydWN0aW9uRGF0YSxcclxuICAgICAgfSlcclxuXHJcbiAgICAgIGNvbnNvbGUubG9nKCfwn5SRIEZvbGxvdyB0cmFuc2FjdGlvbiBhY2NvdW50czonKVxyXG4gICAgICBjb25zb2xlLmxvZyhgICBGb2xsb3dlcjogJHtwdWJsaWNLZXkudG9TdHJpbmcoKX0gKHNpZ25lciwgcmVhZG9ubHkpYClcclxuICAgICAgY29uc29sZS5sb2coYCAgUHJvZmlsZSB0byBmb2xsb3c6ICR7cHJvZmlsZVB1YmxpY0tleS50b1N0cmluZygpfSAobm90IHNpZ25lciwgd3JpdGFibGUpYClcclxuICAgICAgY29uc29sZS5sb2coYCAgRm9sbG93ZXIgcHJvZmlsZTogJHtmb2xsb3dlclByb2ZpbGVBZGRyZXNzLnRvU3RyaW5nKCl9IChub3Qgc2lnbmVyLCB3cml0YWJsZSlgKVxyXG5cclxuICAgICAgY29uc3QgdHJhbnNhY3Rpb24gPSBuZXcgVHJhbnNhY3Rpb24oKS5hZGQoaW5zdHJ1Y3Rpb24pXHJcbiAgICAgIGNvbnN0IHsgYmxvY2toYXNoIH0gPSBhd2FpdCBjb25uZWN0aW9uLmdldExhdGVzdEJsb2NraGFzaCgncHJvY2Vzc2VkJylcclxuICAgICAgdHJhbnNhY3Rpb24ucmVjZW50QmxvY2toYXNoID0gYmxvY2toYXNoXHJcbiAgICAgIHRyYW5zYWN0aW9uLmZlZVBheWVyID0gcHVibGljS2V5XHJcblxyXG4gICAgICBjb25zdCBzaWduYXR1cmUgPSBhd2FpdCBzZW5kVHJhbnNhY3Rpb24odHJhbnNhY3Rpb24sIGNvbm5lY3Rpb24sIHtcclxuICAgICAgICBza2lwUHJlZmxpZ2h0OiBmYWxzZSxcclxuICAgICAgICBwcmVmbGlnaHRDb21taXRtZW50OiAncHJvY2Vzc2VkJyxcclxuICAgICAgICBtYXhSZXRyaWVzOiAzLFxyXG4gICAgICB9KVxyXG5cclxuICAgICAgYXdhaXQgY29ubmVjdGlvbi5jb25maXJtVHJhbnNhY3Rpb24oe1xyXG4gICAgICAgIHNpZ25hdHVyZSxcclxuICAgICAgICBibG9ja2hhc2gsXHJcbiAgICAgICAgbGFzdFZhbGlkQmxvY2tIZWlnaHQ6IChhd2FpdCBjb25uZWN0aW9uLmdldExhdGVzdEJsb2NraGFzaCgpKS5sYXN0VmFsaWRCbG9ja0hlaWdodCxcclxuICAgICAgfSwgJ3Byb2Nlc3NlZCcpXHJcblxyXG4gICAgICBjb25zb2xlLmxvZygn4pyFIEZvbGxvdyBzdWNjZXNzZnVsIScpXHJcbiAgICAgIHRvYXN0LnN1Y2Nlc3MoJ1Byb2ZpbGUgZm9sbG93ZWQhJylcclxuICAgICAgcmV0dXJuIHNpZ25hdHVyZVxyXG4gICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdGb2xsb3cgZXJyb3I6JywgZXJyb3IpXHJcbiAgICAgIHRvYXN0LmVycm9yKGBGYWlsZWQgdG8gZm9sbG93IHByb2ZpbGU6ICR7ZXJyb3IubWVzc2FnZSB8fCAnVW5rbm93biBlcnJvcid9YClcclxuICAgICAgdGhyb3cgZXJyb3JcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIFVuZm9sbG93IFByb2ZpbGVcclxuICBjb25zdCB1bmZvbGxvd1Byb2ZpbGUgPSBhc3luYyAocHJvZmlsZVB1YmxpY0tleTogUHVibGljS2V5KSA9PiB7XHJcbiAgICBpZiAoIXB1YmxpY0tleSkgdGhyb3cgbmV3IEVycm9yKCdXYWxsZXQgbm90IGNvbm5lY3RlZCcpXHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc29sZS5sb2coJ/CfkaUgVW5mb2xsb3dpbmcgcHJvZmlsZTonLCBwcm9maWxlUHVibGljS2V5LnRvU3RyaW5nKCkpXHJcblxyXG4gICAgICAvLyBGaW5kIHRoZSBmb2xsb3dlcidzIHByb2ZpbGUgYWNjb3VudCAoY3VycmVudCB1c2VyJ3MgcHJvZmlsZSlcclxuICAgICAgY29uc29sZS5sb2coYPCflI0gU2VhcmNoaW5nIGZvciBmb2xsb3dlciBwcm9maWxlOiAke3B1YmxpY0tleS50b1N0cmluZygpLnNsaWNlKDAsIDgpfS4uLmApXHJcbiAgICAgIGNvbnN0IGFjY291bnRzID0gYXdhaXQgY29ubmVjdGlvbi5nZXRQcm9ncmFtQWNjb3VudHMoUFJPR1JBTV9JRClcclxuICAgICAgbGV0IGZvbGxvd2VyUHJvZmlsZUFkZHJlc3M6IFB1YmxpY0tleSB8IG51bGwgPSBudWxsXHJcbiAgICAgIFxyXG4gICAgICBmb3IgKGNvbnN0IHsgYWNjb3VudCwgcHVia2V5IH0gb2YgYWNjb3VudHMpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgY29uc3QgcGFyc2VkUHJvZmlsZSA9IG1hbnVhbFBhcnNlUHJvZmlsZShhY2NvdW50LmRhdGEpXHJcbiAgICAgICAgICBpZiAocGFyc2VkUHJvZmlsZSAmJiBcclxuICAgICAgICAgICAgICBwYXJzZWRQcm9maWxlLmlzX2luaXRpYWxpemVkID09PSAxICYmIFxyXG4gICAgICAgICAgICAgIG5ldyBQdWJsaWNLZXkocGFyc2VkUHJvZmlsZS5vd25lcikuZXF1YWxzKHB1YmxpY0tleSkpIHtcclxuICAgICAgICAgICAgZm9sbG93ZXJQcm9maWxlQWRkcmVzcyA9IHB1YmtleVxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhg8J+OryBGb3VuZCBmb2xsb3dlciBwcm9maWxlIGF0IGFkZHJlc3M6ICR7cHVia2V5LnRvU3RyaW5nKCl9YClcclxuICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgLy8gTm90IGEgcHJvZmlsZSBhY2NvdW50LCBjb250aW51ZVxyXG4gICAgICAgICAgY29udGludWVcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICghZm9sbG93ZXJQcm9maWxlQWRkcmVzcykge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgRm9sbG93ZXIgcHJvZmlsZSBmb3IgJHtwdWJsaWNLZXkudG9TdHJpbmcoKS5zbGljZSgwLCA4KX0gbm90IGZvdW5kIG9uIGJsb2NrY2hhaW4uIFBsZWFzZSBjcmVhdGUgYSBwcm9maWxlIGZpcnN0LmApXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IGluc3RydWN0aW9uRGF0YSA9IG5ldyBGb2xsb3dQcm9maWxlSW5zdHJ1Y3Rpb24oe1xyXG4gICAgICAgIHByb2ZpbGVfaWQ6IHByb2ZpbGVQdWJsaWNLZXksXHJcbiAgICAgIH0pXHJcblxyXG4gICAgICBjb25zdCB1bmZvbGxvd1Byb2ZpbGVWYXJpYW50ID0gQnVmZmVyLmZyb20oWzZdKSAvLyBVbmZvbGxvd1Byb2ZpbGUgZW51bSBpbmRleFxyXG4gICAgICBjb25zdCBzZXJpYWxpemVkRGF0YSA9IHNlcmlhbGl6ZShmb2xsb3dQcm9maWxlU2NoZW1hLCBpbnN0cnVjdGlvbkRhdGEpXHJcbiAgICAgIGNvbnN0IGZ1bGxJbnN0cnVjdGlvbkRhdGEgPSBCdWZmZXIuY29uY2F0KFt1bmZvbGxvd1Byb2ZpbGVWYXJpYW50LCBCdWZmZXIuZnJvbShzZXJpYWxpemVkRGF0YSldKVxyXG5cclxuICAgICAgY29uc3QgaW5zdHJ1Y3Rpb24gPSBuZXcgVHJhbnNhY3Rpb25JbnN0cnVjdGlvbih7XHJcbiAgICAgICAga2V5czogW1xyXG4gICAgICAgICAgeyBwdWJrZXk6IHB1YmxpY0tleSwgaXNTaWduZXI6IHRydWUsIGlzV3JpdGFibGU6IGZhbHNlIH0sIC8vIEZvbGxvd2VyIGFjY291bnRcclxuICAgICAgICAgIHsgcHVia2V5OiBwcm9maWxlUHVibGljS2V5LCBpc1NpZ25lcjogZmFsc2UsIGlzV3JpdGFibGU6IHRydWUgfSwgLy8gUHJvZmlsZSB0byB1bmZvbGxvd1xyXG4gICAgICAgICAgeyBwdWJrZXk6IGZvbGxvd2VyUHJvZmlsZUFkZHJlc3MsIGlzU2lnbmVyOiBmYWxzZSwgaXNXcml0YWJsZTogdHJ1ZSB9LCAvLyBGb2xsb3dlcidzIHByb2ZpbGUgYWNjb3VudFxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgcHJvZ3JhbUlkOiBQUk9HUkFNX0lELFxyXG4gICAgICAgIGRhdGE6IGZ1bGxJbnN0cnVjdGlvbkRhdGEsXHJcbiAgICAgIH0pXHJcblxyXG4gICAgICBjb25zb2xlLmxvZygn8J+UkSBVbmZvbGxvdyB0cmFuc2FjdGlvbiBhY2NvdW50czonKVxyXG4gICAgICBjb25zb2xlLmxvZyhgICBGb2xsb3dlcjogJHtwdWJsaWNLZXkudG9TdHJpbmcoKX0gKHNpZ25lciwgcmVhZG9ubHkpYClcclxuICAgICAgY29uc29sZS5sb2coYCAgUHJvZmlsZSB0byB1bmZvbGxvdzogJHtwcm9maWxlUHVibGljS2V5LnRvU3RyaW5nKCl9IChub3Qgc2lnbmVyLCB3cml0YWJsZSlgKVxyXG4gICAgICBjb25zb2xlLmxvZyhgICBGb2xsb3dlciBwcm9maWxlOiAke2ZvbGxvd2VyUHJvZmlsZUFkZHJlc3MudG9TdHJpbmcoKX0gKG5vdCBzaWduZXIsIHdyaXRhYmxlKWApXHJcblxyXG4gICAgICBjb25zdCB0cmFuc2FjdGlvbiA9IG5ldyBUcmFuc2FjdGlvbigpLmFkZChpbnN0cnVjdGlvbilcclxuICAgICAgY29uc3QgeyBibG9ja2hhc2ggfSA9IGF3YWl0IGNvbm5lY3Rpb24uZ2V0TGF0ZXN0QmxvY2toYXNoKCdwcm9jZXNzZWQnKVxyXG4gICAgICB0cmFuc2FjdGlvbi5yZWNlbnRCbG9ja2hhc2ggPSBibG9ja2hhc2hcclxuICAgICAgdHJhbnNhY3Rpb24uZmVlUGF5ZXIgPSBwdWJsaWNLZXlcclxuXHJcbiAgICAgIGNvbnN0IHNpZ25hdHVyZSA9IGF3YWl0IHNlbmRUcmFuc2FjdGlvbih0cmFuc2FjdGlvbiwgY29ubmVjdGlvbiwge1xyXG4gICAgICAgIHNraXBQcmVmbGlnaHQ6IGZhbHNlLFxyXG4gICAgICAgIHByZWZsaWdodENvbW1pdG1lbnQ6ICdwcm9jZXNzZWQnLFxyXG4gICAgICAgIG1heFJldHJpZXM6IDMsXHJcbiAgICAgIH0pXHJcblxyXG4gICAgICBhd2FpdCBjb25uZWN0aW9uLmNvbmZpcm1UcmFuc2FjdGlvbih7XHJcbiAgICAgICAgc2lnbmF0dXJlLFxyXG4gICAgICAgIGJsb2NraGFzaCxcclxuICAgICAgICBsYXN0VmFsaWRCbG9ja0hlaWdodDogKGF3YWl0IGNvbm5lY3Rpb24uZ2V0TGF0ZXN0QmxvY2toYXNoKCkpLmxhc3RWYWxpZEJsb2NrSGVpZ2h0LFxyXG4gICAgICB9LCAncHJvY2Vzc2VkJylcclxuXHJcbiAgICAgIGNvbnNvbGUubG9nKCfinIUgVW5mb2xsb3cgc3VjY2Vzc2Z1bCEnKVxyXG4gICAgICB0b2FzdC5zdWNjZXNzKCdQcm9maWxlIHVuZm9sbG93ZWQhJylcclxuICAgICAgcmV0dXJuIHNpZ25hdHVyZVxyXG4gICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdVbmZvbGxvdyBlcnJvcjonLCBlcnJvcilcclxuICAgICAgdG9hc3QuZXJyb3IoYEZhaWxlZCB0byB1bmZvbGxvdyBwcm9maWxlOiAke2Vycm9yLm1lc3NhZ2UgfHwgJ1Vua25vd24gZXJyb3InfWApXHJcbiAgICAgIHRocm93IGVycm9yXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBVcGRhdGUgUHJvZmlsZVxyXG4gIGNvbnN0IHVwZGF0ZVByb2ZpbGUgPSBhc3luYyAoXHJcbiAgICB1c2VybmFtZTogc3RyaW5nLFxyXG4gICAgYmlvOiBzdHJpbmcsXHJcbiAgICBwcm9maWxlSW1hZ2U6IHN0cmluZyxcclxuICAgIGNvdmVySW1hZ2U6IHN0cmluZ1xyXG4gICkgPT4ge1xyXG4gICAgaWYgKCFwdWJsaWNLZXkpIHRocm93IG5ldyBFcnJvcignV2FsbGV0IG5vdCBjb25uZWN0ZWQnKVxyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCfwn5SEIFVwZGF0aW5nIHByb2ZpbGU6JywgdXNlcm5hbWUpXHJcbiAgICAgIFxyXG4gICAgICBjb25zdCBpbnN0cnVjdGlvbkRhdGEgPSBuZXcgQ3JlYXRlUHJvZmlsZUluc3RydWN0aW9uKHtcclxuICAgICAgICB1c2VybmFtZSxcclxuICAgICAgICBiaW8sXHJcbiAgICAgICAgcHJvZmlsZV9pbWFnZTogcHJvZmlsZUltYWdlLFxyXG4gICAgICAgIGNvdmVyX2ltYWdlOiBjb3ZlckltYWdlLFxyXG4gICAgICB9KVxyXG5cclxuICAgICAgY29uc3QgdXBkYXRlUHJvZmlsZVZhcmlhbnQgPSBCdWZmZXIuZnJvbShbMV0pIC8vIFVwZGF0ZVByb2ZpbGUgZW51bSBpbmRleCAoc2FtZSBhcyBDcmVhdGVQcm9maWxlKVxyXG4gICAgICBjb25zdCBzZXJpYWxpemVkRGF0YSA9IHNlcmlhbGl6ZShjcmVhdGVQcm9maWxlU2NoZW1hLCBpbnN0cnVjdGlvbkRhdGEpXHJcbiAgICAgIGNvbnN0IGZ1bGxJbnN0cnVjdGlvbkRhdGEgPSBCdWZmZXIuY29uY2F0KFt1cGRhdGVQcm9maWxlVmFyaWFudCwgQnVmZmVyLmZyb20oc2VyaWFsaXplZERhdGEpXSlcclxuXHJcbiAgICAgIGNvbnN0IGluc3RydWN0aW9uID0gbmV3IFRyYW5zYWN0aW9uSW5zdHJ1Y3Rpb24oe1xyXG4gICAgICAgIGtleXM6IFtcclxuICAgICAgICAgIHsgcHVia2V5OiBwdWJsaWNLZXksIGlzU2lnbmVyOiB0cnVlLCBpc1dyaXRhYmxlOiB0cnVlIH0sIC8vIFByb2ZpbGUgb3duZXIgYWNjb3VudFxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgcHJvZ3JhbUlkOiBQUk9HUkFNX0lELFxyXG4gICAgICAgIGRhdGE6IGZ1bGxJbnN0cnVjdGlvbkRhdGEsXHJcbiAgICAgIH0pXHJcblxyXG4gICAgICBjb25zdCB0cmFuc2FjdGlvbiA9IG5ldyBUcmFuc2FjdGlvbigpLmFkZChpbnN0cnVjdGlvbilcclxuICAgICAgY29uc3Qgc2lnbmF0dXJlID0gYXdhaXQgc2VuZFRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uLCBjb25uZWN0aW9uKVxyXG5cclxuICAgICAgYXdhaXQgY29ubmVjdGlvbi5jb25maXJtVHJhbnNhY3Rpb24oc2lnbmF0dXJlLCAncHJvY2Vzc2VkJylcclxuICAgICAgY29uc29sZS5sb2coJ+KchSBQcm9maWxlIHVwZGF0ZWQgc3VjY2Vzc2Z1bGx5IScpXHJcbiAgICAgIFxyXG4gICAgICAvLyBDbGVhciBjYWNoZSB0byBmb3JjZSByZWZyZXNoXHJcbiAgICAgIHByb2ZpbGVDYWNoZS5kZWxldGUocHVibGljS2V5LnRvU3RyaW5nKCkpXHJcbiAgICAgIFxyXG4gICAgICByZXR1cm4gc2lnbmF0dXJlXHJcbiAgICB9IGNhdGNoIChlcnJvcjogYW55KSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBVcGRhdGUgcHJvZmlsZSBlcnJvcjonLCBlcnJvcilcclxuICAgICAgdGhyb3cgZXJyb3JcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIFV0aWxpdHkgZnVuY3Rpb24gdG8gcHJlbG9hZCBwcm9maWxlIG9uIHdhbGxldCBjb25uZWN0aW9uXHJcbiAgY29uc3QgcHJlbG9hZFByb2ZpbGUgPSBhc3luYyAoKSA9PiB7XHJcbiAgICBpZiAoIXB1YmxpY0tleSkgcmV0dXJuXHJcbiAgICBcclxuICAgIGNvbnNvbGUubG9nKCfwn5qAIFByZWxvYWRpbmcgcHJvZmlsZSBvbiB3YWxsZXQgY29ubmVjdGlvbi4uLicpXHJcbiAgICB0cnkge1xyXG4gICAgICBhd2FpdCBnZXRQcm9maWxlKHB1YmxpY0tleSlcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUud2FybignRmFpbGVkIHRvIHByZWxvYWQgcHJvZmlsZTonLCBlcnJvcilcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBjcmVhdGVQcm9maWxlLFxyXG4gICAgY3JlYXRlUG9zdCxcclxuICAgIGxpa2VQb3N0LFxyXG4gICAgZ2V0UHJvZmlsZSxcclxuICAgIGdldFByb2ZpbGVCeVVzZXJuYW1lLFxyXG4gICAgZ2V0UG9zdHMsXHJcbiAgICBnZXRQcm9maWxlUERBLFxyXG4gICAgZ2V0UG9zdFBEQSxcclxuICAgIGNoZWNrUHJvZmlsZUF0UERBLFxyXG4gICAgcHJlbG9hZFByb2ZpbGUsXHJcbiAgICBjbGVhclByb2ZpbGVDYWNoZSxcclxuICAgIGNyZWF0ZUNvbW11bml0eSxcclxuICAgIGZvbGxvd1Byb2ZpbGUsXHJcbiAgICB1bmZvbGxvd1Byb2ZpbGUsXHJcbiAgICB1cGRhdGVQcm9maWxlLFxyXG4gIH1cclxufSJdLCJuYW1lcyI6WyJ1c2VDb25uZWN0aW9uIiwidXNlV2FsbGV0IiwiUHVibGljS2V5IiwiVHJhbnNhY3Rpb24iLCJUcmFuc2FjdGlvbkluc3RydWN0aW9uIiwiU3lzdGVtUHJvZ3JhbSIsIkxBTVBPUlRTX1BFUl9TT0wiLCJLZXlwYWlyIiwic2VyaWFsaXplIiwiZGVzZXJpYWxpemUiLCJ0b2FzdCIsImNvbmZpZyIsIlBST0dSQU1fSUQiLCJzb2xhbmEiLCJwcm9ncmFtSWQiLCJERUJVR19NT0RFIiwicHJvY2VzcyIsIkNvbnRyYWN0SW5zdHJ1Y3Rpb24iLCJQb3N0UmF0aW5nIiwiQ3JlYXRlUHJvZmlsZUluc3RydWN0aW9uIiwiY29uc3RydWN0b3IiLCJmaWVsZHMiLCJ1c2VybmFtZSIsImJpbyIsInByb2ZpbGVfaW1hZ2UiLCJjb3Zlcl9pbWFnZSIsIkNyZWF0ZVBvc3RJbnN0cnVjdGlvbiIsImNvbnRlbnQiLCJpbWFnZXMiLCJMaWtlUG9zdEluc3RydWN0aW9uIiwicG9zdF9pZCIsIlByb2ZpbGVBY2NvdW50IiwiaXNfaW5pdGlhbGl6ZWQiLCJvd25lciIsImNyZWF0ZWRfYXQiLCJmb2xsb3dlcnNfY291bnQiLCJmb2xsb3dpbmdfY291bnQiLCJ1c2VyX2NyZWRpdF9yYXRpbmciLCJwb3N0c19jb3VudCIsImxhc3RfcG9zdF90aW1lc3RhbXAiLCJkYWlseV9wb3N0X2NvdW50IiwiaXNfdmVyaWZpZWQiLCJQb3N0QWNjb3VudCIsImlkIiwiYXV0aG9yIiwidGltZXN0YW1wIiwibGlrZXMiLCJjb21tZW50cyIsIm1pcnJvcnMiLCJyYXRpbmciLCJpbl9raWxsX3pvbmUiLCJjcmVhdGVQcm9maWxlU2NoZW1hIiwiTWFwIiwia2luZCIsImNyZWF0ZVBvc3RTY2hlbWEiLCJsaWtlUG9zdFNjaGVtYSIsInByb2ZpbGVBY2NvdW50U2NoZW1hIiwicG9zdEFjY291bnRTY2hlbWEiLCJDb21tdW5pdHlBY2NvdW50IiwiY3JlYXRvciIsIm5hbWUiLCJkZXNjcmlwdGlvbiIsImF2YXRhciIsInJ1bGVzIiwibWVtYmVyX2NvdW50IiwiaXNfcHJpdmF0ZSIsIkNyZWF0ZUNvbW11bml0eUluc3RydWN0aW9uIiwiRm9sbG93UHJvZmlsZUluc3RydWN0aW9uIiwicHJvZmlsZV9pZCIsInRvQnVmZmVyIiwiY3JlYXRlQ29tbXVuaXR5U2NoZW1hIiwiZm9sbG93UHJvZmlsZVNjaGVtYSIsImNvbW11bml0eUFjY291bnRTY2hlbWEiLCJwcm9maWxlQ2FjaGUiLCJDQUNIRV9EVVJBVElPTiIsInBvc3RzQ2FjaGUiLCJQT1NUU19DQUNIRV9EVVJBVElPTiIsIkxPQ0FMU1RPUkFHRV9DQUNIRV9QUkVGSVgiLCJMT0NBTFNUT1JBR0VfQ0FDSEVfRFVSQVRJT04iLCJzYXZlUHJvZmlsZVRvTG9jYWxTdG9yYWdlIiwid2FsbGV0QWRkcmVzcyIsInByb2ZpbGUiLCJjYWNoZUtleSIsImNhY2hlRGF0YSIsIkRhdGUiLCJub3ciLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwiSlNPTiIsInN0cmluZ2lmeSIsImNvbnNvbGUiLCJsb2ciLCJzbGljZSIsImVycm9yIiwid2FybiIsImdldFByb2ZpbGVGcm9tTG9jYWxTdG9yYWdlIiwiY2FjaGVkIiwiZ2V0SXRlbSIsInBhcnNlIiwicmVtb3ZlSXRlbSIsImNsZWFyUHJvZmlsZUNhY2hlIiwiZGVsZXRlIiwiY2xlYXIiLCJrZXlzIiwiT2JqZWN0IiwiZm9yRWFjaCIsImtleSIsInN0YXJ0c1dpdGgiLCJ1c2VCbG9ja3NQcm9ncmFtIiwiY29ubmVjdGlvbiIsInB1YmxpY0tleSIsInNlbmRUcmFuc2FjdGlvbiIsImdldFByb2ZpbGVQREEiLCJ1c2VyUHVibGljS2V5IiwicHJvZmlsZVBEQSIsImZpbmRQcm9ncmFtQWRkcmVzcyIsIkJ1ZmZlciIsImZyb20iLCJnZXRQb3N0UERBIiwicG9zdElkIiwicG9zdFBEQSIsInRvU3RyaW5nIiwiY2hlY2tQcm9ncmFtRXhpc3RzIiwicHJvZ3JhbUluZm8iLCJnZXRBY2NvdW50SW5mbyIsImV4ZWN1dGFibGUiLCJjaGVja1NPTEJhbGFuY2UiLCJiYWxhbmNlIiwiZ2V0QmFsYW5jZSIsImNvbnZlcnRQcm9maWxlQWNjb3VudCIsInByb2ZpbGVBY2NvdW50IiwiY2FsY3VsYXRlVUNSIiwicG9zdHNDb3VudCIsIk51bWJlciIsImZvbGxvd2Vyc0NvdW50IiwiZm9sbG93aW5nQ291bnQiLCJ1Y3IiLCJwb3N0c1Njb3JlIiwiTWF0aCIsIm1pbiIsImZvbGxvd2Vyc1Njb3JlIiwicmF0aW9Cb251cyIsInJhdGlvIiwiYWNjb3VudEFnZSIsImRheXNPbGQiLCJhZ2VCb251cyIsInZlcmlmaWNhdGlvbkJvbnVzIiwibGFzdFBvc3RBZ2UiLCJkYXlzU2luY2VMYXN0UG9zdCIsImFjdGl2aXR5Qm9udXMiLCJpc0luaXRpYWxpemVkIiwicHJvZmlsZUltYWdlIiwiY292ZXJJbWFnZSIsImNyZWF0ZWRBdCIsInVzZXJDcmVkaXRSYXRpbmciLCJsYXN0UG9zdFRpbWVzdGFtcCIsImRhaWx5UG9zdENvdW50IiwiaXNWZXJpZmllZCIsImNvbnZlcnRQb3N0QWNjb3VudCIsInBvc3RBY2NvdW50IiwiaW5LaWxsWm9uZSIsImNyZWF0ZVByb2ZpbGUiLCJFcnJvciIsInByb2dyYW1FeGlzdHMiLCJuZXR3b3JrIiwiaW5zdHJ1Y3Rpb25EYXRhIiwiY3JlYXRlUHJvZmlsZVZhcmlhbnQiLCJzZXJpYWxpemVkRGF0YSIsImZ1bGxJbnN0cnVjdGlvbkRhdGEiLCJjb25jYXQiLCJpbnN0cnVjdGlvbiIsInB1YmtleSIsImlzU2lnbmVyIiwiaXNXcml0YWJsZSIsImRhdGEiLCJ0cmFuc2FjdGlvbiIsImFkZCIsImJsb2NraGFzaCIsImdldExhdGVzdEJsb2NraGFzaCIsInJlY2VudEJsb2NraGFzaCIsImZlZVBheWVyIiwic2ltdWxhdGlvbiIsInNpbXVsYXRlVHJhbnNhY3Rpb24iLCJ2YWx1ZSIsImVyciIsInNpZ25hdHVyZSIsInNraXBQcmVmbGlnaHQiLCJwcmVmbGlnaHRDb21taXRtZW50IiwibWF4UmV0cmllcyIsImNvbmZpcm1UcmFuc2FjdGlvbiIsImxhc3RWYWxpZEJsb2NrSGVpZ2h0Iiwic3VjY2VzcyIsIm1lc3NhZ2UiLCJnZXRQcm9maWxlIiwiY2FjaGVkUHJvZmlsZSIsInNldCIsInNldFRpbWVvdXQiLCJoYXMiLCJnZXQiLCJhY2NvdW50cyIsImdldFByb2dyYW1BY2NvdW50cyIsImxlbmd0aCIsInByb2ZpbGVzRm91bmQiLCJhY2NvdW50IiwibWFudWFsUGFyc2VQcm9maWxlIiwiYWNjb3VudE93bmVyIiwiZXF1YWxzIiwiZ2V0UHJvZmlsZUJ5VXNlcm5hbWUiLCJhY2NvdW50SW5mbyIsImdldFBvc3RzIiwicG9zdHMiLCJtYW51YWxQYXJzZVBvc3QiLCJwb3N0IiwicHVzaCIsInN1YnN0cmluZyIsInNvcnQiLCJhIiwiYiIsImNyZWF0ZVBvc3QiLCJ1c2VyUHJvZmlsZSIsInBvc3RLZXlwYWlyIiwiZ2VuZXJhdGUiLCJ1c2VyUHJvZmlsZVBEQSIsImNyZWF0ZVBvc3RWYXJpYW50IiwibWFwIiwiayIsInBhcnRpYWxTaWduIiwic2lnbmVycyIsImluY2x1ZGVzIiwidG9GaXhlZCIsImxpa2VQb3N0IiwicG9zdEF1dGhvciIsInBvc3RBY2NvdW50QWRkcmVzcyIsInBhcnNlZFBvc3QiLCJhdXRob3JQcm9maWxlQWRkcmVzcyIsInBhcnNlZFByb2ZpbGUiLCJCaWdJbnQiLCJsaWtlUG9zdFZhcmlhbnQiLCJjaGVja1Byb2ZpbGVBdFBEQSIsInBkYUFkZHJlc3MiLCJwZGEiLCJBcnJheSIsIm9mZnNldCIsInVzZXJuYW1lTGVuZ3RoIiwicmVhZFVJbnQzMkxFIiwiYmlvTGVuZ3RoIiwicHJvZmlsZUltYWdlTGVuZ3RoIiwiY292ZXJJbWFnZUxlbmd0aCIsInJlYWRCaWdVSW50NjRMRSIsInJlYWRCaWdJbnQ2NExFIiwiVWludDhBcnJheSIsImNvbnRlbnRMZW5ndGgiLCJpbWFnZXNMZW5ndGgiLCJpIiwiaW1hZ2VMZW5ndGgiLCJpbWFnZSIsImNvbnZlcnRDb21tdW5pdHlBY2NvdW50IiwiY29tbXVuaXR5QWNjb3VudCIsIm1lbWJlckNvdW50IiwiaXNQcml2YXRlIiwiY3JlYXRlQ29tbXVuaXR5IiwiY29tbXVuaXR5S2V5cGFpciIsImNyZWF0ZUNvbW11bml0eVZhcmlhbnQiLCJmb2xsb3dQcm9maWxlIiwicHJvZmlsZVB1YmxpY0tleSIsImZvbGxvd2VyUHJvZmlsZUFkZHJlc3MiLCJmb2xsb3dQcm9maWxlVmFyaWFudCIsInVuZm9sbG93UHJvZmlsZSIsInVuZm9sbG93UHJvZmlsZVZhcmlhbnQiLCJ1cGRhdGVQcm9maWxlIiwidXBkYXRlUHJvZmlsZVZhcmlhbnQiLCJwcmVsb2FkUHJvZmlsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./hooks/useBlocksProgram.ts\n"));

/***/ })

});